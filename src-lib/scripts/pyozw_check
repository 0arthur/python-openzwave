#!python
# -*- coding: utf-8 -*-
"""
This file is part of **python-openzwave** project https://github.com/OpenZWave/python-openzwave.
    :platform: Unix, Windows, MacOS X

.. moduleauthor:: bibi21000 aka SÃ©bastien GALLET <bibi21000@gmail.com>

License : GPL(v3)

**python-openzwave** is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

**python-openzwave** is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with python-openzwave. If not, see http://www.gnu.org/licenses.

"""
import logging
h = logging.NullHandler()
logger = logging.getLogger(__name__).addHandler(h)
import time
import argparse

network_state = None

def imports(args):
    if args.output == 'txt':
        print("-------------------------------------------------------------------------------")
        print("Import libs")
        print("Try to import libopenzwave")
        import libopenzwave
        print("Try to get python_openzwave version")
        from libopenzwave import PyLogLevels
        print("Try to get options")
        options = libopenzwave.PyOptions(user_path=".", cmd_line="--logging false")
        options.lock()
        time.sleep(1.0)
        print("Try to get manager")
        manager = libopenzwave.PyManager()
        manager.create()
        print(manager.getPythonLibraryVersionNumber())
        print("Try to get openzwave version")
        print(manager.getOzwLibraryVersion())
        print("Try to import libopenzwave.PyLogLevels")
        print("Try to destroy manager")
        manager.destroy()
        print("Try to destroy options")
        options.destroy()
        time.sleep(1.0)
        print("Try to import openzwave (API)")
        import openzwave

def zwcallback(args):
    import libopenzwave
    print('zwcallback with args=[%s]' % args)
    notify_type = args['notificationType']
    network_state = notify_type
    print("Received {0} : {1}".format(notify_type,libopenzwave[notify_type]))

def init_device(args):
    if args.output == 'txt':
        print("-------------------------------------------------------------------------------")
        print("Intialize device {0}".format(args.device))
        import libopenzwave
        print("Try to get options")
        options = libopenzwave.PyOptions(user_path=".", cmd_line="--logging true")
        options.lock()
        time.sleep(1.0)
        print("Try to get manager")
        manager = libopenzwave.PyManager()
        manager.create()
        print("Try to add watcher")
        manager.addWatcher(zwcallback)
        time.sleep(1.0)
        manager.addDriver(args.device)
        print("Wait for notifications ({0}s)".format(args.timeout))
        next_print = args.timeout/10
        delta = 0.1
        for i in xrange(0, int(args.timeout/delta)):
            time.sleep(delta)
            next_print -= delta
            if next_print < 0:
                next_print = args.timeout/10
                print('.')
        time.sleep(1.0)
        print("Try to remove driver")
        manager.removeDriver(args.device)
        time.sleep(2.0)
        print("Try to remove watcher")
        manager.removeWatcher(zwcallback)
        print("Try to destroy manager")
        manager.destroy()
        print("Try to destroy options")
        options.destroy()
        time.sleep(1.0)
        
def pyozw_parser():
    parser = argparse.ArgumentParser(description='Run python_openzwave basics checks.')
    parser.add_argument('-o', '--output', action='store', help='The format (txt, raw, ...)', choices=['txt', 'raw'], default='txt')
    parser.add_argument('-d', '--device', action='store', help='The device port', default='/dev/ttyUSB0')
    parser.add_argument('-m', '--imports', action='store_true', help='Import all libs', default=True)
    parser.add_argument('-i', '--init_device', action='store_true', help='Intialize the device', default=False)
    parser.add_argument('-t', '--timeout', action='store',type=int, help='The default timeout for zwave network sniffing', default=10)
    return parser

def main():
    parser = pyozw_parser()
    args = parser.parse_args()
    if args.imports:
        imports(args)
    if args.init_device:
        init_device(args)
if __name__ == '__main__':
    main()

