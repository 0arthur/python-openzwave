/* Generated by Cython 0.20.1post0 (Debian 0.20.1+git90-g0e6e38e-1ubuntu2) on Sun Mar 29 15:24:36 2015 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02040000
    #error Cython requires Python 2.4+.
#else
#define CYTHON_ABI "0_20_1post0"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY
#define Py_OptimizeFlag 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define CYTHON_FORMAT_SSIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   __Pyx_PyInt_As_int(o)
  #define PyNumber_Index(o)    ((PyNumber_Check(o) && !PyFloat_Check(o)) ? PyNumber_Int(o) : \
                                (PyErr_Format(PyExc_TypeError, \
                                              "expected index value, got %.200s", Py_TYPE(o)->tp_name), \
                                 (PyObject*)0))
  #define __Pyx_PyIndex_Check(o) (PyNumber_Check(o) && !PyFloat_Check(o) && \
                                  !PyComplex_Check(o))
  #define PyIndex_Check __Pyx_PyIndex_Check
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
  #define __PYX_BUILD_PY_SSIZE_T "i"
#else
  #define __PYX_BUILD_PY_SSIZE_T "n"
  #define CYTHON_FORMAT_SSIZE_T "z"
  #define __Pyx_PyIndex_Check PyIndex_Check
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)
  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;
  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)
  #define PyBUF_RECORDS (PyBUF_STRIDES | PyBUF_FORMAT | PyBUF_WRITABLE)
  #define PyBUF_FULL (PyBUF_INDIRECT | PyBUF_FORMAT | PyBUF_WRITABLE)
  typedef int (*getbufferproc)(PyObject *, Py_buffer *, int);
  typedef void (*releasebufferproc)(PyObject *, Py_buffer *);
#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyUnicode_FromString(s) PyUnicode_Decode(s, strlen(s), "UTF-8", "strict")
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_TPFLAGS_HAVE_VERSION_TAG 0
#endif
#if PY_VERSION_HEX < 0x02060000 && !defined(Py_TPFLAGS_IS_ABSTRACT)
  #define Py_TPFLAGS_IS_ABSTRACT 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if PY_VERSION_HEX < 0x02060000
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if (PY_MAJOR_VERSION < 3) || (PY_VERSION_HEX >= 0x03010300)
  #define __Pyx_PySequence_GetSlice(obj, a, b) PySequence_GetSlice(obj, a, b)
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) PySequence_SetSlice(obj, a, b, value)
  #define __Pyx_PySequence_DelSlice(obj, a, b) PySequence_DelSlice(obj, a, b)
#else
  #define __Pyx_PySequence_GetSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), (PyObject*)0) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_GetSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object is unsliceable", (obj)->ob_type->tp_name), (PyObject*)0)))
  #define __Pyx_PySequence_SetSlice(obj, a, b, value) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_SetSlice(obj, a, b, value)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice assignment", (obj)->ob_type->tp_name), -1)))
  #define __Pyx_PySequence_DelSlice(obj, a, b) (unlikely(!(obj)) ? \
        (PyErr_SetString(PyExc_SystemError, "null argument to internal routine"), -1) : \
        (likely((obj)->ob_type->tp_as_mapping) ? (PySequence_DelSlice(obj, a, b)) : \
            (PyErr_Format(PyExc_TypeError, "'%.200s' object doesn't support slice deletion", (obj)->ob_type->tp_name), -1)))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__libopenzwave
#define __PYX_HAVE_API__libopenzwave
#include <utility>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <map>
#include <vector>
#include "stdint.h"
#include <string>
#include <new>
#include "vers.cpp"
#include "string.h"
#include "stdlib.h"
#include "Node.h"
#include "Driver.h"
#include "ValueID.h"
#include "Notification.h"
#include "Options.h"
#include "Log.h"
#include "Manager.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return u_end - u - 1;
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    if (strcmp(PyBytes_AsString(default_encoding), "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        const char* default_encoding_c = PyBytes_AS_STRING(default_encoding);
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (ascii_chars_u == NULL) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (ascii_chars_b == NULL || strncmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
    }
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys = NULL;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (sys == NULL) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    if (default_encoding == NULL) goto bad;
    default_encoding_c = PyBytes_AS_STRING(default_encoding);
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(sys);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(sys);
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "libopenzwave.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_12libopenzwave_PyOptions;
struct __pyx_obj_12libopenzwave_RetAlloc;
struct __pyx_obj_12libopenzwave_PyManager;

/* "node.pxd":57
 *         vector[CommandClassData] m_ccData     # List of statistic on each command_class
 * 
 * ctypedef NodeData NodeData_t             # <<<<<<<<<<<<<<
 * 
 */
typedef struct OpenZWave::Node::NodeData __pyx_t_4node_NodeData_t;

/* "driver.pxd":99
 *           ControllerError_Overflow = 12                     # RequestNetworkUpdate error *[inserted by cython to avoid comment closer]/
 * 
 * ctypedef DriverData DriverData_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef void (*pfnControllerCallback_t)( ControllerState _state, ControllerError _error, void* _context )
 */
typedef struct OpenZWave::Driver::DriverData __pyx_t_6driver_DriverData_t;

/* "driver.pxd":101
 * ctypedef DriverData DriverData_t
 * 
 * ctypedef void (*pfnControllerCallback_t)( ControllerState _state, ControllerError _error, void* _context )             # <<<<<<<<<<<<<<
 */
typedef void (*__pyx_t_6driver_pfnControllerCallback_t)(enum OpenZWave::Driver::ControllerState, enum OpenZWave::Driver::ControllerError, void *);

/* "notification.pxd":27
 *     ctypedef char* const_notification "OpenZWave::Notification const*"
 * 
 * ctypedef void (*pfnOnNotification_t)(const_notification _pNotification, void* _context )             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Notification.h" namespace "OpenZWave::Notification":
 */
typedef void (*__pyx_t_12notification_pfnOnNotification_t)(OpenZWave::Notification const*, void *);

/* "libopenzwave.pyx":419
 *     return None
 * 
 * cdef class PyOptions:             # <<<<<<<<<<<<<<
 *     """
 *     Manage options manager
 */
struct __pyx_obj_12libopenzwave_PyOptions {
  PyObject_HEAD
  OpenZWave::Options *options;
};


/* "libopenzwave.pyx":508
 *         return configPath()
 * 
 * cdef class RetAlloc:             # <<<<<<<<<<<<<<
 *     """
 *     Map an array of uint8_t used when retrieving sets.
 */
struct __pyx_obj_12libopenzwave_RetAlloc {
  PyObject_HEAD
  uint32_t siz;
  uint8_t *data;
};


/* "libopenzwave.pyx":525
 *         free(self.data)
 * 
 * cdef class PyManager:             # <<<<<<<<<<<<<<
 *     '''
 * The main public interface to OpenZWave.
 */
struct __pyx_obj_12libopenzwave_PyManager {
  PyObject_HEAD
  OpenZWave::Manager *manager;
  PyObject *_watcherCallback;
  PyObject *_controllerCallback;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x); /*proto*/

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

#if PY_VERSION_HEX < 0x02050000
#ifndef PyAnySet_CheckExact
#define PyAnySet_CheckExact(ob) \
    ((ob)->ob_type == &PySet_Type || \
     (ob)->ob_type == &PyFrozenSet_Type)
#define PySet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PySet_Type, (iterable), NULL)
#define PyFrozenSet_New(iterable) \
    PyObject_CallFunctionObjArgs((PyObject *)&PyFrozenSet_Type, (iterable), NULL)
#define PySet_Size(anyset) \
    PyObject_Size((anyset))
#define PySet_GET_SIZE(anyset) \
    PyObject_Size((anyset))
#define PySet_Contains(anyset, key) \
    PySequence_Contains((anyset), (key))
#define PySet_Pop(set) \
    PyObject_CallMethod((set), (char*)"pop", NULL)
static CYTHON_INLINE int PySet_Clear(PyObject *set) {
    PyObject *ret = PyObject_CallMethod(set, (char*)"clear", NULL);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}
static CYTHON_INLINE int PySet_Discard(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char*)"discard", (char*)"(O)", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}
static CYTHON_INLINE int PySet_Add(PyObject *set, PyObject *key) {
    PyObject *ret = PyObject_CallMethod(set, (char*)"add", (char*)"(O)", key);
    if (!ret) return -1;
    Py_DECREF(ret); return 0;
}
#endif /* PyAnySet_CheckExact (<= Py2.4) */
#endif /* < Py2.5  */

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name); /*proto*/

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
    PyObject *func_dict;
    PyObject *func_weakreflist;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj; /* No-args super() class cell */
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;   /* Const defaults tuple */
    PyObject *defaults_kwdict;  /* Const kwonly defaults dict */
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations; /* function annotations dict */
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc); /*proto*/
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *);

static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *);

static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int16_t(int16_t value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value);

static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value);

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE int16_t __Pyx_PyInt_As_int16_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int8_t(int8_t value);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __Pyx_check_binary_version(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'mylibc' */

/* Module declarations from 'vers' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'node' */

/* Module declarations from 'driver' */

/* Module declarations from 'values' */

/* Module declarations from 'notification' */

/* Module declarations from 'options' */

/* Module declarations from 'log' */

/* Module declarations from 'manager' */

/* Module declarations from 'libopenzwave' */
static PyTypeObject *__pyx_ptype_12libopenzwave_PyOptions = 0;
static PyTypeObject *__pyx_ptype_12libopenzwave_RetAlloc = 0;
static PyTypeObject *__pyx_ptype_12libopenzwave_PyManager = 0;
static std::map<uint64_t,OpenZWave::ValueID> __pyx_v_12libopenzwave_values_map;
static PyObject *__pyx_f_12libopenzwave_getValueFromType(OpenZWave::Manager *, PyObject *); /*proto*/
static PyObject *__pyx_f_12libopenzwave_addValueId(OpenZWave::ValueID, PyObject *); /*proto*/
static void __pyx_f_12libopenzwave_notif_callback(OpenZWave::Notification const*, void *); /*proto*/
static void __pyx_f_12libopenzwave_ctrl_callback(enum OpenZWave::Driver::ControllerState, enum OpenZWave::Driver::ControllerError, void *); /*proto*/
static PyObject *__pyx_f_12libopenzwave_driverData(int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_convert_string_to_py_(const std::string &); /*proto*/
#define __Pyx_MODULE_NAME "libopenzwave"
int __pyx_module_is_main_libopenzwave = 0;

/* Implementation of 'libopenzwave' */
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_chr;
static PyObject *__pyx_builtin_ord;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_pf_12libopenzwave_11NullHandler_emit(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_record); /* proto */
static PyObject *__pyx_pf_12libopenzwave_11EnumWithDoc_setDoc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_doc); /* proto */
static PyObject *__pyx_pf_12libopenzwave_driverData(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_2configPath(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_create(struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self, char *__pyx_v_a, char *__pyx_v_b, char *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_2lock(struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_4addOptionBool(struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self, char *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_6addOptionInt(struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self, char *__pyx_v_name, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_8addOptionString(struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self, char *__pyx_v_name, char *__pyx_v_value, PyObject *__pyx_v_append); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyOptions_10getConfigPath(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self); /* proto */
static int __pyx_pf_12libopenzwave_8RetAlloc___cinit__(struct __pyx_obj_12libopenzwave_RetAlloc *__pyx_v_self, uint32_t __pyx_v_siz); /* proto */
static void __pyx_pf_12libopenzwave_8RetAlloc_2__dealloc__(struct __pyx_obj_12libopenzwave_RetAlloc *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_create(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_2writeConfig(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_4addDriver(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, char *__pyx_v_serialport); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_6removeDriver(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, char *__pyx_v_serialport); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_8getControllerInterfaceType(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_10getControllerPath(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_12getControllerNodeId(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_14getSUCNodeId(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_16isPrimaryController(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_18isStaticUpdateController(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_20isBridgeController(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_22getLibraryVersion(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_24getPythonLibraryVersion(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_26getPythonLibraryVersionNumber(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_28getOzwLibraryVersion(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_30getOzwLibraryVersionNumber(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_32getLibraryTypeName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_34getSendQueueCount(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_36logDriverStatistics(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_38getDriverStatistics(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_40testNetworkNode(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_count); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_42testNetwork(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_count); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_44healNetworkNode(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_upNodeRoute); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_46healNetwork(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_upNodeRoute); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_48getPollInterval(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_50setPollInterval(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_milliseconds, PyObject *__pyx_v_bIntervalBetweenPolls); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_52enablePoll(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_intensity); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_54disablePoll(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_56isPolled(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_58getPollIntensity(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_60setPollIntensity(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_intensity); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_62getNodeStatistics(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId, PyObject *__pyx_v_nodeId); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_64requestNodeDynamic(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_66refreshNodeInfo(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_68requestNodeState(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_70isNodeBeamingDevice(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_72isNodeListeningDevice(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_74isNodeFrequentListeningDevice(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_76isNodeSecurityDevice(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_78isNodeRoutingDevice(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_80getNodeMaxBaudRate(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_82getNodeVersion(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_84getNodeSecurity(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_86getNodeBasic(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_88getNodeGeneric(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_90getNodeSpecific(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_92getNodeType(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_94getNodeNeighbors(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_96getNodeManufacturerName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_98getNodeProductName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_100getNodeName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_102getNodeLocation(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_104getNodeManufacturerId(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_106getNodeProductType(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_108getNodeProductId(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_110setNodeManufacturerName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, char *__pyx_v_manufacturerName); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_112setNodeProductName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, char *__pyx_v_productName); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_114setNodeName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_116setNodeLocation(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, char *__pyx_v_location); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_118setNodeOn(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_120setNodeOff(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_122setNodeLevel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_level); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_124isNodeInfoReceived(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_126getNodeClassInformation(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_commandClassId, CYTHON_UNUSED PyObject *__pyx_v_className, CYTHON_UNUSED PyObject *__pyx_v_classVersion); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_128isNodeAwake(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId, PyObject *__pyx_v_nodeId); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_130isNodeFailed(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId, PyObject *__pyx_v_nodeId); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_132getNodeQueryStage(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId, PyObject *__pyx_v_nodeId); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_134getNodeQueryStageCode(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_queryStage); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_136setValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_138refreshValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_140getValueLabel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_142setValueLabel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, char *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_144getValueUnits(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_146setValueUnits(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, char *__pyx_v_unit); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_148getValueHelp(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_150setValueHelp(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, char *__pyx_v_help); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_152getValueMin(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_154getValueMax(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_156isValueReadOnly(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_158isValueWriteOnly(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_160isValueSet(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_162isValuePolled(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_164getValueGenre(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_166getValueCommandClass(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_168getValueInstance(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_170getValueIndex(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_172getValueType(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_174getValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_176getValueAsBool(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_178getValueAsByte(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_180getValueAsFloat(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_182getValueAsShort(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_184getValueAsInt(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_186getValueAsString(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_188getValueListSelectionStr(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_190getValueListSelectionNum(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_192getValueListItems(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_194pressButton(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_196releaseButton(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_198getValueFloatPrecision(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_200getChangeVerified(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_202setChangeVerified(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_verify); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_204setSwitchPoint(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_hours, PyObject *__pyx_v_minutes, PyObject *__pyx_v_setback); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_206removeSwitchPoint(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_hours, PyObject *__pyx_v_minutes); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_208clearSwitchPoints(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_210getSwitchPoint(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_idx, CYTHON_UNUSED PyObject *__pyx_v_hours, CYTHON_UNUSED PyObject *__pyx_v_minutes, CYTHON_UNUSED PyObject *__pyx_v_setback); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_212getNumSwitchPoints(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_214switchAllOn(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_216switchAllOff(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_218setConfigParam(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_param, PyObject *__pyx_v_value, PyObject *__pyx_v_size); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_220requestConfigParam(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_param); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_222requestAllConfigParams(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_224getNumGroups(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_226getAssociations(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_groupidx); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_228getMaxAssociations(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_groupidx); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_230getGroupLabel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_groupidx); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_232addAssociation(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_groupidx, PyObject *__pyx_v_targetnodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_234removeAssociation(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_groupidx, PyObject *__pyx_v_targetnodeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_236addWatcher(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_pythonfunc); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_238removeWatcher(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pythonfunc); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_240resetController(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_242softResetController(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_244cancelControllerCommand(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_246beginControllerCommand(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId, PyObject *__pyx_v_command, PyObject *__pyx_v_pythonfunc, PyObject *__pyx_v_highPower, PyObject *__pyx_v_nodeId, PyObject *__pyx_v_arg); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_248getNumScenes(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_250getAllScenes(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_252removeAllScenes(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_254removeScene(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_sceneId); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_256createScene(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_258sceneGetValues(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, uint8_t __pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_260addSceneValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, uint8_t __pyx_v_sceneid, PyObject *__pyx_v_id, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_262removeSceneValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, uint8_t __pyx_v_sceneid, PyObject *__pyx_v_id); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_264setSceneValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, uint8_t __pyx_v_sceneid, PyObject *__pyx_v_id, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_266getSceneLabel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_sceneid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_268setSceneLabel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_sceneid, char *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_270sceneExists(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_sceneid); /* proto */
static PyObject *__pyx_pf_12libopenzwave_9PyManager_272activateScene(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_sceneid); /* proto */
static PyObject *__pyx_tp_new_12libopenzwave_PyOptions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12libopenzwave_RetAlloc(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_12libopenzwave_PyManager(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_[] = "";
static char __pyx_k_a[] = "a";
static char __pyx_k_b[] = "b";
static char __pyx_k_c[] = "c";
static char __pyx_k_id[] = "id";
static char __pyx_k_os[] = "os";
static char __pyx_k_Hid[] = "Hid";
static char __pyx_k_Int[] = "Int";
static char __pyx_k_Raw[] = "Raw";
static char __pyx_k_arg[] = "arg";
static char __pyx_k_chr[] = "chr";
static char __pyx_k_doc[] = "doc";
static char __pyx_k_end[] = "end";
static char __pyx_k_idx[] = "idx";
static char __pyx_k_ord[] = "ord";
static char __pyx_k_siz[] = "siz";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_usr[] = "/usr";
static char __pyx_k_Bool[] = "Bool";
static char __pyx_k_Busy[] = "Busy";
static char __pyx_k_Byte[] = "Byte";
static char __pyx_k_Dead[] = "Dead";
static char __pyx_k_Info[] = "Info";
static char __pyx_k_List[] = "List";
static char __pyx_k_None[] = "None";
static char __pyx_k_User[] = "User";
static char __pyx_k_dist[] = "_dist";
static char __pyx_k_emit[] = "emit";
static char __pyx_k_file[] = "file";
static char __pyx_k_help[] = "help";
static char __pyx_k_join[] = "join";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_name[] = "name";
static char __pyx_k_path[] = "path";
static char __pyx_k_self[] = "self";
static char __pyx_k_size[] = "size";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_type[] = "type";
static char __pyx_k_unit[] = "unit";
static char __pyx_k_Alert[] = "Alert";
static char __pyx_k_Alive[] = "Alive";
static char __pyx_k_Awake[] = "Awake";
static char __pyx_k_Basic[] = "Basic";
static char __pyx_k_Debug[] = "Debug";
static char __pyx_k_Error[] = "Error";
static char __pyx_k_Fatal[] = "Fatal";
static char __pyx_k_Group[] = "Group";
static char __pyx_k_Probe[] = "Probe";
static char __pyx_k_Short[] = "Short";
static char __pyx_k_Sleep[] = "Sleep";
static char __pyx_k_afile[] = "afile";
static char __pyx_k_count[] = "count";
static char __pyx_k_d_d_d[] = "%d.%d.%d";
static char __pyx_k_doc_2[] = "__doc__";
static char __pyx_k_error[] = "error";
static char __pyx_k_event[] = "event";
static char __pyx_k_genre[] = "genre";
static char __pyx_k_hours[] = "hours";
static char __pyx_k_index[] = "index";
static char __pyx_k_label[] = "label";
static char __pyx_k_level[] = "level";
static char __pyx_k_noack[] = "noack";
static char __pyx_k_param[] = "param";
static char __pyx_k_print[] = "print";
static char __pyx_k_range[] = "range";
static char __pyx_k_state[] = "state";
static char __pyx_k_units[] = "units";
static char __pyx_k_value[] = "value";
static char __pyx_k_ACKCnt[] = "ACKCnt";
static char __pyx_k_Always[] = "Always";
static char __pyx_k_Button[] = "Button";
static char __pyx_k_CANCnt[] = "CANCnt";
static char __pyx_k_Cancel[] = "Cancel";
static char __pyx_k_Config[] = "Config";
static char __pyx_k_Detail[] = "Detail";
static char __pyx_k_Failed[] = "Failed";
static char __pyx_k_NAKCnt[] = "NAKCnt";
static char __pyx_k_NodeOK[] = "NodeOK";
static char __pyx_k_None_2[] = "None.";
static char __pyx_k_Normal[] = "Normal";
static char __pyx_k_NotSUC[] = "NotSUC";
static char __pyx_k_OOFCnt[] = "OOFCnt";
static char __pyx_k_Probe1[] = "Probe1";
static char __pyx_k_SOFCnt[] = "SOFCnt";
static char __pyx_k_Serial[] = "Serial";
static char __pyx_k_Static[] = "Static";
static char __pyx_k_String[] = "String";
static char __pyx_k_System[] = "System";
static char __pyx_k_WakeUp[] = "WakeUp";
static char __pyx_k_append[] = "append";
static char __pyx_k_ccData[] = "ccData";
static char __pyx_k_exists[] = "exists";
static char __pyx_k_homeId[] = "homeId";
static char __pyx_k_homeid[] = "homeid";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_nodeId[] = "nodeId";
static char __pyx_k_nodeid[] = "nodeid";
static char __pyx_k_record[] = "record";
static char __pyx_k_sentTS[] = "sentTS";
static char __pyx_k_setDoc[] = "setDoc";
static char __pyx_k_verify[] = "verify";
static char __pyx_k_Decimal[] = "Decimal";
static char __pyx_k_Dynamic[] = "Dynamic";
static char __pyx_k_Handler[] = "Handler";
static char __pyx_k_NodeNew[] = "NodeNew";
static char __pyx_k_Session[] = "Session";
static char __pyx_k_Timeout[] = "Timeout";
static char __pyx_k_Unknown[] = "Unknown";
static char __pyx_k_Waiting[] = "Waiting";
static char __pyx_k_Warning[] = "Warning";
static char __pyx_k_command[] = "command";
static char __pyx_k_dropped[] = "dropped";
static char __pyx_k_listdir[] = "listdir";
static char __pyx_k_logging[] = "logging";
static char __pyx_k_message[] = "message";
static char __pyx_k_minutes[] = "minutes";
static char __pyx_k_netbusy[] = "netbusy";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_quality[] = "quality";
static char __pyx_k_readCnt[] = "readCnt";
static char __pyx_k_retries[] = "retries";
static char __pyx_k_sceneId[] = "sceneId";
static char __pyx_k_sceneid[] = "sceneid";
static char __pyx_k_sentCnt[] = "sentCnt";
static char __pyx_k_setback[] = "setback";
static char __pyx_k_valueId[] = "valueId";
static char __pyx_k_version[] = "version";
static char __pyx_k_ButtonOn[] = "ButtonOn";
static char __pyx_k_Button_2[] = "Button.";
static char __pyx_k_Complete[] = "Complete";
static char __pyx_k_Disabled[] = "Disabled";
static char __pyx_k_Internal[] = "Internal";
static char __pyx_k_NodeInfo[] = "NodeInfo";
static char __pyx_k_NotFound[] = "NotFound";
static char __pyx_k_Overflow[] = "Overflow";
static char __pyx_k_PyGenres[] = "PyGenres";
static char __pyx_k_Schedule[] = "Schedule";
static char __pyx_k_Sleeping[] = "Sleeping";
static char __pyx_k_Starting[] = "Starting";
static char __pyx_k_Versions[] = "Versions";
static char __pyx_k_buttonId[] = "buttonId";
static char __pyx_k_fullpath[] = "fullpath";
static char __pyx_k_groupIdx[] = "groupIdx";
static char __pyx_k_groupidx[] = "groupidx";
static char __pyx_k_instance[] = "instance";
static char __pyx_k_location[] = "location";
static char __pyx_k_new_node[] = "new node";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_readOnly[] = "readOnly";
static char __pyx_k_writeCnt[] = "writeCnt";
static char __pyx_k_AddDevice[] = "AddDevice";
static char __pyx_k_ButtonOff[] = "ButtonOff";
static char __pyx_k_Completed[] = "Completed";
static char __pyx_k_Instances[] = "Instances";
static char __pyx_k_IsPrimary[] = "IsPrimary";
static char __pyx_k_Neighbors[] = "Neighbors";
static char __pyx_k_NodeAdded[] = "NodeAdded";
static char __pyx_k_NodeEvent[] = "NodeEvent";
static char __pyx_k_NotBridge[] = "NotBridge";
static char __pyx_k_PYLIBRARY[] = "PYLIBRARY";
static char __pyx_k_badroutes[] = "badroutes";
static char __pyx_k_callbacks[] = "callbacks";
static char __pyx_k_className[] = "className";
static char __pyx_k_error_msg[] = "error_msg";
static char __pyx_k_getLogger[] = "getLogger";
static char __pyx_k_highPower[] = "highPower";
static char __pyx_k_intensity[] = "intensity";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_usr_local[] = "/usr/local";
static char __pyx_k_version_2[] = "__version__";
static char __pyx_k_ACKWaiting[] = "ACKWaiting";
static char __pyx_k_InProgress[] = "InProgress";
static char __pyx_k_No_command[] = "No command.";
static char __pyx_k_NodeFailed[] = "NodeFailed";
static char __pyx_k_NodeNaming[] = "NodeNaming";
static char __pyx_k_NotPrimary[] = "NotPrimary";
static char __pyx_k_SceneEvent[] = "SceneEvent";
static char __pyx_k_ValueAdded[] = "ValueAdded";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_addHandler[] = "addHandler";
static char __pyx_k_configPath[] = "configPath";
static char __pyx_k_node_added[] = "node added";
static char __pyx_k_node_event[] = "node event";
static char __pyx_k_pythonfunc[] = "pythonfunc";
static char __pyx_k_pythonpath[] = "pythonpath";
static char __pyx_k_readAborts[] = "readAborts";
static char __pyx_k_receivedTS[] = "receivedTS";
static char __pyx_k_routedbusy[] = "routedbusy";
static char __pyx_k_sentFailed[] = "sentFailed";
static char __pyx_k_DriverReady[] = "DriverReady";
static char __pyx_k_DriverReset[] = "DriverReset";
static char __pyx_k_EnumWithDoc[] = "EnumWithDoc";
static char __pyx_k_Enum_helper[] = "Enum helper";
static char __pyx_k_ImportError[] = "ImportError";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_MsgComplete[] = "MsgComplete";
static char __pyx_k_NoOperation[] = "NoOperation";
static char __pyx_k_NodeRemoved[] = "NodeRemoved";
static char __pyx_k_NullHandler[] = "NullHandler";
static char __pyx_k_PyLogLevels[] = "PyLogLevels";
static char __pyx_k_Text_string[] = "Text string";
static char __pyx_k_badChecksum[] = "badChecksum";
static char __pyx_k_node_naming[] = "node naming";
static char __pyx_k_nondelivery[] = "nondelivery";
static char __pyx_k_productName[] = "productName";
static char __pyx_k_receivedCnt[] = "receivedCnt";
static char __pyx_k_upNodeRoute[] = "upNodeRoute";
static char __pyx_k_value_added[] = "value added";
static char __pyx_k_Associations[] = "Associations";
static char __pyx_k_CreateButton[] = "CreateButton";
static char __pyx_k_DeleteButton[] = "DeleteButton";
static char __pyx_k_DriverFailed[] = "DriverFailed";
static char __pyx_k_NodeNotFound[] = "NodeNotFound";
static char __pyx_k_NotSecondary[] = "NotSecondary";
static char __pyx_k_Notification[] = "Notification";
static char __pyx_k_ProtocolInfo[] = "ProtocolInfo";
static char __pyx_k_PyStatDriver[] = "PyStatDriver";
static char __pyx_k_PyValueTypes[] = "PyValueTypes";
static char __pyx_k_RemoveDevice[] = "RemoveDevice";
static char __pyx_k_StreamDetail[] = "StreamDetail";
static char __pyx_k_ValueChanged[] = "ValueChanged";
static char __pyx_k_ValueRemoved[] = "ValueRemoved";
static char __pyx_k_classVersion[] = "classVersion";
static char __pyx_k_commandClass[] = "commandClass";
static char __pyx_k_driver_ready[] = "driver ready";
static char __pyx_k_driver_reset[] = "driver reset";
static char __pyx_k_libopenzwave[] = "libopenzwave";
static char __pyx_k_milliseconds[] = "milliseconds";
static char __pyx_k_node_removed[] = "node removed";
static char __pyx_k_receivedDups[] = "receivedDups";
static char __pyx_k_targetnodeid[] = "targetnodeid";
static char __pyx_k_CALLBACK_DESC[] = "CALLBACK_DESC";
static char __pyx_k_Configuration[] = "Configuration";
static char __pyx_k_DriverRemoved[] = "DriverRemoved";
static char __pyx_k_HasNodeFailed[] = "HasNodeFailed";
static char __pyx_k_Not_installed[] = "Not installed";
static char __pyx_k_pkg_resources[] = "pkg_resources";
static char __pyx_k_value_changed[] = "value changed";
static char __pyx_k_value_removed[] = "value removed";
static char __pyx_k_ButtonNotFound[] = "ButtonNotFound";
static char __pyx_k_PollingEnabled[] = "PollingEnabled";
static char __pyx_k_ValueRefreshed[] = "ValueRefreshed";
static char __pyx_k_commandClassId[] = "commandClassId";
static char __pyx_k_groups_changed[] = "groups changed";
static char __pyx_k_lastRequestRTT[] = "lastRequestRTT";
static char __pyx_k_AllNodesQueried[] = "AllNodesQueried";
static char __pyx_k_PollingDisabled[] = "PollingDisabled";
static char __pyx_k_PyNotifications[] = "PyNotifications";
static char __pyx_k_Raw_byte_values[] = "Raw byte values";
static char __pyx_k_ReplicationSend[] = "ReplicationSend";
static char __pyx_k_lastResponseRTT[] = "lastResponseRTT";
static char __pyx_k_polling_enabled[] = "polling enabled";
static char __pyx_k_CreateNewPrimary[] = "CreateNewPrimary.";
static char __pyx_k_NodeProtocolInfo[] = "NodeProtocolInfo";
static char __pyx_k_NullHandler_emit[] = "NullHandler.emit";
static char __pyx_k_RemoveFailedNode[] = "RemoveFailedNode.";
static char __pyx_k_broadcastReadCnt[] = "broadcastReadCnt";
static char __pyx_k_get_distribution[] = "get_distribution";
static char __pyx_k_manufacturerName[] = "manufacturerName";
static char __pyx_k_message_complete[] = "message complete";
static char __pyx_k_notificationCode[] = "notificationCode";
static char __pyx_k_notificationType[] = "notificationType";
static char __pyx_k_polling_disabled[] = "polling disabled";
static char __pyx_k_AssignReturnRoute[] = "AssignReturnRoute";
static char __pyx_k_AwakeNodesQueried[] = "AwakeNodesQueried";
static char __pyx_k_PyControllerError[] = "PyControllerError";
static char __pyx_k_PyControllerState[] = "PyControllerState";
static char __pyx_k_ReplaceFailedNode[] = "ReplaceFailedNode";
static char __pyx_k_all_nodes_queried[] = "all nodes queried";
static char __pyx_k_averageRequestRTT[] = "averageRequestRTT";
static char __pyx_k_broadcastWriteCnt[] = "broadcastWriteCnt";
static char __pyx_k_COMMAND_CLASS_DESC[] = "COMMAND_CLASS_DESC";
static char __pyx_k_COMMAND_CLASS_HAIL[] = "COMMAND_CLASS_HAIL";
static char __pyx_k_COMMAND_CLASS_KICK[] = "COMMAND_CLASS_KICK";
static char __pyx_k_COMMAND_CLASS_LOCK[] = "COMMAND_CLASS_LOCK";
static char __pyx_k_COMMAND_CLASS_MARK[] = "COMMAND_CLASS_MARK";
static char __pyx_k_COMMAND_CLASS_TIME[] = "COMMAND_CLASS_TIME";
static char __pyx_k_Completed_messages[] = "Completed messages.";
static char __pyx_k_CreateNewPrimary_2[] = "CreateNewPrimary";
static char __pyx_k_EnumWithDoc_setDoc[] = "EnumWithDoc.setDoc";
static char __pyx_k_RemoveFailedNode_2[] = "RemoveFailedNode";
static char __pyx_k_averageResponseRTT[] = "averageResponseRTT";
static char __pyx_k_node_protocol_info[] = "node protocol info";
static char __pyx_k_16_bit_signed_value[] = "16-bit signed value";
static char __pyx_k_32_bit_signed_value[] = "32-bit signed value";
static char __pyx_k_COMMAND_CLASS_ALARM[] = "COMMAND_CLASS_ALARM";
static char __pyx_k_COMMAND_CLASS_BASIC[] = "COMMAND_CLASS_BASIC";
static char __pyx_k_COMMAND_CLASS_CLOCK[] = "COMMAND_CLASS_CLOCK";
static char __pyx_k_COMMAND_CLASS_METER[] = "COMMAND_CLASS_METER";
static char __pyx_k_NodeQueriesComplete[] = "NodeQueriesComplete";
static char __pyx_k_OpenZWave_version_s[] = "OpenZWave version %s";
static char __pyx_k_PyControllerCommand[] = "PyControllerCommand";
static char __pyx_k_PyNotificationCodes[] = "PyNotificationCodes";
static char __pyx_k_SendNodeInformation[] = "SendNodeInformation";
static char __pyx_k_TransferPrimaryRole[] = "TransferPrimaryRole";
static char __pyx_k_awake_nodes_queried[] = "awake nodes queried";
static char __pyx_k_lastReceivedMessage[] = "lastReceivedMessage";
static char __pyx_k_receivedUnsolicited[] = "receivedUnsolicited";
static char __pyx_k_8_bit_unsigned_value[] = "8-bit unsigned value";
static char __pyx_k_DistributionNotFound[] = "DistributionNotFound";
static char __pyx_k_ReceiveConfiguration[] = "ReceiveConfiguration.";
static char __pyx_k_RequestNetworkUpdate[] = "RequestNetworkUpdate";
static char __pyx_k_Boolean_true_or_false[] = "Boolean, true or false";
static char __pyx_k_COMMAND_CLASS_BATTERY[] = "COMMAND_CLASS_BATTERY";
static char __pyx_k_COMMAND_CLASS_DISPLAY[] = "COMMAND_CLASS_DISPLAY";
static char __pyx_k_COMMAND_CLASS_VERSION[] = "COMMAND_CLASS_VERSION";
static char __pyx_k_COMMAND_CLASS_WAKE_UP[] = "COMMAND_CLASS_WAKE_UP";
static char __pyx_k_DeleteAllReturnRoutes[] = "DeleteAllReturnRoutes";
static char __pyx_k_Driver_failed_to_load[] = "Driver failed to load.";
static char __pyx_k_ManufacturerSpecific1[] = "ManufacturerSpecific1";
static char __pyx_k_ManufacturerSpecific2[] = "ManufacturerSpecific2";
static char __pyx_k_PyControllerInterface[] = "PyControllerInterface";
static char __pyx_k_bIntervalBetweenPolls[] = "bIntervalBetweenPolls";
static char __pyx_k_node_queries_complete[] = "node queries complete";
static char __pyx_k_COMMAND_CLASS_LANGUAGE[] = "COMMAND_CLASS_LANGUAGE";
static char __pyx_k_COMMAND_CLASS_SECURITY[] = "COMMAND_CLASS_SECURITY";
static char __pyx_k_No_command_in_progress[] = "No command in progress.";
static char __pyx_k_ReceiveConfiguration_2[] = "ReceiveConfiguration";
static char __pyx_k_The_command_has_failed[] = "The command has failed.";
static char __pyx_k_share_openzwave_config[] = "share/openzwave/config";
static char __pyx_k_AllNodesQueriedSomeDead[] = "AllNodesQueriedSomeDead";
static char __pyx_k_COMMAND_CLASS_COMPOSITE[] = "COMMAND_CLASS_COMPOSITE";
static char __pyx_k_COMMAND_CLASS_DOOR_LOCK[] = "COMMAND_CLASS_DOOR_LOCK";
static char __pyx_k_COMMAND_CLASS_INDICATOR[] = "COMMAND_CLASS_INDICATOR";
static char __pyx_k_COMMAND_CLASS_MULTI_CMD[] = "COMMAND_CLASS_MULTI_CMD";
static char __pyx_k_COMMAND_CLASS_SCREEN_MD[] = "COMMAND_CLASS_SCREEN_MD";
static char __pyx_k_COMMAND_CLASS_USER_CODE[] = "COMMAND_CLASS_USER_CODE";
static char __pyx_k_Number_of_bad_checksums[] = "Number of bad checksums";
static char __pyx_k_OZWAVE_CONFIG_DIRECTORY[] = "OZWAVE_CONFIG_DIRECTORY";
static char __pyx_k_The_command_is_starting[] = "The command is starting.";
static char __pyx_k_COMMAND_CLASS_POWERLEVEL[] = "COMMAND_CLASS_POWERLEVEL";
static char __pyx_k_COMMAND_CLASS_PROTECTION[] = "COMMAND_CLASS_PROTECTION";
static char __pyx_k_COMMAND_CLASS_SWITCH_ALL[] = "COMMAND_CLASS_SWITCH_ALL";
static char __pyx_k_COMMAND_CLASS_ZIP_CLIENT[] = "COMMAND_CLASS_ZIP_CLIENT";
static char __pyx_k_COMMAND_CLASS_ZIP_SERVER[] = "COMMAND_CLASS_ZIP_SERVER";
static char __pyx_k_COMMAND_CLASS_ASSOCIATION[] = "COMMAND_CLASS_ASSOCIATION";
static char __pyx_k_COMMAND_CLASS_CHIMNEY_FAN[] = "COMMAND_CLASS_CHIMNEY_FAN";
static char __pyx_k_COMMAND_CLASS_GARAGE_DOOR[] = "COMMAND_CLASS_GARAGE_DOOR";
static char __pyx_k_COMMAND_CLASS_METER_PULSE[] = "COMMAND_CLASS_METER_PULSE";
static char __pyx_k_COMMAND_CLASS_NODE_NAMING[] = "COMMAND_CLASS_NODE_NAMING";
static char __pyx_k_COMMAND_CLASS_PROPRIETARY[] = "COMMAND_CLASS_PROPRIETARY";
static char __pyx_k_Number_of_broadcasts_read[] = "Number of broadcasts read";
static char __pyx_k_Number_of_broadcasts_sent[] = "Number of broadcasts sent";
static char __pyx_k_RequestNodeNeighborUpdate[] = "RequestNodeNeighborUpdate";
static char __pyx_k_The_command_was_cancelled[] = "The command was cancelled.";
static char __pyx_k_call_to_AddWatcher_failed[] = "call to AddWatcher failed";
static char __pyx_k_COMMAND_CLASS_NETWORK_STAT[] = "COMMAND_CLASS_NETWORK_STAT";
static char __pyx_k_COMMAND_CLASS_NO_OPERATION[] = "COMMAND_CLASS_NO_OPERATION";
static char __pyx_k_COMMAND_CLASS_SENSOR_ALARM[] = "COMMAND_CLASS_SENSOR_ALARM";
static char __pyx_k_COMMAND_CLASS_ZIP_SERVICES[] = "COMMAND_CLASS_ZIP_SERVICES";
static char __pyx_k_PY_OZWAVE_CONFIG_DIRECTORY[] = "PY_OZWAVE_CONFIG_DIRECTORY";
static char __pyx_k_RequestNetworkUpdate_error[] = "RequestNetworkUpdate error.";
static char __pyx_k_python_openzwave_version_s[] = "python-openzwave version %s";
static char __pyx_k_COMMAND_CLASS_AV_TAGGING_MD[] = "COMMAND_CLASS_AV_TAGGING_MD";
static char __pyx_k_COMMAND_CLASS_CONFIGURATION[] = "COMMAND_CLASS_CONFIGURATION";
static char __pyx_k_COMMAND_CLASS_GROUPING_NAME[] = "COMMAND_CLASS_GROUPING_NAME";
static char __pyx_k_COMMAND_CLASS_SENSOR_BINARY[] = "COMMAND_CLASS_SENSOR_BINARY";
static char __pyx_k_COMMAND_CLASS_SILENCE_ALARM[] = "COMMAND_CLASS_SILENCE_ALARM";
static char __pyx_k_COMMAND_CLASS_SWITCH_BINARY[] = "COMMAND_CLASS_SWITCH_BINARY";
static char __pyx_k_The_Driver_is_being_removed[] = "The Driver is being removed.";
static char __pyx_k_COMMAND_CLASS_METER_TBL_PUSH[] = "COMMAND_CLASS_METER_TBL_PUSH";
static char __pyx_k_COMMAND_CLASS_ZIP_ADV_CLIENT[] = "COMMAND_CLASS_ZIP_ADV_CLIENT";
static char __pyx_k_COMMAND_CLASS_ZIP_ADV_SERVER[] = "COMMAND_CLASS_ZIP_ADV_SERVER";
static char __pyx_k_EssentialNodeQueriesComplete[] = "EssentialNodeQueriesComplete";
static char __pyx_k_Number_of_ACK_bytes_received[] = "Number of ACK bytes received";
static char __pyx_k_Number_of_CAN_bytes_received[] = "Number of CAN bytes received";
static char __pyx_k_Number_of_NAK_bytes_received[] = "Number of NAK bytes received";
static char __pyx_k_Number_of_SOF_bytes_received[] = "Number of SOF bytes received";
static char __pyx_k_call_to_RemoveWatcher_failed[] = "call to RemoveWatcher failed";
static char __pyx_k_A_manager_notification_report[] = "A manager notification report.";
static char __pyx_k_COMMAND_CLASS_THERMOSTAT_MODE[] = "COMMAND_CLASS_THERMOSTAT_MODE";
static char __pyx_k_COMMAND_CLASS_TIME_PARAMETERS[] = "COMMAND_CLASS_TIME_PARAMETERS";
static char __pyx_k_Report_when_a_node_is_revived[] = "Report when a node is revived.";
static char __pyx_k_Scene_Activation_Set_received[] = "Scene Activation Set received.";
static char __pyx_k_Send_a_node_information_frame[] = "Send a node information frame.";
static char __pyx_k_share_python_openzwave_config[] = "share/python-openzwave/config";
static char __pyx_k_COMMAND_CLASS_IP_CONFIGURATION[] = "COMMAND_CLASS_IP_CONFIGURATION";
static char __pyx_k_COMMAND_CLASS_METER_TBL_CONFIG[] = "COMMAND_CLASS_METER_TBL_CONFIG";
static char __pyx_k_COMMAND_CLASS_MULTI_CHANNEL_V2[] = "COMMAND_CLASS_MULTI_CHANNEL_V2";
static char __pyx_k_COMMAND_CLASS_SCENE_ACTIVATION[] = "COMMAND_CLASS_SCENE_ACTIVATION";
static char __pyx_k_COMMAND_CLASS_ZIP_ADV_SERVICES[] = "COMMAND_CLASS_ZIP_ADV_SERVICES";
static char __pyx_k_Number_of_bytes_out_of_framing[] = "Number of bytes out of framing";
static char __pyx_k_Number_of_unexpected_callbacks[] = "Number of unexpected callbacks";
static char __pyx_k_A_new_node_value_has_been_added[] = "A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented.";
static char __pyx_k_All_nodes_have_been_queried_but[] = "All nodes have been queried but some dead nodes found.";
static char __pyx_k_Basic_node_information_has_been[] = "Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description.";
static char __pyx_k_COMMAND_CLASS_AV_CONTENT_SEARCH[] = "COMMAND_CLASS_AV_CONTENT_SEARCH_MD";
static char __pyx_k_COMMAND_CLASS_DOOR_LOCK_LOGGING[] = "COMMAND_CLASS_DOOR_LOCK_LOGGING";
static char __pyx_k_COMMAND_CLASS_ENERGY_PRODUCTION[] = "COMMAND_CLASS_ENERGY_PRODUCTION";
static char __pyx_k_COMMAND_CLASS_METER_TBL_MONITOR[] = "COMMAND_CLASS_METER_TBL_MONITOR";
static char __pyx_k_COMMAND_CLASS_NON_INTEROPERABLE[] = "COMMAND_CLASS_NON_INTEROPERABLE";
static char __pyx_k_COMMAND_CLASS_SCREEN_ATTRIBUTES[] = "COMMAND_CLASS_SCREEN_ATTRIBUTES";
static char __pyx_k_COMMAND_CLASS_SENSOR_MULTILEVEL[] = "COMMAND_CLASS_SENSOR_MULTILEVEL";
static char __pyx_k_COMMAND_CLASS_SIMPLE_AV_CONTROL[] = "COMMAND_CLASS_SIMPLE_AV_CONTROL";
static char __pyx_k_COMMAND_CLASS_SWITCH_MULTILEVEL[] = "COMMAND_CLASS_SWITCH_MULTILEVEL";
static char __pyx_k_Controller_interface_use_serial[] = "Controller interface use serial protocol.";
static char __pyx_k_Delete_all_return_routes_from_a[] = "Delete all return routes from a device.";
static char __pyx_k_List_from_which_one_item_can_be[] = "List from which one item can be selected";
static char __pyx_k_Make_a_different_controller_the[] = "Make a different controller the primary.";
static char __pyx_k_Messages_that_timeout_will_send[] = "Messages that timeout will send a Notification with this code.";
static char __pyx_k_Move_a_node_to_the_controller_s[] = "Move a node to the controller's failed nodes list. This command will only work if the node cannot respond.";
static char __pyx_k_Number_of_messages_successfully[] = "Number of messages successfully read";
static char __pyx_k_The_controller_is_communicating[] = "The controller is communicating with the other device to carry out the command.";
static char __pyx_k_home_sebastien_devel_python_ope[] = "/home/sebastien/devel/python-openzwave/src-lib/libopenzwave/libopenzwave.pyx";
static char __pyx_k_module_libopenzwave_This_file_i[] = "\n.. module:: libopenzwave\n\nThis file is part of **python-openzwave** project https://github.com/bibi21000/python-openzwave.\n\n:platform: Unix, Windows, MacOS X\n:sinopsis: openzwave C++\n\n.. moduleauthor: bibi21000 aka S\303\251bastien GALLET <bibi21000@gmail.com>\n.. moduleauthor: Maarten Damen <m.damen@gmail.com>\n\nLicense : GPL(v3)\n\n**python-openzwave** is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\n**python-openzwave** is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\nYou should have received a copy of the GNU General Public License\nalong with python-openzwave. If not, see http://www.gnu.org/licenses.\n\n";
static char __pyx_k_A_driver_for_a_PC_Z_Wave_control[] = "A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods.";
static char __pyx_k_A_new_node_has_been_added_to_Ope[] = "A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself.";
static char __pyx_k_A_new_node_has_been_found_not_al[] = "A new node has been found (not already stored in zwcfg*.xml file).";
static char __pyx_k_A_node_has_been_removed_from_Ope[] = "A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing.";
static char __pyx_k_A_node_has_triggered_an_event_Th[] = "A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification.";
static char __pyx_k_A_node_value_has_been_removed_fr[] = "A node value has been removed from OpenZWave's set.  This only occurs when a node is removed.";
static char __pyx_k_A_node_value_has_been_updated_fr[] = "A node value has been updated from the Z-Wave network and it is different from the previous value.";
static char __pyx_k_A_write_only_value_that_is_the_e[] = "A write-only value that is the equivalent of pressing a button to send a command to a device";
static char __pyx_k_Add_a_new_controller_to_the_Z_Wa[] = "Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller.";
static char __pyx_k_Add_a_new_device_but_not_a_contr[] = "Add a new device (but not a controller) to the Z-Wave network.";
static char __pyx_k_All_awake_nodes_have_been_querie[] = "All awake nodes have been queried, so client application can expected complete data for these nodes.";
static char __pyx_k_All_nodes_and_values_for_this_dr[] = "All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications.";
static char __pyx_k_All_nodes_have_been_queried_so_c[] = "All nodes have been queried, so client application can expected complete data.";
static char __pyx_k_All_the_initialisation_queries_o[] = "All the initialisation queries on a node have been completed.";
static char __pyx_k_Assign_a_network_return_routes_t[] = "Assign a network return routes to a device.";
static char __pyx_k_Basic_values_an_ordinary_user_wo[] = "Basic values an ordinary user would be interested in.";
static char __pyx_k_COMMAND_CLASS_ACTUATOR_MULTILEVE[] = "COMMAND_CLASS_ACTUATOR_MULTILEVEL";
static char __pyx_k_COMMAND_CLASS_APPLICATION_STATUS[] = "COMMAND_CLASS_APPLICATION_STATUS";
static char __pyx_k_COMMAND_CLASS_ASSOCIATION_COMMAN[] = "COMMAND_CLASS_ASSOCIATION_COMMAND_CONFIGURATION";
static char __pyx_k_COMMAND_CLASS_AV_CONTENT_DIRECTO[] = "COMMAND_CLASS_AV_CONTENT_DIRECTORY_MD";
static char __pyx_k_COMMAND_CLASS_AV_RENDERER_STATUS[] = "COMMAND_CLASS_AV_RENDERER_STATUS";
static char __pyx_k_COMMAND_CLASS_BASIC_WINDOW_COVER[] = "COMMAND_CLASS_BASIC_WINDOW_COVERING";
static char __pyx_k_COMMAND_CLASS_CLIMATE_CONTROL_SC[] = "COMMAND_CLASS_CLIMATE_CONTROL_SCHEDULE";
static char __pyx_k_COMMAND_CLASS_CONTROLLER_REPLICA[] = "COMMAND_CLASS_CONTROLLER_REPLICATION";
static char __pyx_k_COMMAND_CLASS_FIRMWARE_UPDATE_MD[] = "COMMAND_CLASS_FIRMWARE_UPDATE_MD";
static char __pyx_k_COMMAND_CLASS_GEOGRAPHIC_LOCATIO[] = "COMMAND_CLASS_GEOGRAPHIC_LOCATION";
static char __pyx_k_COMMAND_CLASS_MANUFACTURER_PROPR[] = "COMMAND_CLASS_MANUFACTURER_PROPRIETARY";
static char __pyx_k_COMMAND_CLASS_MANUFACTURER_SPECI[] = "COMMAND_CLASS_MANUFACTURER_SPECIFIC";
static char __pyx_k_COMMAND_CLASS_MTP_WINDOW_COVERIN[] = "COMMAND_CLASS_MTP_WINDOW_COVERING";
static char __pyx_k_COMMAND_CLASS_MULTI_INSTANCE_ASS[] = "COMMAND_CLASS_MULTI_INSTANCE_ASSOCIATION";
static char __pyx_k_COMMAND_CLASS_REMOTE_ASSOCIATION[] = "COMMAND_CLASS_REMOTE_ASSOCIATION_ACTIVATE";
static char __pyx_k_COMMAND_CLASS_SCENE_ACTUATOR_CON[] = "COMMAND_CLASS_SCENE_ACTUATOR_CONF";
static char __pyx_k_COMMAND_CLASS_SCENE_CONTROLLER_C[] = "COMMAND_CLASS_SCENE_CONTROLLER_CONF";
static char __pyx_k_COMMAND_CLASS_SCHEDULE_ENTRY_LOC[] = "COMMAND_CLASS_SCHEDULE_ENTRY_LOCK";
static char __pyx_k_COMMAND_CLASS_SENSOR_CONFIGURATI[] = "COMMAND_CLASS_SENSOR_CONFIGURATION";
static char __pyx_k_COMMAND_CLASS_SWITCH_TOGGLE_BINA[] = "COMMAND_CLASS_SWITCH_TOGGLE_BINARY";
static char __pyx_k_COMMAND_CLASS_SWITCH_TOGGLE_MULT[] = "COMMAND_CLASS_SWITCH_TOGGLE_MULTILEVEL";
static char __pyx_k_COMMAND_CLASS_THERMOSTAT_FAN_MOD[] = "COMMAND_CLASS_THERMOSTAT_FAN_MODE";
static char __pyx_k_COMMAND_CLASS_THERMOSTAT_FAN_STA[] = "COMMAND_CLASS_THERMOSTAT_FAN_STATE";
static char __pyx_k_COMMAND_CLASS_THERMOSTAT_HEATING[] = "COMMAND_CLASS_THERMOSTAT_HEATING";
static char __pyx_k_COMMAND_CLASS_THERMOSTAT_OPERATI[] = "COMMAND_CLASS_THERMOSTAT_OPERATING_STATE";
static char __pyx_k_COMMAND_CLASS_THERMOSTAT_SETBACK[] = "COMMAND_CLASS_THERMOSTAT_SETBACK";
static char __pyx_k_COMMAND_CLASS_THERMOSTAT_SETPOIN[] = "COMMAND_CLASS_THERMOSTAT_SETPOINT";
static char __pyx_k_Check_whether_a_node_is_in_the_c[] = "Check whether a node is in the controller's failed nodes list.";
static char __pyx_k_Command_invocation_had_error_s_a[] = "Command invocation had error(s) and was aborted.";
static char __pyx_k_Complex_type_used_with_the_Clima[] = "Complex type used with the Climate Control Schedule command class";
static char __pyx_k_Controller_command_is_on_a_sleep[] = "Controller command is on a sleep queue wait for device.";
static char __pyx_k_Controller_interface_use_human_i[] = "Controller interface use human interface device protocol.";
static char __pyx_k_Controller_interface_use_unknown[] = "Controller interface use unknown protocol .";
static char __pyx_k_Controller_is_waiting_for_a_user[] = "Controller is waiting for a user action.";
static char __pyx_k_Create_an_id_that_tracks_handhel[] = "Create an id that tracks handheld button presses.";
static char __pyx_k_Delete_id_that_tracks_handheld_b[] = "Delete id that tracks handheld button presses.";
static char __pyx_k_Device_specific_configuration_pa[] = "Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead.";
static char __pyx_k_Get_a_node_to_rebuild_its_neighb[] = "Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors.";
static char __pyx_k_Handheld_controller_button_event[] = "Handheld controller button event created.";
static char __pyx_k_Handheld_controller_button_off_p[] = "Handheld controller button off pressed event.";
static char __pyx_k_Handheld_controller_button_on_pr[] = "Handheld controller button on pressed event.";
static char __pyx_k_Number_of_failed_messages_due_to[] = "Number of failed messages due to bad route response";
static char __pyx_k_Number_of_messages_dropped_not_d[] = "Number of messages dropped & not delivered";
static char __pyx_k_Number_of_messages_not_delivered[] = "Number of messages not delivered to network";
static char __pyx_k_Number_of_messages_received_with[] = "Number of messages received with routed busy status";
static char __pyx_k_Number_of_messages_retransmitted[] = "Number of messages retransmitted";
static char __pyx_k_Number_of_network_busy_failure_m[] = "Number of network busy/failure messages";
static char __pyx_k_Number_of_no_ACK_returned_errors[] = "Number of no ACK returned errors";
static char __pyx_k_Number_of_times_read_were_aborte[] = "Number of times read were aborted due to timeouts";
static char __pyx_k_Number_of_unsolicited_messages_w[] = "Number of unsolicited messages while waiting for an ACK";
static char __pyx_k_One_of_the_node_names_has_change[] = "One of the node names has changed (name, manufacturer, product).";
static char __pyx_k_Polling_of_a_node_has_been_succe[] = "Polling of a node has been successfully turned off by a call to Manager::DisablePoll.";
static char __pyx_k_Receive_Z_Wave_network_configura[] = "Receive Z-Wave network configuration information from another controller.";
static char __pyx_k_RemoveFailedNode_AddNodeToNetwor[] = "RemoveFailedNode, AddNodeToNetwork.";
static char __pyx_k_RemoveFailedNode_RequestNetworkU[] = "RemoveFailedNode, RequestNetworkUpdate.";
static char __pyx_k_Remove_a_new_device_but_not_a_co[] = "Remove a new device (but not a controller) from the Z-Wave network.";
static char __pyx_k_Replace_a_non_responding_node_wi[] = "Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed.";
static char __pyx_k_Report_on_NoOperation_message_se[] = "Report on NoOperation message sent completion.";
static char __pyx_k_Report_when_a_node_goes_to_sleep[] = "Report when a node goes to sleep.";
static char __pyx_k_Report_when_a_node_is_presumed_d[] = "Report when a node is presumed dead.";
static char __pyx_k_Report_when_a_sleeping_node_wake[] = "Report when a sleeping node wakes.";
static char __pyx_k_Represents_a_non_integer_value_a[] = "Represents a non-integer value as a string, to avoid floating point accuracy issues.";
static char __pyx_k_Request_network_information_from[] = "Request network information from the SUC/SIS.";
static char __pyx_k_Send_information_from_primary_to[] = "Send information from primary to secondary.";
static char __pyx_k_The_associations_for_the_node_ha[] = "The associations for the node have changed. The application should rebuild any group information it holds about the node.";
static char __pyx_k_The_command_has_completed_succes[] = "The command has completed successfully.";
static char __pyx_k_The_level_as_controlled_by_basic[] = "The 'level' as controlled by basic commands.  Usually duplicated by another command class.";
static char __pyx_k_The_queries_on_a_node_that_are_e[] = "The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages.";
static char __pyx_k_Used_only_with_ControllerCommand[] = "Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK.";
static char __pyx_k_Values_of_significance_only_to_u[] = "Values of significance only to users who understand the Z-Wave protocol";
static char __pyx_k_Number_of_messages_successfully_2[] = "Number of messages successfully sent";
static char __pyx_k_A_node_value_has_been_updated_fr_2[] = "A node value has been updated from the Z-Wave network.";
static char __pyx_k_COMMAND_CLASS_REMOTE_ASSOCIATION_2[] = "COMMAND_CLASS_REMOTE_ASSOCIATION";
static char __pyx_k_Handheld_controller_button_event_2[] = "Handheld controller button event deleted.";
static char __pyx_k_Polling_of_a_node_has_been_succe_2[] = "Polling of a node has been successfully turned on by a call to Manager::EnablePoll.";
static char __pyx_k_Used_only_with_ControllerCommand_2[] = "Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed.";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_s_16_bit_signed_value;
static PyObject *__pyx_kp_s_32_bit_signed_value;
static PyObject *__pyx_kp_s_8_bit_unsigned_value;
static PyObject *__pyx_n_s_ACKCnt;
static PyObject *__pyx_n_s_ACKWaiting;
static PyObject *__pyx_kp_s_A_driver_for_a_PC_Z_Wave_control;
static PyObject *__pyx_kp_s_A_manager_notification_report;
static PyObject *__pyx_kp_s_A_new_node_has_been_added_to_Ope;
static PyObject *__pyx_kp_s_A_new_node_has_been_found_not_al;
static PyObject *__pyx_kp_s_A_new_node_value_has_been_added;
static PyObject *__pyx_kp_s_A_node_has_been_removed_from_Ope;
static PyObject *__pyx_kp_s_A_node_has_triggered_an_event_Th;
static PyObject *__pyx_kp_s_A_node_value_has_been_removed_fr;
static PyObject *__pyx_kp_s_A_node_value_has_been_updated_fr;
static PyObject *__pyx_kp_s_A_node_value_has_been_updated_fr_2;
static PyObject *__pyx_kp_s_A_write_only_value_that_is_the_e;
static PyObject *__pyx_n_s_AddDevice;
static PyObject *__pyx_kp_s_Add_a_new_controller_to_the_Z_Wa;
static PyObject *__pyx_kp_s_Add_a_new_device_but_not_a_contr;
static PyObject *__pyx_n_s_Alert;
static PyObject *__pyx_n_s_Alive;
static PyObject *__pyx_n_s_AllNodesQueried;
static PyObject *__pyx_n_s_AllNodesQueriedSomeDead;
static PyObject *__pyx_kp_s_All_awake_nodes_have_been_querie;
static PyObject *__pyx_kp_s_All_nodes_and_values_for_this_dr;
static PyObject *__pyx_kp_s_All_nodes_have_been_queried_but;
static PyObject *__pyx_kp_s_All_nodes_have_been_queried_so_c;
static PyObject *__pyx_kp_s_All_the_initialisation_queries_o;
static PyObject *__pyx_n_s_Always;
static PyObject *__pyx_n_s_AssignReturnRoute;
static PyObject *__pyx_kp_s_Assign_a_network_return_routes_t;
static PyObject *__pyx_n_s_Associations;
static PyObject *__pyx_n_s_Awake;
static PyObject *__pyx_n_s_AwakeNodesQueried;
static PyObject *__pyx_n_s_Basic;
static PyObject *__pyx_kp_s_Basic_node_information_has_been;
static PyObject *__pyx_kp_s_Basic_values_an_ordinary_user_wo;
static PyObject *__pyx_n_s_Bool;
static PyObject *__pyx_kp_s_Boolean_true_or_false;
static PyObject *__pyx_n_s_Busy;
static PyObject *__pyx_n_s_Button;
static PyObject *__pyx_n_s_ButtonNotFound;
static PyObject *__pyx_n_s_ButtonOff;
static PyObject *__pyx_n_s_ButtonOn;
static PyObject *__pyx_kp_s_Button_2;
static PyObject *__pyx_n_s_Byte;
static PyObject *__pyx_n_s_CALLBACK_DESC;
static PyObject *__pyx_n_s_CANCnt;
static PyObject *__pyx_n_s_COMMAND_CLASS_ACTUATOR_MULTILEVE;
static PyObject *__pyx_n_s_COMMAND_CLASS_ALARM;
static PyObject *__pyx_n_s_COMMAND_CLASS_APPLICATION_STATUS;
static PyObject *__pyx_n_s_COMMAND_CLASS_ASSOCIATION;
static PyObject *__pyx_n_s_COMMAND_CLASS_ASSOCIATION_COMMAN;
static PyObject *__pyx_n_s_COMMAND_CLASS_AV_CONTENT_DIRECTO;
static PyObject *__pyx_n_s_COMMAND_CLASS_AV_CONTENT_SEARCH;
static PyObject *__pyx_n_s_COMMAND_CLASS_AV_RENDERER_STATUS;
static PyObject *__pyx_n_s_COMMAND_CLASS_AV_TAGGING_MD;
static PyObject *__pyx_n_s_COMMAND_CLASS_BASIC;
static PyObject *__pyx_n_s_COMMAND_CLASS_BASIC_WINDOW_COVER;
static PyObject *__pyx_n_s_COMMAND_CLASS_BATTERY;
static PyObject *__pyx_n_s_COMMAND_CLASS_CHIMNEY_FAN;
static PyObject *__pyx_n_s_COMMAND_CLASS_CLIMATE_CONTROL_SC;
static PyObject *__pyx_n_s_COMMAND_CLASS_CLOCK;
static PyObject *__pyx_n_s_COMMAND_CLASS_COMPOSITE;
static PyObject *__pyx_n_s_COMMAND_CLASS_CONFIGURATION;
static PyObject *__pyx_n_s_COMMAND_CLASS_CONTROLLER_REPLICA;
static PyObject *__pyx_n_s_COMMAND_CLASS_DESC;
static PyObject *__pyx_n_s_COMMAND_CLASS_DISPLAY;
static PyObject *__pyx_n_s_COMMAND_CLASS_DOOR_LOCK;
static PyObject *__pyx_n_s_COMMAND_CLASS_DOOR_LOCK_LOGGING;
static PyObject *__pyx_n_s_COMMAND_CLASS_ENERGY_PRODUCTION;
static PyObject *__pyx_n_s_COMMAND_CLASS_FIRMWARE_UPDATE_MD;
static PyObject *__pyx_n_s_COMMAND_CLASS_GARAGE_DOOR;
static PyObject *__pyx_n_s_COMMAND_CLASS_GEOGRAPHIC_LOCATIO;
static PyObject *__pyx_n_s_COMMAND_CLASS_GROUPING_NAME;
static PyObject *__pyx_n_s_COMMAND_CLASS_HAIL;
static PyObject *__pyx_n_s_COMMAND_CLASS_INDICATOR;
static PyObject *__pyx_n_s_COMMAND_CLASS_IP_CONFIGURATION;
static PyObject *__pyx_n_s_COMMAND_CLASS_KICK;
static PyObject *__pyx_n_s_COMMAND_CLASS_LANGUAGE;
static PyObject *__pyx_n_s_COMMAND_CLASS_LOCK;
static PyObject *__pyx_n_s_COMMAND_CLASS_MANUFACTURER_PROPR;
static PyObject *__pyx_n_s_COMMAND_CLASS_MANUFACTURER_SPECI;
static PyObject *__pyx_n_s_COMMAND_CLASS_MARK;
static PyObject *__pyx_n_s_COMMAND_CLASS_METER;
static PyObject *__pyx_n_s_COMMAND_CLASS_METER_PULSE;
static PyObject *__pyx_n_s_COMMAND_CLASS_METER_TBL_CONFIG;
static PyObject *__pyx_n_s_COMMAND_CLASS_METER_TBL_MONITOR;
static PyObject *__pyx_n_s_COMMAND_CLASS_METER_TBL_PUSH;
static PyObject *__pyx_n_s_COMMAND_CLASS_MTP_WINDOW_COVERIN;
static PyObject *__pyx_n_s_COMMAND_CLASS_MULTI_CHANNEL_V2;
static PyObject *__pyx_n_s_COMMAND_CLASS_MULTI_CMD;
static PyObject *__pyx_n_s_COMMAND_CLASS_MULTI_INSTANCE_ASS;
static PyObject *__pyx_n_s_COMMAND_CLASS_NETWORK_STAT;
static PyObject *__pyx_n_s_COMMAND_CLASS_NODE_NAMING;
static PyObject *__pyx_n_s_COMMAND_CLASS_NON_INTEROPERABLE;
static PyObject *__pyx_n_s_COMMAND_CLASS_NO_OPERATION;
static PyObject *__pyx_n_s_COMMAND_CLASS_POWERLEVEL;
static PyObject *__pyx_n_s_COMMAND_CLASS_PROPRIETARY;
static PyObject *__pyx_n_s_COMMAND_CLASS_PROTECTION;
static PyObject *__pyx_n_s_COMMAND_CLASS_REMOTE_ASSOCIATION;
static PyObject *__pyx_n_s_COMMAND_CLASS_REMOTE_ASSOCIATION_2;
static PyObject *__pyx_n_s_COMMAND_CLASS_SCENE_ACTIVATION;
static PyObject *__pyx_n_s_COMMAND_CLASS_SCENE_ACTUATOR_CON;
static PyObject *__pyx_n_s_COMMAND_CLASS_SCENE_CONTROLLER_C;
static PyObject *__pyx_n_s_COMMAND_CLASS_SCHEDULE_ENTRY_LOC;
static PyObject *__pyx_n_s_COMMAND_CLASS_SCREEN_ATTRIBUTES;
static PyObject *__pyx_n_s_COMMAND_CLASS_SCREEN_MD;
static PyObject *__pyx_n_s_COMMAND_CLASS_SECURITY;
static PyObject *__pyx_n_s_COMMAND_CLASS_SENSOR_ALARM;
static PyObject *__pyx_n_s_COMMAND_CLASS_SENSOR_BINARY;
static PyObject *__pyx_n_s_COMMAND_CLASS_SENSOR_CONFIGURATI;
static PyObject *__pyx_n_s_COMMAND_CLASS_SENSOR_MULTILEVEL;
static PyObject *__pyx_n_s_COMMAND_CLASS_SILENCE_ALARM;
static PyObject *__pyx_n_s_COMMAND_CLASS_SIMPLE_AV_CONTROL;
static PyObject *__pyx_n_s_COMMAND_CLASS_SWITCH_ALL;
static PyObject *__pyx_n_s_COMMAND_CLASS_SWITCH_BINARY;
static PyObject *__pyx_n_s_COMMAND_CLASS_SWITCH_MULTILEVEL;
static PyObject *__pyx_n_s_COMMAND_CLASS_SWITCH_TOGGLE_BINA;
static PyObject *__pyx_n_s_COMMAND_CLASS_SWITCH_TOGGLE_MULT;
static PyObject *__pyx_n_s_COMMAND_CLASS_THERMOSTAT_FAN_MOD;
static PyObject *__pyx_n_s_COMMAND_CLASS_THERMOSTAT_FAN_STA;
static PyObject *__pyx_n_s_COMMAND_CLASS_THERMOSTAT_HEATING;
static PyObject *__pyx_n_s_COMMAND_CLASS_THERMOSTAT_MODE;
static PyObject *__pyx_n_s_COMMAND_CLASS_THERMOSTAT_OPERATI;
static PyObject *__pyx_n_s_COMMAND_CLASS_THERMOSTAT_SETBACK;
static PyObject *__pyx_n_s_COMMAND_CLASS_THERMOSTAT_SETPOIN;
static PyObject *__pyx_n_s_COMMAND_CLASS_TIME;
static PyObject *__pyx_n_s_COMMAND_CLASS_TIME_PARAMETERS;
static PyObject *__pyx_n_s_COMMAND_CLASS_USER_CODE;
static PyObject *__pyx_n_s_COMMAND_CLASS_VERSION;
static PyObject *__pyx_n_s_COMMAND_CLASS_WAKE_UP;
static PyObject *__pyx_n_s_COMMAND_CLASS_ZIP_ADV_CLIENT;
static PyObject *__pyx_n_s_COMMAND_CLASS_ZIP_ADV_SERVER;
static PyObject *__pyx_n_s_COMMAND_CLASS_ZIP_ADV_SERVICES;
static PyObject *__pyx_n_s_COMMAND_CLASS_ZIP_CLIENT;
static PyObject *__pyx_n_s_COMMAND_CLASS_ZIP_SERVER;
static PyObject *__pyx_n_s_COMMAND_CLASS_ZIP_SERVICES;
static PyObject *__pyx_n_s_Cancel;
static PyObject *__pyx_kp_s_Check_whether_a_node_is_in_the_c;
static PyObject *__pyx_kp_s_Command_invocation_had_error_s_a;
static PyObject *__pyx_n_s_Complete;
static PyObject *__pyx_n_s_Completed;
static PyObject *__pyx_kp_s_Completed_messages;
static PyObject *__pyx_kp_s_Complex_type_used_with_the_Clima;
static PyObject *__pyx_n_s_Config;
static PyObject *__pyx_n_s_Configuration;
static PyObject *__pyx_kp_s_Controller_command_is_on_a_sleep;
static PyObject *__pyx_kp_s_Controller_interface_use_human_i;
static PyObject *__pyx_kp_s_Controller_interface_use_serial;
static PyObject *__pyx_kp_s_Controller_interface_use_unknown;
static PyObject *__pyx_kp_s_Controller_is_waiting_for_a_user;
static PyObject *__pyx_n_s_CreateButton;
static PyObject *__pyx_kp_s_CreateNewPrimary;
static PyObject *__pyx_n_s_CreateNewPrimary_2;
static PyObject *__pyx_kp_s_Create_an_id_that_tracks_handhel;
static PyObject *__pyx_n_s_Dead;
static PyObject *__pyx_n_s_Debug;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_n_s_DeleteAllReturnRoutes;
static PyObject *__pyx_n_s_DeleteButton;
static PyObject *__pyx_kp_s_Delete_all_return_routes_from_a;
static PyObject *__pyx_kp_s_Delete_id_that_tracks_handheld_b;
static PyObject *__pyx_n_s_Detail;
static PyObject *__pyx_kp_s_Device_specific_configuration_pa;
static PyObject *__pyx_n_s_Disabled;
static PyObject *__pyx_n_s_DistributionNotFound;
static PyObject *__pyx_n_s_DriverFailed;
static PyObject *__pyx_n_s_DriverReady;
static PyObject *__pyx_n_s_DriverRemoved;
static PyObject *__pyx_n_s_DriverReset;
static PyObject *__pyx_kp_s_Driver_failed_to_load;
static PyObject *__pyx_n_s_Dynamic;
static PyObject *__pyx_n_s_EnumWithDoc;
static PyObject *__pyx_n_s_EnumWithDoc_setDoc;
static PyObject *__pyx_kp_s_Enum_helper;
static PyObject *__pyx_n_s_Error;
static PyObject *__pyx_n_s_EssentialNodeQueriesComplete;
static PyObject *__pyx_n_s_Failed;
static PyObject *__pyx_n_s_Fatal;
static PyObject *__pyx_kp_s_Get_a_node_to_rebuild_its_neighb;
static PyObject *__pyx_n_s_Group;
static PyObject *__pyx_kp_s_Handheld_controller_button_event;
static PyObject *__pyx_kp_s_Handheld_controller_button_event_2;
static PyObject *__pyx_kp_s_Handheld_controller_button_off_p;
static PyObject *__pyx_kp_s_Handheld_controller_button_on_pr;
static PyObject *__pyx_n_s_Handler;
static PyObject *__pyx_n_s_HasNodeFailed;
static PyObject *__pyx_n_s_Hid;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_InProgress;
static PyObject *__pyx_n_s_Info;
static PyObject *__pyx_n_s_Instances;
static PyObject *__pyx_n_s_Int;
static PyObject *__pyx_n_s_Internal;
static PyObject *__pyx_n_s_IsPrimary;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_kp_s_List_from_which_one_item_can_be;
static PyObject *__pyx_kp_s_Make_a_different_controller_the;
static PyObject *__pyx_n_s_ManufacturerSpecific1;
static PyObject *__pyx_n_s_ManufacturerSpecific2;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_Messages_that_timeout_will_send;
static PyObject *__pyx_kp_s_Move_a_node_to_the_controller_s;
static PyObject *__pyx_n_s_MsgComplete;
static PyObject *__pyx_n_s_NAKCnt;
static PyObject *__pyx_n_s_Neighbors;
static PyObject *__pyx_n_s_NoOperation;
static PyObject *__pyx_kp_s_No_command;
static PyObject *__pyx_kp_s_No_command_in_progress;
static PyObject *__pyx_n_s_NodeAdded;
static PyObject *__pyx_n_s_NodeEvent;
static PyObject *__pyx_n_s_NodeFailed;
static PyObject *__pyx_n_s_NodeInfo;
static PyObject *__pyx_n_s_NodeNaming;
static PyObject *__pyx_n_s_NodeNew;
static PyObject *__pyx_n_s_NodeNotFound;
static PyObject *__pyx_n_s_NodeOK;
static PyObject *__pyx_n_s_NodeProtocolInfo;
static PyObject *__pyx_n_s_NodeQueriesComplete;
static PyObject *__pyx_n_s_NodeRemoved;
static PyObject *__pyx_n_s_None;
static PyObject *__pyx_kp_s_None_2;
static PyObject *__pyx_n_s_Normal;
static PyObject *__pyx_n_s_NotBridge;
static PyObject *__pyx_n_s_NotFound;
static PyObject *__pyx_n_s_NotPrimary;
static PyObject *__pyx_n_s_NotSUC;
static PyObject *__pyx_n_s_NotSecondary;
static PyObject *__pyx_kp_s_Not_installed;
static PyObject *__pyx_n_s_Notification;
static PyObject *__pyx_n_s_NullHandler;
static PyObject *__pyx_n_s_NullHandler_emit;
static PyObject *__pyx_kp_s_Number_of_ACK_bytes_received;
static PyObject *__pyx_kp_s_Number_of_CAN_bytes_received;
static PyObject *__pyx_kp_s_Number_of_NAK_bytes_received;
static PyObject *__pyx_kp_s_Number_of_SOF_bytes_received;
static PyObject *__pyx_kp_s_Number_of_bad_checksums;
static PyObject *__pyx_kp_s_Number_of_broadcasts_read;
static PyObject *__pyx_kp_s_Number_of_broadcasts_sent;
static PyObject *__pyx_kp_s_Number_of_bytes_out_of_framing;
static PyObject *__pyx_kp_s_Number_of_failed_messages_due_to;
static PyObject *__pyx_kp_s_Number_of_messages_dropped_not_d;
static PyObject *__pyx_kp_s_Number_of_messages_not_delivered;
static PyObject *__pyx_kp_s_Number_of_messages_received_with;
static PyObject *__pyx_kp_s_Number_of_messages_retransmitted;
static PyObject *__pyx_kp_s_Number_of_messages_successfully;
static PyObject *__pyx_kp_s_Number_of_messages_successfully_2;
static PyObject *__pyx_kp_s_Number_of_network_busy_failure_m;
static PyObject *__pyx_kp_s_Number_of_no_ACK_returned_errors;
static PyObject *__pyx_kp_s_Number_of_times_read_were_aborte;
static PyObject *__pyx_kp_s_Number_of_unexpected_callbacks;
static PyObject *__pyx_kp_s_Number_of_unsolicited_messages_w;
static PyObject *__pyx_n_s_OOFCnt;
static PyObject *__pyx_n_s_OZWAVE_CONFIG_DIRECTORY;
static PyObject *__pyx_kp_s_One_of_the_node_names_has_change;
static PyObject *__pyx_kp_s_OpenZWave_version_s;
static PyObject *__pyx_n_s_Overflow;
static PyObject *__pyx_n_s_PYLIBRARY;
static PyObject *__pyx_n_s_PY_OZWAVE_CONFIG_DIRECTORY;
static PyObject *__pyx_n_s_PollingDisabled;
static PyObject *__pyx_n_s_PollingEnabled;
static PyObject *__pyx_kp_s_Polling_of_a_node_has_been_succe;
static PyObject *__pyx_kp_s_Polling_of_a_node_has_been_succe_2;
static PyObject *__pyx_n_s_Probe;
static PyObject *__pyx_n_s_Probe1;
static PyObject *__pyx_n_s_ProtocolInfo;
static PyObject *__pyx_n_s_PyControllerCommand;
static PyObject *__pyx_n_s_PyControllerError;
static PyObject *__pyx_n_s_PyControllerInterface;
static PyObject *__pyx_n_s_PyControllerState;
static PyObject *__pyx_n_s_PyGenres;
static PyObject *__pyx_n_s_PyLogLevels;
static PyObject *__pyx_n_s_PyNotificationCodes;
static PyObject *__pyx_n_s_PyNotifications;
static PyObject *__pyx_n_s_PyStatDriver;
static PyObject *__pyx_n_s_PyValueTypes;
static PyObject *__pyx_n_s_Raw;
static PyObject *__pyx_kp_s_Raw_byte_values;
static PyObject *__pyx_kp_s_ReceiveConfiguration;
static PyObject *__pyx_n_s_ReceiveConfiguration_2;
static PyObject *__pyx_kp_s_Receive_Z_Wave_network_configura;
static PyObject *__pyx_n_s_RemoveDevice;
static PyObject *__pyx_kp_s_RemoveFailedNode;
static PyObject *__pyx_n_s_RemoveFailedNode_2;
static PyObject *__pyx_kp_s_RemoveFailedNode_AddNodeToNetwor;
static PyObject *__pyx_kp_s_RemoveFailedNode_RequestNetworkU;
static PyObject *__pyx_kp_s_Remove_a_new_device_but_not_a_co;
static PyObject *__pyx_n_s_ReplaceFailedNode;
static PyObject *__pyx_kp_s_Replace_a_non_responding_node_wi;
static PyObject *__pyx_n_s_ReplicationSend;
static PyObject *__pyx_kp_s_Report_on_NoOperation_message_se;
static PyObject *__pyx_kp_s_Report_when_a_node_goes_to_sleep;
static PyObject *__pyx_kp_s_Report_when_a_node_is_presumed_d;
static PyObject *__pyx_kp_s_Report_when_a_node_is_revived;
static PyObject *__pyx_kp_s_Report_when_a_sleeping_node_wake;
static PyObject *__pyx_kp_s_Represents_a_non_integer_value_a;
static PyObject *__pyx_n_s_RequestNetworkUpdate;
static PyObject *__pyx_kp_s_RequestNetworkUpdate_error;
static PyObject *__pyx_n_s_RequestNodeNeighborUpdate;
static PyObject *__pyx_kp_s_Request_network_information_from;
static PyObject *__pyx_n_s_SOFCnt;
static PyObject *__pyx_n_s_SceneEvent;
static PyObject *__pyx_kp_s_Scene_Activation_Set_received;
static PyObject *__pyx_n_s_Schedule;
static PyObject *__pyx_n_s_SendNodeInformation;
static PyObject *__pyx_kp_s_Send_a_node_information_frame;
static PyObject *__pyx_kp_s_Send_information_from_primary_to;
static PyObject *__pyx_n_s_Serial;
static PyObject *__pyx_n_s_Session;
static PyObject *__pyx_n_s_Short;
static PyObject *__pyx_n_s_Sleep;
static PyObject *__pyx_n_s_Sleeping;
static PyObject *__pyx_n_s_Starting;
static PyObject *__pyx_n_s_Static;
static PyObject *__pyx_n_s_StreamDetail;
static PyObject *__pyx_n_s_String;
static PyObject *__pyx_n_s_System;
static PyObject *__pyx_kp_s_Text_string;
static PyObject *__pyx_kp_s_The_Driver_is_being_removed;
static PyObject *__pyx_kp_s_The_associations_for_the_node_ha;
static PyObject *__pyx_kp_s_The_command_has_completed_succes;
static PyObject *__pyx_kp_s_The_command_has_failed;
static PyObject *__pyx_kp_s_The_command_is_starting;
static PyObject *__pyx_kp_s_The_command_was_cancelled;
static PyObject *__pyx_kp_s_The_controller_is_communicating;
static PyObject *__pyx_kp_s_The_level_as_controlled_by_basic;
static PyObject *__pyx_kp_s_The_queries_on_a_node_that_are_e;
static PyObject *__pyx_n_s_Timeout;
static PyObject *__pyx_n_s_TransferPrimaryRole;
static PyObject *__pyx_n_s_Unknown;
static PyObject *__pyx_kp_s_Used_only_with_ControllerCommand;
static PyObject *__pyx_kp_s_Used_only_with_ControllerCommand_2;
static PyObject *__pyx_n_s_User;
static PyObject *__pyx_n_s_ValueAdded;
static PyObject *__pyx_n_s_ValueChanged;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_ValueRefreshed;
static PyObject *__pyx_n_s_ValueRemoved;
static PyObject *__pyx_kp_s_Values_of_significance_only_to_u;
static PyObject *__pyx_n_s_Versions;
static PyObject *__pyx_n_s_Waiting;
static PyObject *__pyx_n_s_WakeUp;
static PyObject *__pyx_n_s_Warning;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_addHandler;
static PyObject *__pyx_n_s_afile;
static PyObject *__pyx_kp_s_all_nodes_queried;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_averageRequestRTT;
static PyObject *__pyx_n_s_averageResponseRTT;
static PyObject *__pyx_kp_s_awake_nodes_queried;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_bIntervalBetweenPolls;
static PyObject *__pyx_n_s_badChecksum;
static PyObject *__pyx_n_s_badroutes;
static PyObject *__pyx_n_s_broadcastReadCnt;
static PyObject *__pyx_n_s_broadcastWriteCnt;
static PyObject *__pyx_n_s_buttonId;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_kp_s_call_to_AddWatcher_failed;
static PyObject *__pyx_kp_s_call_to_RemoveWatcher_failed;
static PyObject *__pyx_n_s_callbacks;
static PyObject *__pyx_n_s_ccData;
static PyObject *__pyx_n_s_chr;
static PyObject *__pyx_n_s_className;
static PyObject *__pyx_n_s_classVersion;
static PyObject *__pyx_n_s_command;
static PyObject *__pyx_n_s_commandClass;
static PyObject *__pyx_n_s_commandClassId;
static PyObject *__pyx_n_s_configPath;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_kp_s_d_d_d;
static PyObject *__pyx_n_s_dist;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_doc_2;
static PyObject *__pyx_kp_s_driver_ready;
static PyObject *__pyx_kp_s_driver_reset;
static PyObject *__pyx_n_s_dropped;
static PyObject *__pyx_n_s_emit;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_error_msg;
static PyObject *__pyx_n_s_event;
static PyObject *__pyx_n_s_exists;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_fullpath;
static PyObject *__pyx_n_s_genre;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_distribution;
static PyObject *__pyx_n_s_groupIdx;
static PyObject *__pyx_n_s_groupidx;
static PyObject *__pyx_kp_s_groups_changed;
static PyObject *__pyx_n_s_help;
static PyObject *__pyx_n_s_highPower;
static PyObject *__pyx_n_s_homeId;
static PyObject *__pyx_kp_s_home_sebastien_devel_python_ope;
static PyObject *__pyx_n_s_homeid;
static PyObject *__pyx_n_s_hours;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_instance;
static PyObject *__pyx_n_s_intensity;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_lastReceivedMessage;
static PyObject *__pyx_n_s_lastRequestRTT;
static PyObject *__pyx_n_s_lastResponseRTT;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_s_libopenzwave;
static PyObject *__pyx_n_s_listdir;
static PyObject *__pyx_n_s_location;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_manufacturerName;
static PyObject *__pyx_n_s_message;
static PyObject *__pyx_kp_s_message_complete;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_milliseconds;
static PyObject *__pyx_n_s_minutes;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_netbusy;
static PyObject *__pyx_kp_s_new_node;
static PyObject *__pyx_n_s_noack;
static PyObject *__pyx_n_s_nodeId;
static PyObject *__pyx_kp_s_node_added;
static PyObject *__pyx_kp_s_node_event;
static PyObject *__pyx_kp_s_node_naming;
static PyObject *__pyx_kp_s_node_protocol_info;
static PyObject *__pyx_kp_s_node_queries_complete;
static PyObject *__pyx_kp_s_node_removed;
static PyObject *__pyx_n_s_nodeid;
static PyObject *__pyx_n_s_nondelivery;
static PyObject *__pyx_n_s_notificationCode;
static PyObject *__pyx_n_s_notificationType;
static PyObject *__pyx_n_s_ord;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_param;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pkg_resources;
static PyObject *__pyx_kp_s_polling_disabled;
static PyObject *__pyx_kp_s_polling_enabled;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_productName;
static PyObject *__pyx_kp_s_python_openzwave_version_s;
static PyObject *__pyx_n_s_pythonfunc;
static PyObject *__pyx_n_s_pythonpath;
static PyObject *__pyx_n_s_quality;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_readAborts;
static PyObject *__pyx_n_s_readCnt;
static PyObject *__pyx_n_s_readOnly;
static PyObject *__pyx_n_s_receivedCnt;
static PyObject *__pyx_n_s_receivedDups;
static PyObject *__pyx_n_s_receivedTS;
static PyObject *__pyx_n_s_receivedUnsolicited;
static PyObject *__pyx_n_s_record;
static PyObject *__pyx_n_s_retries;
static PyObject *__pyx_n_s_routedbusy;
static PyObject *__pyx_n_s_sceneId;
static PyObject *__pyx_n_s_sceneid;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_sentCnt;
static PyObject *__pyx_n_s_sentFailed;
static PyObject *__pyx_n_s_sentTS;
static PyObject *__pyx_n_s_setDoc;
static PyObject *__pyx_n_s_setback;
static PyObject *__pyx_kp_s_share_openzwave_config;
static PyObject *__pyx_kp_s_share_python_openzwave_config;
static PyObject *__pyx_n_s_siz;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_targetnodeid;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_unit;
static PyObject *__pyx_n_s_units;
static PyObject *__pyx_n_s_upNodeRoute;
static PyObject *__pyx_kp_s_usr;
static PyObject *__pyx_kp_s_usr_local;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_valueId;
static PyObject *__pyx_kp_s_value_added;
static PyObject *__pyx_kp_s_value_changed;
static PyObject *__pyx_kp_s_value_removed;
static PyObject *__pyx_n_s_verify;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_version_2;
static PyObject *__pyx_n_s_writeCnt;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_9;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_11;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_13;
static PyObject *__pyx_int_14;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_33;
static PyObject *__pyx_int_34;
static PyObject *__pyx_int_35;
static PyObject *__pyx_int_36;
static PyObject *__pyx_int_37;
static PyObject *__pyx_int_38;
static PyObject *__pyx_int_39;
static PyObject *__pyx_int_40;
static PyObject *__pyx_int_41;
static PyObject *__pyx_int_42;
static PyObject *__pyx_int_43;
static PyObject *__pyx_int_44;
static PyObject *__pyx_int_45;
static PyObject *__pyx_int_46;
static PyObject *__pyx_int_47;
static PyObject *__pyx_int_48;
static PyObject *__pyx_int_49;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_51;
static PyObject *__pyx_int_52;
static PyObject *__pyx_int_53;
static PyObject *__pyx_int_56;
static PyObject *__pyx_int_60;
static PyObject *__pyx_int_61;
static PyObject *__pyx_int_62;
static PyObject *__pyx_int_64;
static PyObject *__pyx_int_66;
static PyObject *__pyx_int_67;
static PyObject *__pyx_int_68;
static PyObject *__pyx_int_69;
static PyObject *__pyx_int_70;
static PyObject *__pyx_int_71;
static PyObject *__pyx_int_76;
static PyObject *__pyx_int_78;
static PyObject *__pyx_int_80;
static PyObject *__pyx_int_81;
static PyObject *__pyx_int_96;
static PyObject *__pyx_int_97;
static PyObject *__pyx_int_98;
static PyObject *__pyx_int_99;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_112;
static PyObject *__pyx_int_113;
static PyObject *__pyx_int_114;
static PyObject *__pyx_int_115;
static PyObject *__pyx_int_117;
static PyObject *__pyx_int_118;
static PyObject *__pyx_int_119;
static PyObject *__pyx_int_120;
static PyObject *__pyx_int_121;
static PyObject *__pyx_int_122;
static PyObject *__pyx_int_123;
static PyObject *__pyx_int_124;
static PyObject *__pyx_int_125;
static PyObject *__pyx_int_128;
static PyObject *__pyx_int_129;
static PyObject *__pyx_int_130;
static PyObject *__pyx_int_131;
static PyObject *__pyx_int_132;
static PyObject *__pyx_int_133;
static PyObject *__pyx_int_134;
static PyObject *__pyx_int_135;
static PyObject *__pyx_int_136;
static PyObject *__pyx_int_137;
static PyObject *__pyx_int_138;
static PyObject *__pyx_int_139;
static PyObject *__pyx_int_140;
static PyObject *__pyx_int_141;
static PyObject *__pyx_int_142;
static PyObject *__pyx_int_143;
static PyObject *__pyx_int_144;
static PyObject *__pyx_int_145;
static PyObject *__pyx_int_146;
static PyObject *__pyx_int_147;
static PyObject *__pyx_int_148;
static PyObject *__pyx_int_149;
static PyObject *__pyx_int_150;
static PyObject *__pyx_int_151;
static PyObject *__pyx_int_152;
static PyObject *__pyx_int_153;
static PyObject *__pyx_int_154;
static PyObject *__pyx_int_155;
static PyObject *__pyx_int_156;
static PyObject *__pyx_int_157;
static PyObject *__pyx_int_158;
static PyObject *__pyx_int_239;
static PyObject *__pyx_int_240;
static PyObject *__pyx_int_255;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__9;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__168;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__170;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__177;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__179;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__181;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__183;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__185;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__187;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__192;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_tuple__194;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__196;
static PyObject *__pyx_tuple__198;
static PyObject *__pyx_codeobj__197;

/* "libopenzwave.pyx":64
 * except ImportError:
 *     class NullHandler(logging.Handler):
 *         def emit(self, record):             # <<<<<<<<<<<<<<
 *             pass
 * logging.getLogger('libopenzwave').addHandler(NullHandler())
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_11NullHandler_1emit(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_12libopenzwave_11NullHandler_1emit = {__Pyx_NAMESTR("emit"), (PyCFunction)__pyx_pw_12libopenzwave_11NullHandler_1emit, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_12libopenzwave_11NullHandler_1emit(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  CYTHON_UNUSED PyObject *__pyx_v_record = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("emit (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_record,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_record)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("emit", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "emit") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_record = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("emit", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.NullHandler.emit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_11NullHandler_emit(__pyx_self, __pyx_v_self, __pyx_v_record);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_11NullHandler_emit(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_record) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("emit", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":82
 * class EnumWithDoc(str):
 *     """Enum helper"""
 *     def setDoc(self, doc):             # <<<<<<<<<<<<<<
 *         self.doc = doc
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_11EnumWithDoc_1setDoc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_12libopenzwave_11EnumWithDoc_1setDoc = {__Pyx_NAMESTR("setDoc"), (PyCFunction)__pyx_pw_12libopenzwave_11EnumWithDoc_1setDoc, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_12libopenzwave_11EnumWithDoc_1setDoc(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_doc = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setDoc (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_doc,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_doc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setDoc", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setDoc") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_doc = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setDoc", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.EnumWithDoc.setDoc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_11EnumWithDoc_setDoc(__pyx_self, __pyx_v_self, __pyx_v_doc);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_11EnumWithDoc_setDoc(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_doc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setDoc", 0);

  /* "libopenzwave.pyx":83
 *     """Enum helper"""
 *     def setDoc(self, doc):
 *         self.doc = doc             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_doc, __pyx_v_doc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":84
 *     def setDoc(self, doc):
 *         self.doc = doc
 *         return self             # <<<<<<<<<<<<<<
 * 
 * PyNotifications = [
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "libopenzwave.pyx":82
 * class EnumWithDoc(str):
 *     """Enum helper"""
 *     def setDoc(self, doc):             # <<<<<<<<<<<<<<
 *         self.doc = doc
 *         return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.EnumWithDoc.setDoc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":242
 * cdef map[uint64_t, ValueID] values_map
 * 
 * cdef getValueFromType(Manager *manager, valueId) except+ MemoryError:             # <<<<<<<<<<<<<<
 *     """
 *     Translate a value in the right type
 */

static PyObject *__pyx_f_12libopenzwave_getValueFromType(OpenZWave::Manager *__pyx_v_manager, PyObject *__pyx_v_valueId) {
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  uint8_t __pyx_v_type_byte;
  int32_t __pyx_v_type_int;
  int16_t __pyx_v_type_short;
  std::string __pyx_v_type_string;
  uint8_t *__pyx_v_vectraw;
  uint8_t __pyx_v_size;
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_datatype = NULL;
  bool __pyx_v_cret;
  long __pyx_v_x;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  uint8_t __pyx_t_6;
  long __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueFromType", 0);

  /* "libopenzwave.pyx":253
 *     cdef string type_string
 *     cdef vector[string] vect
 *     cdef uint8_t* vectraw = NULL             # <<<<<<<<<<<<<<
 *     cdef uint8_t size
 *     cdef string s
 */
  __pyx_v_vectraw = NULL;

  /* "libopenzwave.pyx":256
 *     cdef uint8_t size
 *     cdef string s
 *     c = ""             # <<<<<<<<<<<<<<
 *     ret = None
 *     if values_map.find(valueId) != values_map.end():
 */
  __Pyx_INCREF(__pyx_kp_s_);
  __pyx_v_c = __pyx_kp_s_;

  /* "libopenzwave.pyx":257
 *     cdef string s
 *     c = ""
 *     ret = None             # <<<<<<<<<<<<<<
 *     if values_map.find(valueId) != values_map.end():
 *         datatype = PyValueTypes[values_map.at(valueId).GetType()]
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_ret = Py_None;

  /* "libopenzwave.pyx":258
 *     c = ""
 *     ret = None
 *     if values_map.find(valueId) != values_map.end():             # <<<<<<<<<<<<<<
 *         datatype = PyValueTypes[values_map.at(valueId).GetType()]
 *         if datatype == "Bool":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":259
 *     ret = None
 *     if values_map.find(valueId) != values_map.end():
 *         datatype = PyValueTypes[values_map.at(valueId).GetType()]             # <<<<<<<<<<<<<<
 *         if datatype == "Bool":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":260
 *     if values_map.find(valueId) != values_map.end():
 *         datatype = PyValueTypes[values_map.at(valueId).GetType()]
 *         if datatype == "Bool":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Bool, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":261
 *         datatype = PyValueTypes[values_map.at(valueId).GetType()]
 *         if datatype == "Bool":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)             # <<<<<<<<<<<<<<
 *             ret = type_bool if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsBool(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_bool));

      /* "libopenzwave.pyx":262
 *         if datatype == "Bool":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Byte":
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_type_bool); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "libopenzwave.pyx":263
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Byte":
 *             cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
    }

    /* "libopenzwave.pyx":264
 *             ret = type_bool if cret else None
 *             return ret
 *         elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 *             ret = type_byte if cret else None
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Byte, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":265
 *             return ret
 *         elif datatype == "Byte":
 *             cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)             # <<<<<<<<<<<<<<
 *             ret = type_byte if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsByte(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_byte));

      /* "libopenzwave.pyx":266
 *         elif datatype == "Byte":
 *             cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 *             ret = type_byte if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Raw":
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_4 = __Pyx_PyInt_From_uint8_t(__pyx_v_type_byte); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_5 = Py_None;
      }
      __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "libopenzwave.pyx":267
 *             cret = manager.GetValueAsByte(values_map.at(valueId), &type_byte)
 *             ret = type_byte if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Raw":
 *             cret = manager.GetValueAsRaw(values_map.at(valueId), &vectraw, &size)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
    }

    /* "libopenzwave.pyx":268
 *             ret = type_byte if cret else None
 *             return ret
 *         elif datatype == "Raw":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsRaw(values_map.at(valueId), &vectraw, &size)
 *             if cret:
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Raw, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":269
 *             return ret
 *         elif datatype == "Raw":
 *             cret = manager.GetValueAsRaw(values_map.at(valueId), &vectraw, &size)             # <<<<<<<<<<<<<<
 *             if cret:
 *                 for x in range (0, size):
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsRaw(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_vectraw), (&__pyx_v_size));

      /* "libopenzwave.pyx":270
 *         elif datatype == "Raw":
 *             cret = manager.GetValueAsRaw(values_map.at(valueId), &vectraw, &size)
 *             if cret:             # <<<<<<<<<<<<<<
 *                 for x in range (0, size):
 *                     c += chr(vectraw[x])
 */
      __pyx_t_2 = (__pyx_v_cret != 0);
      if (__pyx_t_2) {

        /* "libopenzwave.pyx":271
 *             cret = manager.GetValueAsRaw(values_map.at(valueId), &vectraw, &size)
 *             if cret:
 *                 for x in range (0, size):             # <<<<<<<<<<<<<<
 *                     c += chr(vectraw[x])
 *             ret = c if cret else None
 */
        __pyx_t_6 = __pyx_v_size;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
          __pyx_v_x = __pyx_t_7;

          /* "libopenzwave.pyx":272
 *             if cret:
 *                 for x in range (0, size):
 *                     c += chr(vectraw[x])             # <<<<<<<<<<<<<<
 *             ret = c if cret else None
 *             free(vectraw)
 */
          __pyx_t_5 = __Pyx_PyInt_From_uint8_t((__pyx_v_vectraw[__pyx_v_x])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_chr, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_c, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF_SET(__pyx_v_c, __pyx_t_4);
          __pyx_t_4 = 0;
        }
        goto __pyx_L5;
      }
      __pyx_L5:;

      /* "libopenzwave.pyx":273
 *                 for x in range (0, size):
 *                     c += chr(vectraw[x])
 *             ret = c if cret else None             # <<<<<<<<<<<<<<
 *             free(vectraw)
 *             return ret
 */
      if ((__pyx_v_cret != 0)) {
        __Pyx_INCREF(__pyx_v_c);
        __pyx_t_4 = __pyx_v_c;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_4 = Py_None;
      }
      __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":274
 *                     c += chr(vectraw[x])
 *             ret = c if cret else None
 *             free(vectraw)             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Decimal":
 */
      free(__pyx_v_vectraw);

      /* "libopenzwave.pyx":275
 *             ret = c if cret else None
 *             free(vectraw)
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Decimal":
 *             cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
    }

    /* "libopenzwave.pyx":276
 *             free(vectraw)
 *             return ret
 *         elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 *             ret = type_float if cret else None
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Decimal, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":277
 *             return ret
 *         elif datatype == "Decimal":
 *             cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)             # <<<<<<<<<<<<<<
 *             ret = type_float if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsFloat(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_float));

      /* "libopenzwave.pyx":278
 *         elif datatype == "Decimal":
 *             cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 *             ret = type_float if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Int":
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_type_float); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_t_5;
        __pyx_t_5 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_4 = Py_None;
      }
      __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":279
 *             cret = manager.GetValueAsFloat(values_map.at(valueId), &type_float)
 *             ret = type_float if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Int":
 *             cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
    }

    /* "libopenzwave.pyx":280
 *             ret = type_float if cret else None
 *             return ret
 *         elif datatype == "Int":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 *             ret = type_int if cret else None
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Int, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":281
 *             return ret
 *         elif datatype == "Int":
 *             cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)             # <<<<<<<<<<<<<<
 *             ret = type_int if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsInt(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_int));

      /* "libopenzwave.pyx":282
 *         elif datatype == "Int":
 *             cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 *             ret = type_int if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Short":
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_5 = __Pyx_PyInt_From_int32_t(__pyx_v_type_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_t_5;
        __pyx_t_5 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_4 = Py_None;
      }
      __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":283
 *             cret = manager.GetValueAsInt(values_map.at(valueId), &type_int)
 *             ret = type_int if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Short":
 *             cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
    }

    /* "libopenzwave.pyx":284
 *             ret = type_int if cret else None
 *             return ret
 *         elif datatype == "Short":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 *             ret = type_short if cret else None
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Short, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":285
 *             return ret
 *         elif datatype == "Short":
 *             cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)             # <<<<<<<<<<<<<<
 *             ret = type_short if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsShort(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_short));

      /* "libopenzwave.pyx":286
 *         elif datatype == "Short":
 *             cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 *             ret = type_short if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "String":
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_5 = __Pyx_PyInt_From_int16_t(__pyx_v_type_short); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_t_5;
        __pyx_t_5 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_4 = Py_None;
      }
      __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":287
 *             cret = manager.GetValueAsShort(values_map.at(valueId), &type_short)
 *             ret = type_short if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "String":
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
    }

    /* "libopenzwave.pyx":288
 *             ret = type_short if cret else None
 *             return ret
 *         elif datatype == "String":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_String, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":289
 *             return ret
 *         elif datatype == "String":
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)             # <<<<<<<<<<<<<<
 *             ret = type_string.c_str() if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsString(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_string));

      /* "libopenzwave.pyx":290
 *         elif datatype == "String":
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "Button":
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_t_5;
        __pyx_t_5 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_4 = Py_None;
      }
      __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":291
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "Button":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
    }

    /* "libopenzwave.pyx":292
 *             ret = type_string.c_str() if cret else None
 *             return ret
 *         elif datatype == "Button":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Button, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":293
 *             return ret
 *         elif datatype == "Button":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)             # <<<<<<<<<<<<<<
 *             ret = type_bool if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsBool(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_bool));

      /* "libopenzwave.pyx":294
 *         elif datatype == "Button":
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         elif datatype == "List":
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_type_bool); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_t_5;
        __pyx_t_5 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_4 = Py_None;
      }
      __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":295
 *             cret = manager.GetValueAsBool(values_map.at(valueId), &type_bool)
 *             ret = type_bool if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         elif datatype == "List":
 *             cret = manager.GetValueListSelection(values_map.at(valueId), &type_string)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
    }

    /* "libopenzwave.pyx":296
 *             ret = type_bool if cret else None
 *             return ret
 *         elif datatype == "List":             # <<<<<<<<<<<<<<
 *             cret = manager.GetValueListSelection(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_List, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":297
 *             return ret
 *         elif datatype == "List":
 *             cret = manager.GetValueListSelection(values_map.at(valueId), &type_string)             # <<<<<<<<<<<<<<
 *             ret = type_string.c_str() if cret else None
 *             return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueListSelection(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_string));

      /* "libopenzwave.pyx":298
 *         elif datatype == "List":
 *             cret = manager.GetValueListSelection(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *             return ret
 *         else :
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_t_5;
        __pyx_t_5 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_4 = Py_None;
      }
      __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":299
 *             cret = manager.GetValueListSelection(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None
 *             return ret             # <<<<<<<<<<<<<<
 *         else :
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_ret);
      __pyx_r = __pyx_v_ret;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "libopenzwave.pyx":301
 *             return ret
 *         else :
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)             # <<<<<<<<<<<<<<
 *             ret = type_string.c_str() if cret else None
 *     return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_valueId); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_manager->GetValueAsString(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_string));

      /* "libopenzwave.pyx":302
 *         else :
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __pyx_t_5;
        __pyx_t_5 = 0;
      } else {
        __Pyx_INCREF(Py_None);
        __pyx_t_4 = Py_None;
      }
      __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_4);
      __pyx_t_4 = 0;
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":303
 *             cret = manager.GetValueAsString(values_map.at(valueId), &type_string)
 *             ret = type_string.c_str() if cret else None
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * cdef addValueId(ValueID v, n):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "libopenzwave.pyx":242
 * cdef map[uint64_t, ValueID] values_map
 * 
 * cdef getValueFromType(Manager *manager, valueId) except+ MemoryError:             # <<<<<<<<<<<<<<
 *     """
 *     Translate a value in the right type
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.getValueFromType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":305
 *     return ret
 * 
 * cdef addValueId(ValueID v, n):             # <<<<<<<<<<<<<<
 *     cdef Manager *manager = Get()
 *     values_map.insert ( pair[uint64_t, ValueID] (v.GetId(), v))
 */

static PyObject *__pyx_f_12libopenzwave_addValueId(OpenZWave::ValueID __pyx_v_v, PyObject *__pyx_v_n) {
  OpenZWave::Manager *__pyx_v_manager;
  PyObject *__pyx_v_genre = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::pair<uint64_t,OpenZWave::ValueID> __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  uint8_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addValueId", 0);

  /* "libopenzwave.pyx":306
 * 
 * cdef addValueId(ValueID v, n):
 *     cdef Manager *manager = Get()             # <<<<<<<<<<<<<<
 *     values_map.insert ( pair[uint64_t, ValueID] (v.GetId(), v))
 *     #check is a valid value
 */
  __pyx_v_manager = OpenZWave::Manager::Get();

  /* "libopenzwave.pyx":307
 * cdef addValueId(ValueID v, n):
 *     cdef Manager *manager = Get()
 *     values_map.insert ( pair[uint64_t, ValueID] (v.GetId(), v))             # <<<<<<<<<<<<<<
 *     #check is a valid value
 *     if v.GetInstance() == 0:
 */
  try {
    __pyx_t_1 = std::pair<uint64_t,OpenZWave::ValueID>(__pyx_v_v.GetId(), __pyx_v_v);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_12libopenzwave_values_map.insert(__pyx_t_1);

  /* "libopenzwave.pyx":309
 *     values_map.insert ( pair[uint64_t, ValueID] (v.GetId(), v))
 *     #check is a valid value
 *     if v.GetInstance() == 0:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_2 = ((__pyx_v_v.GetInstance() == 0) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":310
 *     #check is a valid value
 *     if v.GetInstance() == 0:
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     genre = PyGenres[v.GetGenre()]
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":312
 *         return None
 * 
 *     genre = PyGenres[v.GetGenre()]             # <<<<<<<<<<<<<<
 *     #handle basic value in different way
 *     if genre =="Basic":
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyGenres); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyInt_FromLong(__pyx_v_v.GetGenre()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_genre = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "libopenzwave.pyx":314
 *     genre = PyGenres[v.GetGenre()]
 *     #handle basic value in different way
 *     if genre =="Basic":             # <<<<<<<<<<<<<<
 *         n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_genre, __pyx_n_s_Basic, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":315
 *     #handle basic value in different way
 *     if genre =="Basic":
 *         n['valueId'] = {'homeId' : v.GetHomeId(),             # <<<<<<<<<<<<<<
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 */
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_v.GetHomeId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_homeId, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "libopenzwave.pyx":316
 *     if genre =="Basic":
 *         n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),             # <<<<<<<<<<<<<<
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),
 */
    __pyx_t_4 = __Pyx_PyInt_From_uint8_t(__pyx_v_v.GetNodeId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_nodeId, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "libopenzwave.pyx":317
 *         n['valueId'] = {'homeId' : v.GetHomeId(),
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],             # <<<<<<<<<<<<<<
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)((PyObject*)__pyx_ptype_12libopenzwave_PyManager)), __pyx_n_s_COMMAND_CLASS_DESC); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __pyx_v_v.GetCommandClassId();
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, __pyx_t_6, uint8_t, 0, __Pyx_PyInt_From_uint8_t, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_commandClass, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libopenzwave.pyx":318
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),             # <<<<<<<<<<<<<<
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),
 */
    __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_v.GetInstance()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_instance, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libopenzwave.pyx":319
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),             # <<<<<<<<<<<<<<
 *                     'id' : v.GetId(),
 *                     'genre' : '',
 */
    __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_v.GetIndex()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_index, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libopenzwave.pyx":320
 *                     'instance' : v.GetInstance(),
 *                     'index' : v.GetIndex(),
 *                     'id' : v.GetId(),             # <<<<<<<<<<<<<<
 *                     'genre' : '',
 *                     'type' : PyValueTypes[v.GetType()],
 */
    __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_v.GetId()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_id, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_genre, __pyx_kp_s_) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "libopenzwave.pyx":322
 *                     'id' : v.GetId(),
 *                     'genre' : '',
 *                     'type' : PyValueTypes[v.GetType()],             # <<<<<<<<<<<<<<
 *                     'value' : None,
 *                     'label' : None,
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyInt_FromLong(__pyx_v_v.GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_type, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "libopenzwave.pyx":323
 *                     'genre' : '',
 *                     'type' : PyValueTypes[v.GetType()],
 *                     'value' : None,             # <<<<<<<<<<<<<<
 *                     'label' : None,
 *                     'units' : None,
 */
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_value, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "libopenzwave.pyx":324
 *                     'type' : PyValueTypes[v.GetType()],
 *                     'value' : None,
 *                     'label' : None,             # <<<<<<<<<<<<<<
 *                     'units' : None,
 *                     'readOnly': False,
 */
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_label, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "libopenzwave.pyx":325
 *                     'value' : None,
 *                     'label' : None,
 *                     'units' : None,             # <<<<<<<<<<<<<<
 *                     'readOnly': False,
 *                     }
 */
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_units, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "libopenzwave.pyx":326
 *                     'label' : None,
 *                     'units' : None,
 *                     'readOnly': False,             # <<<<<<<<<<<<<<
 *                     }
 *     else:
 */
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_readOnly, Py_False) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "libopenzwave.pyx":315
 *     #handle basic value in different way
 *     if genre =="Basic":
 *         n['valueId'] = {'homeId' : v.GetHomeId(),             # <<<<<<<<<<<<<<
 *                     'nodeId' : v.GetNodeId(),
 *                     'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 */
    if (unlikely(PyObject_SetItem(__pyx_v_n, __pyx_n_s_valueId, __pyx_t_5) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "libopenzwave.pyx":329
 *                     }
 *     else:
 *         n['valueId'] = {'homeId' : v.GetHomeId(),             # <<<<<<<<<<<<<<
 *                         'nodeId' : v.GetNodeId(),
 *                         'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 */
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_From_uint32_t(__pyx_v_v.GetHomeId()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_homeId, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "libopenzwave.pyx":330
 *     else:
 *         n['valueId'] = {'homeId' : v.GetHomeId(),
 *                         'nodeId' : v.GetNodeId(),             # <<<<<<<<<<<<<<
 *                         'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                         'instance' : v.GetInstance(),
 */
    __pyx_t_7 = __Pyx_PyInt_From_uint8_t(__pyx_v_v.GetNodeId()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_nodeId, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "libopenzwave.pyx":331
 *         n['valueId'] = {'homeId' : v.GetHomeId(),
 *                         'nodeId' : v.GetNodeId(),
 *                         'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],             # <<<<<<<<<<<<<<
 *                         'instance' : v.GetInstance(),
 *                         'index' : v.GetIndex(),
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)((PyObject*)__pyx_ptype_12libopenzwave_PyManager)), __pyx_n_s_COMMAND_CLASS_DESC); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __pyx_v_v.GetCommandClassId();
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_7, __pyx_t_6, uint8_t, 0, __Pyx_PyInt_From_uint8_t, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_commandClass, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "libopenzwave.pyx":332
 *                         'nodeId' : v.GetNodeId(),
 *                         'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                         'instance' : v.GetInstance(),             # <<<<<<<<<<<<<<
 *                         'index' : v.GetIndex(),
 *                         'id' : v.GetId(),
 */
    __pyx_t_4 = __Pyx_PyInt_From_uint8_t(__pyx_v_v.GetInstance()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_instance, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "libopenzwave.pyx":333
 *                         'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 *                         'instance' : v.GetInstance(),
 *                         'index' : v.GetIndex(),             # <<<<<<<<<<<<<<
 *                         'id' : v.GetId(),
 *                         'genre' : genre,
 */
    __pyx_t_4 = __Pyx_PyInt_From_uint8_t(__pyx_v_v.GetIndex()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_index, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "libopenzwave.pyx":334
 *                         'instance' : v.GetInstance(),
 *                         'index' : v.GetIndex(),
 *                         'id' : v.GetId(),             # <<<<<<<<<<<<<<
 *                         'genre' : genre,
 *                         'type' : PyValueTypes[v.GetType()],
 */
    __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_v.GetId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_id, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "libopenzwave.pyx":335
 *                         'index' : v.GetIndex(),
 *                         'id' : v.GetId(),
 *                         'genre' : genre,             # <<<<<<<<<<<<<<
 *                         'type' : PyValueTypes[v.GetType()],
 *                         'value' : getValueFromType(manager,v.GetId()),
 */
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_genre, __pyx_v_genre) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "libopenzwave.pyx":336
 *                         'id' : v.GetId(),
 *                         'genre' : genre,
 *                         'type' : PyValueTypes[v.GetType()],             # <<<<<<<<<<<<<<
 *                         'value' : getValueFromType(manager,v.GetId()),
 *                         'label' : manager.GetValueLabel(v).c_str(),
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyValueTypes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = PyInt_FromLong(__pyx_v_v.GetType()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyObject_GetItem(__pyx_t_4, __pyx_t_7); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_type, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "libopenzwave.pyx":337
 *                         'genre' : genre,
 *                         'type' : PyValueTypes[v.GetType()],
 *                         'value' : getValueFromType(manager,v.GetId()),             # <<<<<<<<<<<<<<
 *                         'label' : manager.GetValueLabel(v).c_str(),
 *                         'units' : manager.GetValueUnits(v).c_str(),
 */
    __pyx_t_3 = __Pyx_PyInt_From_uint64_t(__pyx_v_v.GetId()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    try {
      __pyx_t_7 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_manager, __pyx_t_3);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_MemoryError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_MemoryError); }
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_value, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "libopenzwave.pyx":338
 *                         'type' : PyValueTypes[v.GetType()],
 *                         'value' : getValueFromType(manager,v.GetId()),
 *                         'label' : manager.GetValueLabel(v).c_str(),             # <<<<<<<<<<<<<<
 *                         'units' : manager.GetValueUnits(v).c_str(),
 *                         'readOnly': manager.IsValueReadOnly(v),
 */
    __pyx_t_7 = __Pyx_PyBytes_FromString(__pyx_v_manager->GetValueLabel(__pyx_v_v).c_str()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_label, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "libopenzwave.pyx":339
 *                         'value' : getValueFromType(manager,v.GetId()),
 *                         'label' : manager.GetValueLabel(v).c_str(),
 *                         'units' : manager.GetValueUnits(v).c_str(),             # <<<<<<<<<<<<<<
 *                         'readOnly': manager.IsValueReadOnly(v),
 *                         }
 */
    __pyx_t_7 = __Pyx_PyBytes_FromString(__pyx_v_manager->GetValueUnits(__pyx_v_v).c_str()); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_units, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "libopenzwave.pyx":340
 *                         'label' : manager.GetValueLabel(v).c_str(),
 *                         'units' : manager.GetValueUnits(v).c_str(),
 *                         'readOnly': manager.IsValueReadOnly(v),             # <<<<<<<<<<<<<<
 *                         }
 * 
 */
    __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_manager->IsValueReadOnly(__pyx_v_v)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_readOnly, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "libopenzwave.pyx":329
 *                     }
 *     else:
 *         n['valueId'] = {'homeId' : v.GetHomeId(),             # <<<<<<<<<<<<<<
 *                         'nodeId' : v.GetNodeId(),
 *                         'commandClass' : PyManager.COMMAND_CLASS_DESC[v.GetCommandClassId()],
 */
    if (unlikely(PyObject_SetItem(__pyx_v_n, __pyx_n_s_valueId, __pyx_t_5) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_L4:;

  /* "libopenzwave.pyx":305
 *     return ret
 * 
 * cdef addValueId(ValueID v, n):             # <<<<<<<<<<<<<<
 *     cdef Manager *manager = Get()
 *     values_map.insert ( pair[uint64_t, ValueID] (v.GetId(), v))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("libopenzwave.addValueId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_genre);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":343
 *                         }
 * 
 * cdef void notif_callback(const_notification _notification, void* _context) with gil:             # <<<<<<<<<<<<<<
 *     """
 *     Notification callback to the C++ library
 */

static void __pyx_f_12libopenzwave_notif_callback(OpenZWave::Notification const* __pyx_v__notification, void *__pyx_v__context) {
  OpenZWave::Notification *__pyx_v_notification;
  PyObject *__pyx_v_n = NULL;
  int __pyx_v_isAddValueDetails;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  enum OpenZWave::Notification::NotificationType __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("notif_callback", 0);

  /* "libopenzwave.pyx":348
 * 
 *     """
 *     cdef Notification* notification = <Notification*>_notification             # <<<<<<<<<<<<<<
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 *          'homeId' : notification.GetHomeId(),
 */
  __pyx_v_notification = ((OpenZWave::Notification *)__pyx_v__notification);

  /* "libopenzwave.pyx":349
 *     """
 *     cdef Notification* notification = <Notification*>_notification
 *     n = {'notificationType' : PyNotifications[notification.GetType()],             # <<<<<<<<<<<<<<
 *          'homeId' : notification.GetHomeId(),
 *          'nodeId' : notification.GetNodeId(),
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyNotifications); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_notification->GetType()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_notificationType, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":350
 *     cdef Notification* notification = <Notification*>_notification
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 *          'homeId' : notification.GetHomeId(),             # <<<<<<<<<<<<<<
 *          'nodeId' : notification.GetNodeId(),
 *         }
 */
  __pyx_t_4 = __Pyx_PyInt_From_uint32_t(__pyx_v_notification->GetHomeId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_homeId, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":351
 *     n = {'notificationType' : PyNotifications[notification.GetType()],
 *          'homeId' : notification.GetHomeId(),
 *          'nodeId' : notification.GetNodeId(),             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_uint8_t(__pyx_v_notification->GetNodeId()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_nodeId, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_n = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":354
 *         }
 * 
 *     isAddValueDetails = True;             # <<<<<<<<<<<<<<
 * 
 *     if notification.GetType() == Type_Group:
 */
  __pyx_v_isAddValueDetails = 1;

  /* "libopenzwave.pyx":356
 *     isAddValueDetails = True;
 * 
 *     if notification.GetType() == Type_Group:             # <<<<<<<<<<<<<<
 *         n['groupIdx'] = notification.GetGroupIdx()
 *         isAddValueDetails = False;
 */
  __pyx_t_5 = ((__pyx_v_notification->GetType() == OpenZWave::Notification::Type_Group) != 0);
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":357
 * 
 *     if notification.GetType() == Type_Group:
 *         n['groupIdx'] = notification.GetGroupIdx()             # <<<<<<<<<<<<<<
 *         isAddValueDetails = False;
 *     elif notification.GetType() == Type_NodeEvent:
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint8_t(__pyx_v_notification->GetGroupIdx()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_n, __pyx_n_s_groupIdx, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libopenzwave.pyx":358
 *     if notification.GetType() == Type_Group:
 *         n['groupIdx'] = notification.GetGroupIdx()
 *         isAddValueDetails = False;             # <<<<<<<<<<<<<<
 *     elif notification.GetType() == Type_NodeEvent:
 *         n['event'] = notification.GetEvent()
 */
    __pyx_v_isAddValueDetails = 0;
    goto __pyx_L3;
  }

  /* "libopenzwave.pyx":359
 *         n['groupIdx'] = notification.GetGroupIdx()
 *         isAddValueDetails = False;
 *     elif notification.GetType() == Type_NodeEvent:             # <<<<<<<<<<<<<<
 *         n['event'] = notification.GetEvent()
 *         isAddValueDetails = False;
 */
  __pyx_t_5 = ((__pyx_v_notification->GetType() == OpenZWave::Notification::Type_NodeEvent) != 0);
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":360
 *         isAddValueDetails = False;
 *     elif notification.GetType() == Type_NodeEvent:
 *         n['event'] = notification.GetEvent()             # <<<<<<<<<<<<<<
 *         isAddValueDetails = False;
 *     elif notification.GetType() == Type_Notification:
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint8_t(__pyx_v_notification->GetEvent()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_n, __pyx_n_s_event, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libopenzwave.pyx":361
 *     elif notification.GetType() == Type_NodeEvent:
 *         n['event'] = notification.GetEvent()
 *         isAddValueDetails = False;             # <<<<<<<<<<<<<<
 *     elif notification.GetType() == Type_Notification:
 *         n['notificationCode'] = notification.GetNotification()
 */
    __pyx_v_isAddValueDetails = 0;
    goto __pyx_L3;
  }

  /* "libopenzwave.pyx":362
 *         n['event'] = notification.GetEvent()
 *         isAddValueDetails = False;
 *     elif notification.GetType() == Type_Notification:             # <<<<<<<<<<<<<<
 *         n['notificationCode'] = notification.GetNotification()
 *         isAddValueDetails = False;
 */
  __pyx_t_5 = ((__pyx_v_notification->GetType() == OpenZWave::Notification::Type_Notification) != 0);
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":363
 *         isAddValueDetails = False;
 *     elif notification.GetType() == Type_Notification:
 *         n['notificationCode'] = notification.GetNotification()             # <<<<<<<<<<<<<<
 *         isAddValueDetails = False;
 *     elif notification.GetType() in (Type_CreateButton, Type_DeleteButton, Type_ButtonOn, Type_ButtonOff):
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint8_t(__pyx_v_notification->GetNotification()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_n, __pyx_n_s_notificationCode, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libopenzwave.pyx":364
 *     elif notification.GetType() == Type_Notification:
 *         n['notificationCode'] = notification.GetNotification()
 *         isAddValueDetails = False;             # <<<<<<<<<<<<<<
 *     elif notification.GetType() in (Type_CreateButton, Type_DeleteButton, Type_ButtonOn, Type_ButtonOff):
 *         n['buttonId'] = notification.GetButtonId()
 */
    __pyx_v_isAddValueDetails = 0;
    goto __pyx_L3;
  }

  /* "libopenzwave.pyx":365
 *         n['notificationCode'] = notification.GetNotification()
 *         isAddValueDetails = False;
 *     elif notification.GetType() in (Type_CreateButton, Type_DeleteButton, Type_ButtonOn, Type_ButtonOff):             # <<<<<<<<<<<<<<
 *         n['buttonId'] = notification.GetButtonId()
 *         isAddValueDetails = False;
 */
  __pyx_t_6 = __pyx_v_notification->GetType();
  __pyx_t_5 = ((__pyx_t_6 == OpenZWave::Notification::Type_CreateButton) != 0);
  if (!__pyx_t_5) {
    __pyx_t_7 = ((__pyx_t_6 == OpenZWave::Notification::Type_DeleteButton) != 0);
    __pyx_t_8 = __pyx_t_7;
  } else {
    __pyx_t_8 = __pyx_t_5;
  }
  if (!__pyx_t_8) {
    __pyx_t_5 = ((__pyx_t_6 == OpenZWave::Notification::Type_ButtonOn) != 0);
    __pyx_t_7 = __pyx_t_5;
  } else {
    __pyx_t_7 = __pyx_t_8;
  }
  if (!__pyx_t_7) {
    __pyx_t_8 = ((__pyx_t_6 == OpenZWave::Notification::Type_ButtonOff) != 0);
    __pyx_t_5 = __pyx_t_8;
  } else {
    __pyx_t_5 = __pyx_t_7;
  }
  __pyx_t_7 = (__pyx_t_5 != 0);
  if (__pyx_t_7) {

    /* "libopenzwave.pyx":366
 *         isAddValueDetails = False;
 *     elif notification.GetType() in (Type_CreateButton, Type_DeleteButton, Type_ButtonOn, Type_ButtonOff):
 *         n['buttonId'] = notification.GetButtonId()             # <<<<<<<<<<<<<<
 *         isAddValueDetails = False;
 *     elif notification.GetType() == Type_SceneEvent:
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint8_t(__pyx_v_notification->GetButtonId()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_n, __pyx_n_s_buttonId, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libopenzwave.pyx":367
 *     elif notification.GetType() in (Type_CreateButton, Type_DeleteButton, Type_ButtonOn, Type_ButtonOff):
 *         n['buttonId'] = notification.GetButtonId()
 *         isAddValueDetails = False;             # <<<<<<<<<<<<<<
 *     elif notification.GetType() == Type_SceneEvent:
 *         n['sceneId'] = notification.GetSceneId()
 */
    __pyx_v_isAddValueDetails = 0;
    goto __pyx_L3;
  }

  /* "libopenzwave.pyx":368
 *         n['buttonId'] = notification.GetButtonId()
 *         isAddValueDetails = False;
 *     elif notification.GetType() == Type_SceneEvent:             # <<<<<<<<<<<<<<
 *         n['sceneId'] = notification.GetSceneId()
 *         isAddValueDetails = False;
 */
  __pyx_t_7 = ((__pyx_v_notification->GetType() == OpenZWave::Notification::Type_SceneEvent) != 0);
  if (__pyx_t_7) {

    /* "libopenzwave.pyx":369
 *         isAddValueDetails = False;
 *     elif notification.GetType() == Type_SceneEvent:
 *         n['sceneId'] = notification.GetSceneId()             # <<<<<<<<<<<<<<
 *         isAddValueDetails = False;
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_uint8_t(__pyx_v_notification->GetSceneId()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyDict_SetItem(__pyx_v_n, __pyx_n_s_sceneId, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "libopenzwave.pyx":370
 *     elif notification.GetType() == Type_SceneEvent:
 *         n['sceneId'] = notification.GetSceneId()
 *         isAddValueDetails = False;             # <<<<<<<<<<<<<<
 * 
 *     if isAddValueDetails:
 */
    __pyx_v_isAddValueDetails = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":372
 *         isAddValueDetails = False;
 * 
 *     if isAddValueDetails:             # <<<<<<<<<<<<<<
 *         addValueId(notification.GetValueID(), n)
 * 
 */
  __pyx_t_7 = (__pyx_v_isAddValueDetails != 0);
  if (__pyx_t_7) {

    /* "libopenzwave.pyx":373
 * 
 *     if isAddValueDetails:
 *         addValueId(notification.GetValueID(), n)             # <<<<<<<<<<<<<<
 * 
 *     (<object>_context)(n)
 */
    __pyx_t_1 = __pyx_f_12libopenzwave_addValueId(__pyx_v_notification->GetValueID(), __pyx_v_n); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "libopenzwave.pyx":375
 *         addValueId(notification.GetValueID(), n)
 * 
 *     (<object>_context)(n)             # <<<<<<<<<<<<<<
 * 
 * cdef void ctrl_callback(ControllerState _state, ControllerError _error, void* _context) with gil:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_v__context), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":343
 *                         }
 * 
 * cdef void notif_callback(const_notification _notification, void* _context) with gil:             # <<<<<<<<<<<<<<
 *     """
 *     Notification callback to the C++ library
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("libopenzwave.notif_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "libopenzwave.pyx":377
 *     (<object>_context)(n)
 * 
 * cdef void ctrl_callback(ControllerState _state, ControllerError _error, void* _context) with gil:             # <<<<<<<<<<<<<<
 *     """
 *     Controller callback to the C++ library
 */

static void __pyx_f_12libopenzwave_ctrl_callback(enum OpenZWave::Driver::ControllerState __pyx_v__state, enum OpenZWave::Driver::ControllerError __pyx_v__error, void *__pyx_v__context) {
  PyObject *__pyx_v_c = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("ctrl_callback", 0);

  /* "libopenzwave.pyx":382
 * 
 *     """
 *     c = {'state' : PyControllerState[_state],             # <<<<<<<<<<<<<<
 *          'message' : PyControllerState[_state].doc,
 *          'error' : _error,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyControllerState); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(__pyx_v__state); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_state, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "libopenzwave.pyx":383
 *     """
 *     c = {'state' : PyControllerState[_state],
 *          'message' : PyControllerState[_state].doc,             # <<<<<<<<<<<<<<
 *          'error' : _error,
 *          'error_msg' : PyControllerError[_error].doc,
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyControllerState); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyInt_FromLong(__pyx_v__state); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_GetItem(__pyx_t_4, __pyx_t_3); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_doc); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_message, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":384
 *     c = {'state' : PyControllerState[_state],
 *          'message' : PyControllerState[_state].doc,
 *          'error' : _error,             # <<<<<<<<<<<<<<
 *          'error_msg' : PyControllerError[_error].doc,
 *         }
 */
  __pyx_t_3 = PyInt_FromLong(__pyx_v__error); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 384; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_error, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":385
 *          'message' : PyControllerState[_state].doc,
 *          'error' : _error,
 *          'error_msg' : PyControllerError[_error].doc,             # <<<<<<<<<<<<<<
 *         }
 *     (<object>_context)(c)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyControllerError); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyInt_FromLong(__pyx_v__error); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_t_2); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_doc); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_error_msg, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_c = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":387
 *          'error_msg' : PyControllerError[_error].doc,
 *         }
 *     (<object>_context)(c)             # <<<<<<<<<<<<<<
 * 
 * cpdef object driverData():
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_c);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_c);
  __Pyx_GIVEREF(__pyx_v_c);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_v__context), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":377
 *     (<object>_context)(n)
 * 
 * cdef void ctrl_callback(ControllerState _state, ControllerError _error, void* _context) with gil:             # <<<<<<<<<<<<<<
 *     """
 *     Controller callback to the C++ library
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("libopenzwave.ctrl_callback", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "libopenzwave.pyx":389
 *     (<object>_context)(c)
 * 
 * cpdef object driverData():             # <<<<<<<<<<<<<<
 *     cdef DriverData data
 * 
 */

static PyObject *__pyx_pw_12libopenzwave_1driverData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_12libopenzwave_driverData(CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("driverData", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_1driverData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_12libopenzwave_1driverData(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("driverData (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_driverData(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_driverData(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("driverData", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12libopenzwave_driverData(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.driverData", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":392
 *     cdef DriverData data
 * 
 * def configPath():             # <<<<<<<<<<<<<<
 *     '''
 * Retrieve the config path. This directory hold the xml files.
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_3configPath(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_2configPath[] = "\nRetrieve the config path. This directory hold the xml files.\n\n:return: A string containing the library config path or None.\n:rtype: str\n\n    ";
static PyMethodDef __pyx_mdef_12libopenzwave_3configPath = {__Pyx_NAMESTR("configPath"), (PyCFunction)__pyx_pw_12libopenzwave_3configPath, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_2configPath)};
static PyObject *__pyx_pw_12libopenzwave_3configPath(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configPath (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_2configPath(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_2configPath(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_v_pythonpath = NULL;
  PyObject *__pyx_v_afile = NULL;
  PyObject *__pyx_v_fullpath = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("configPath", 0);

  /* "libopenzwave.pyx":400
 * 
 *     '''
 *     if os.path.exists(os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *         return os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exists); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PY_OZWAVE_CONFIG_DIRECTORY); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_kp_s_usr);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_usr);
  __Pyx_GIVEREF(__pyx_kp_s_usr);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":401
 *     '''
 *     if os.path.exists(os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *     elif os.path.exists(os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_PY_OZWAVE_CONFIG_DIRECTORY); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_s_usr);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_usr);
    __Pyx_GIVEREF(__pyx_kp_s_usr);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":402
 *     if os.path.exists(os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *         return os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exists); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PY_OZWAVE_CONFIG_DIRECTORY); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_usr_local);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_usr_local);
  __Pyx_GIVEREF(__pyx_kp_s_usr_local);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":403
 *         return os.path.join("/usr",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *     elif os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PY_OZWAVE_CONFIG_DIRECTORY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_kp_s_usr_local);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_usr_local);
    __Pyx_GIVEREF(__pyx_kp_s_usr_local);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":404
 *     elif os.path.exists(os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *         return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exists); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_OZWAVE_CONFIG_DIRECTORY); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_usr);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_usr);
  __Pyx_GIVEREF(__pyx_kp_s_usr);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":405
 *         return os.path.join("/usr/local",PY_OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *     elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_OZWAVE_CONFIG_DIRECTORY); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_kp_s_usr);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_usr);
    __Pyx_GIVEREF(__pyx_kp_s_usr);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 405; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":406
 *     elif os.path.exists(os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *         return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)
 *     else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exists); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_OZWAVE_CONFIG_DIRECTORY); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_kp_s_usr_local);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_s_usr_local);
  __Pyx_GIVEREF(__pyx_kp_s_usr_local);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":407
 *         return os.path.join("/usr",OZWAVE_CONFIG_DIRECTORY)
 *     elif os.path.exists(os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)):
 *         return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *     else:
 *         for pythonpath in sys.path:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_OZWAVE_CONFIG_DIRECTORY); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_s_usr_local);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_usr_local);
    __Pyx_GIVEREF(__pyx_kp_s_usr_local);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":409
 *         return os.path.join("/usr/local",OZWAVE_CONFIG_DIRECTORY)
 *     else:
 *         for pythonpath in sys.path:             # <<<<<<<<<<<<<<
 *             try:
 *                 for afile in os.listdir(pythonpath):
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_4)) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_4)) {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_XDECREF_SET(__pyx_v_pythonpath, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "libopenzwave.pyx":410
 *     else:
 *         for pythonpath in sys.path:
 *             try:             # <<<<<<<<<<<<<<
 *                 for afile in os.listdir(pythonpath):
 *                     fullpath = os.path.join(pythonpath, afile)
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "libopenzwave.pyx":411
 *         for pythonpath in sys.path:
 *             try:
 *                 for afile in os.listdir(pythonpath):             # <<<<<<<<<<<<<<
 *                     fullpath = os.path.join(pythonpath, afile)
 *                     if os.path.exists(os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)):
 */
          __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_listdir); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_v_pythonpath);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_pythonpath);
          __Pyx_GIVEREF(__pyx_v_pythonpath);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (PyList_CheckExact(__pyx_t_2) || PyTuple_CheckExact(__pyx_t_2)) {
            __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_11 = 0;
            __pyx_t_12 = NULL;
          } else {
            __pyx_t_11 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_12 = Py_TYPE(__pyx_t_1)->tp_iternext;
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          for (;;) {
            if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_1)) {
              if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_2); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              #endif
            } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_1)) {
              if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_2); __pyx_t_11++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              #endif
            } else {
              __pyx_t_2 = __pyx_t_12(__pyx_t_1);
              if (unlikely(!__pyx_t_2)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_2);
            }
            __Pyx_XDECREF_SET(__pyx_v_afile, __pyx_t_2);
            __pyx_t_2 = 0;

            /* "libopenzwave.pyx":412
 *             try:
 *                 for afile in os.listdir(pythonpath):
 *                     fullpath = os.path.join(pythonpath, afile)             # <<<<<<<<<<<<<<
 *                     if os.path.exists(os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)):
 *                         return os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)
 */
            __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_INCREF(__pyx_v_pythonpath);
            PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_pythonpath);
            __Pyx_GIVEREF(__pyx_v_pythonpath);
            __Pyx_INCREF(__pyx_v_afile);
            PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_afile);
            __Pyx_GIVEREF(__pyx_v_afile);
            __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF_SET(__pyx_v_fullpath, __pyx_t_13);
            __pyx_t_13 = 0;

            /* "libopenzwave.pyx":413
 *                 for afile in os.listdir(pythonpath):
 *                     fullpath = os.path.join(pythonpath, afile)
 *                     if os.path.exists(os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)):             # <<<<<<<<<<<<<<
 *                         return os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)
 *             except :
 */
            __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_path); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_exists); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_path); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_join); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PY_OZWAVE_CONFIG_DIRECTORY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_14 = PyTuple_New(2); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_INCREF(__pyx_v_fullpath);
            PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_fullpath);
            __Pyx_GIVEREF(__pyx_v_fullpath);
            PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_14);
            PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_2);
            __Pyx_GIVEREF(__pyx_t_2);
            __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_14, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (__pyx_t_5) {

              /* "libopenzwave.pyx":414
 *                     fullpath = os.path.join(pythonpath, afile)
 *                     if os.path.exists(os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)):
 *                         return os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)             # <<<<<<<<<<<<<<
 *             except :
 *                 pass
 */
              __Pyx_XDECREF(__pyx_r);
              __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_join); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
              __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_PY_OZWAVE_CONFIG_DIRECTORY); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_GOTREF(__pyx_t_14);
              __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_INCREF(__pyx_v_fullpath);
              PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_fullpath);
              __Pyx_GIVEREF(__pyx_v_fullpath);
              PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_14);
              __Pyx_GIVEREF(__pyx_t_14);
              __pyx_t_14 = 0;
              __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_13, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              __pyx_r = __pyx_t_14;
              __pyx_t_14 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              goto __pyx_L10_try_return;
            }
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L13_try_end;
        __pyx_L6_error:;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "libopenzwave.pyx":415
 *                     if os.path.exists(os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)):
 *                         return os.path.join(fullpath,PY_OZWAVE_CONFIG_DIRECTORY)
 *             except :             # <<<<<<<<<<<<<<
 *                 pass
 *     return None
 */
        /*except:*/ {
          PyErr_Restore(0,0,0);
          goto __pyx_L7_exception_handled;
        }
        __pyx_L10_try_return:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        goto __pyx_L0;
        __pyx_L7_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L13_try_end:;
      }
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "libopenzwave.pyx":417
 *             except :
 *                 pass
 *     return None             # <<<<<<<<<<<<<<
 * 
 * cdef class PyOptions:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "libopenzwave.pyx":392
 *     cdef DriverData data
 * 
 * def configPath():             # <<<<<<<<<<<<<<
 *     '''
 * Retrieve the config path. This directory hold the xml files.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("libopenzwave.configPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pythonpath);
  __Pyx_XDECREF(__pyx_v_afile);
  __Pyx_XDECREF(__pyx_v_fullpath);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":426
 *     cdef Options *options
 * 
 *     def create(self, char *a, char *b, char *c):             # <<<<<<<<<<<<<<
 *         """
 *         Create an option object used to start the manager
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_1create(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_create[] = "\n        Create an option object used to start the manager\n\n        :param a: The path of the config directory\n        :type a: str\n        :param b: The path of the user directory\n        :type b: str\n        :param c: The \"command line\" options of the openzwave library\n        :type c: str\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_1create(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_a;
  char *__pyx_v_b;
  char *__pyx_v_c;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_a = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_a) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_b = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_b) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_c = __Pyx_PyObject_AsString(values[2]); if (unlikely((!__pyx_v_c) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyOptions.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyOptions_create(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_create(struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self, char *__pyx_v_a, char *__pyx_v_b, char *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create", 0);

  /* "libopenzwave.pyx":438
 * 
 *         """
 *         self.options = Create(string(a), string(b), string(c))             # <<<<<<<<<<<<<<
 * 
 *     def lock(self):
 */
  __pyx_v_self->options = OpenZWave::Options::Create(std::string(__pyx_v_a), std::string(__pyx_v_b), std::string(__pyx_v_c));

  /* "libopenzwave.pyx":426
 *     cdef Options *options
 * 
 *     def create(self, char *a, char *b, char *c):             # <<<<<<<<<<<<<<
 *         """
 *         Create an option object used to start the manager
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":440
 *         self.options = Create(string(a), string(b), string(c))
 * 
 *     def lock(self):             # <<<<<<<<<<<<<<
 *         """
 *         Lock the options. Needed to start the manager
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_3lock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_2lock[] = "\n        Lock the options. Needed to start the manager\n\n        :return: The result of the operation.\n        :rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_3lock(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lock (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyOptions_2lock(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_2lock(struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lock", 0);

  /* "libopenzwave.pyx":448
 * 
 *         """
 *         return self.options.Lock()             # <<<<<<<<<<<<<<
 * 
 *     def addOptionBool(self, char *name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->options->Lock()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":440
 *         self.options = Create(string(a), string(b), string(c))
 * 
 *     def lock(self):             # <<<<<<<<<<<<<<
 *         """
 *         Lock the options. Needed to start the manager
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyOptions.lock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":450
 *         return self.options.Lock()
 * 
 *     def addOptionBool(self, char *name, value):             # <<<<<<<<<<<<<<
 *         """
 *         Add a boolean option.
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_5addOptionBool(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_4addOptionBool[] = "\n        Add a boolean option.\n\n        :param name: The name of the option.\n        :type name: str\n        :param value: The value of the option.\n        :type value: boolean\n        :return: The result of the operation.\n        :rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_5addOptionBool(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addOptionBool (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addOptionBool", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addOptionBool") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addOptionBool", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionBool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyOptions_4addOptionBool(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_4addOptionBool(struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self, char *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addOptionBool", 0);

  /* "libopenzwave.pyx":462
 * 
 *         """
 *         return self.options.AddOptionBool(string(name), value )             # <<<<<<<<<<<<<<
 * 
 *     def addOptionInt(self, char *name, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->options->AddOptionBool(std::string(__pyx_v_name), __pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":450
 *         return self.options.Lock()
 * 
 *     def addOptionBool(self, char *name, value):             # <<<<<<<<<<<<<<
 *         """
 *         Add a boolean option.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionBool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":464
 *         return self.options.AddOptionBool(string(name), value )
 * 
 *     def addOptionInt(self, char *name, value):             # <<<<<<<<<<<<<<
 *         """
 *         Add an integer option.
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_7addOptionInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_6addOptionInt[] = "\n        Add an integer option.\n\n        :param name: The name of the option.\n        :type name: str\n        :param value: The value of the option.\n        :type value: boolean\n        :return: The result of the operation.\n        :rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_7addOptionInt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addOptionInt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addOptionInt", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addOptionInt") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addOptionInt", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyOptions_6addOptionInt(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_6addOptionInt(struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self, char *__pyx_v_name, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addOptionInt", 0);

  /* "libopenzwave.pyx":476
 * 
 *         """
 *         return self.options.AddOptionInt(string(name), value )             # <<<<<<<<<<<<<<
 * 
 *     def addOptionString(self, char *name, char *value, append):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_int32_t(__pyx_v_value); if (unlikely((__pyx_t_1 == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->options->AddOptionInt(std::string(__pyx_v_name), __pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":464
 *         return self.options.AddOptionBool(string(name), value )
 * 
 *     def addOptionInt(self, char *name, value):             # <<<<<<<<<<<<<<
 *         """
 *         Add an integer option.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":478
 *         return self.options.AddOptionInt(string(name), value )
 * 
 *     def addOptionString(self, char *name, char *value, append):             # <<<<<<<<<<<<<<
 *         """
 *         Add a string option.
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_9addOptionString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_8addOptionString[] = "\n        Add a string option.\n\n        :param name: The name of the option.  Option names are case insensitive and must be unique.\n        :type name: str\n        :param value: The value of the option.\n        :type value: str\n        :param append: Setting append to true will cause values read from the command line\n         or XML file to be concatenated into a comma delimited set.  If _append is false,\n         newer values will overwrite older ones.\n        :type append: boolean\n        :return: The result of the operation.\n        :rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_9addOptionString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  char *__pyx_v_value;
  PyObject *__pyx_v_append = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addOptionString (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,&__pyx_n_s_append,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addOptionString", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_append)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addOptionString", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addOptionString") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_value = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_append = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addOptionString", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyOptions_8addOptionString(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self), __pyx_v_name, __pyx_v_value, __pyx_v_append);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_8addOptionString(struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self, char *__pyx_v_name, char *__pyx_v_value, PyObject *__pyx_v_append) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addOptionString", 0);

  /* "libopenzwave.pyx":494
 * 
 *         """
 *         return self.options.AddOptionString(string(name), string(value), append )             # <<<<<<<<<<<<<<
 * 
 *     def getConfigPath(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_append); if (unlikely((__pyx_t_1 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->options->AddOptionString(std::string(__pyx_v_name), std::string(__pyx_v_value), __pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":478
 *         return self.options.AddOptionInt(string(name), value )
 * 
 *     def addOptionString(self, char *name, char *value, append):             # <<<<<<<<<<<<<<
 *         """
 *         Add a string option.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyOptions.addOptionString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":496
 *         return self.options.AddOptionString(string(name), string(value), append )
 * 
 *     def getConfigPath(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getConfigPath:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_11getConfigPath(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyOptions_10getConfigPath[] = "\n.. _getConfigPath:\n\nRetrieve the config path. This directory hold the xml files.\n\n:return: A string containing the library config path or None.\n:rtype: str\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyOptions_11getConfigPath(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getConfigPath (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyOptions_10getConfigPath(((struct __pyx_obj_12libopenzwave_PyOptions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyOptions_10getConfigPath(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyOptions *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getConfigPath", 0);

  /* "libopenzwave.pyx":506
 * 
 *         '''
 *         return configPath()             # <<<<<<<<<<<<<<
 * 
 * cdef class RetAlloc:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_configPath); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":496
 *         return self.options.AddOptionString(string(name), string(value), append )
 * 
 *     def getConfigPath(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getConfigPath:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyOptions.getConfigPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":518
 *     cdef uint8_t* data
 * 
 *     def __cinit__(self,  uint32_t siz):             # <<<<<<<<<<<<<<
 *         self.siz = siz
 *         self.data = <uint8_t*>malloc(sizeof(uint8_t) * siz)
 */

/* Python wrapper */
static int __pyx_pw_12libopenzwave_8RetAlloc_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_12libopenzwave_8RetAlloc_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint32_t __pyx_v_siz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_siz,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_siz)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_siz = __Pyx_PyInt_As_uint32_t(values[0]); if (unlikely((__pyx_v_siz == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.RetAlloc.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_8RetAlloc___cinit__(((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_v_self), __pyx_v_siz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_12libopenzwave_8RetAlloc___cinit__(struct __pyx_obj_12libopenzwave_RetAlloc *__pyx_v_self, uint32_t __pyx_v_siz) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "libopenzwave.pyx":519
 * 
 *     def __cinit__(self,  uint32_t siz):
 *         self.siz = siz             # <<<<<<<<<<<<<<
 *         self.data = <uint8_t*>malloc(sizeof(uint8_t) * siz)
 * 
 */
  __pyx_v_self->siz = __pyx_v_siz;

  /* "libopenzwave.pyx":520
 *     def __cinit__(self,  uint32_t siz):
 *         self.siz = siz
 *         self.data = <uint8_t*>malloc(sizeof(uint8_t) * siz)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->data = ((uint8_t *)malloc(((sizeof(uint8_t)) * __pyx_v_siz)));

  /* "libopenzwave.pyx":518
 *     cdef uint8_t* data
 * 
 *     def __cinit__(self,  uint32_t siz):             # <<<<<<<<<<<<<<
 *         self.siz = siz
 *         self.data = <uint8_t*>malloc(sizeof(uint8_t) * siz)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":522
 *         self.data = <uint8_t*>malloc(sizeof(uint8_t) * siz)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.data)
 * 
 */

/* Python wrapper */
static void __pyx_pw_12libopenzwave_8RetAlloc_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_12libopenzwave_8RetAlloc_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_12libopenzwave_8RetAlloc_2__dealloc__(((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_12libopenzwave_8RetAlloc_2__dealloc__(struct __pyx_obj_12libopenzwave_RetAlloc *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "libopenzwave.pyx":523
 * 
 *     def __dealloc__(self):
 *         free(self.data)             # <<<<<<<<<<<<<<
 * 
 * cdef class PyManager:
 */
  free(__pyx_v_self->data);

  /* "libopenzwave.pyx":522
 *         self.data = <uint8_t*>malloc(sizeof(uint8_t) * siz)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         free(self.data)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "libopenzwave.pyx":675
 *     cdef object _controllerCallback
 * 
 *     def create(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _create:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_1create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_create[] = "\n.. _create:\n\nCreates the Manager singleton object.\n\nThe Manager provides the public interface to OpenZWave, exposing all the\nfunctionality required to add Z-Wave support to an application. There can be\nonly one Manager in an OpenZWave application.  An Options object must be\ncreated and Locked first, otherwise the call to Manager::Create will fail.\nOnce the Manager has been created, call AddWatcher to install a notification\ncallback handler, and then call the AddDriver method for each attached PC\nZ-Wave controller in turn.\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_1create(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_create(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_create(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create", 0);

  /* "libopenzwave.pyx":690
 * 
 *         '''
 *         self.manager = Create()             # <<<<<<<<<<<<<<
 *         PyEval_InitThreads()
 * #
 */
  __pyx_v_self->manager = OpenZWave::Manager::Create();

  /* "libopenzwave.pyx":691
 *         '''
 *         self.manager = Create()
 *         PyEval_InitThreads()             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  PyEval_InitThreads();

  /* "libopenzwave.pyx":675
 *     cdef object _controllerCallback
 * 
 *     def create(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _create:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":699
 * # polled every time the application starts.
 * #
 *     def writeConfig(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Saves the configuration of a PC Controller's Z-Wave network to the
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_3writeConfig(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_2writeConfig[] = "\nSaves the configuration of a PC Controller's Z-Wave network to the\napplication's user data folder.\n\nThis method does not normally need to be called, since OpenZWave will save the\nstate automatically during the shutdown process.  It is provided here only as\nan aid to development. The configuration of each PC Controller's Z-Wave network\nis stored in a separate file.  The filename consists of the 8 digit hexadecimal\nversion of the controller's Home ID, prefixed with the string \"zwcfg_*\".  This\nconvention allows OpenZWave to find the correct configuration file for a\ncontroller, even if it is attached to a different serial port, USB device path,\netc.\n\n:param homeid: The Home ID of the Z-Wave controller to save.\n:type homeid: int\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_3writeConfig(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeConfig (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_2writeConfig(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_2writeConfig(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeConfig", 0);

  /* "libopenzwave.pyx":717
 * 
 *         '''
 *         self.manager.WriteConfig(homeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->WriteConfig(__pyx_t_1);

  /* "libopenzwave.pyx":699
 * # polled every time the application starts.
 * #
 *     def writeConfig(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * Saves the configuration of a PC Controller's Z-Wave network to the
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.writeConfig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":724
 * # Methods for adding and removing drivers and obtaining basic controller information.
 * #
 *     def addDriver(self, char *serialport):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addDriver:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_5addDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_4addDriver[] = "\n.. _addDriver:\n\nCreates a new driver for a Z-Wave controller.\n\nThis method creates a Driver object for handling communications with a single\nZ-Wave controller.  In the background, the driver first tries to read\nconfiguration data saved during a previous run.  It then queries the controller\ndirectly for any missing information, and a refresh of the set of nodes that\nit controls.  Once this information has been received, a DriverReady\nnotification callback is sent, containing the Home ID of the controller.  This\nHome ID is required by most of the OpenZWave Manager class methods.\n\n:param serialport: The string used to open the controller.  On Windows this might be something like \"\\.\\COM3\", or on Linux \"/dev/ttyUSB0\".\n:type serialport: str\n:return: True if a new driver was created\n:rtype: bool\n:see: removeDriver_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_5addDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport) {
  char *__pyx_v_serialport;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addDriver (wrapper)", 0);
  assert(__pyx_arg_serialport); {
    __pyx_v_serialport = __Pyx_PyObject_AsString(__pyx_arg_serialport); if (unlikely((!__pyx_v_serialport) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addDriver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_4addDriver(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((char *)__pyx_v_serialport));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_4addDriver(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, char *__pyx_v_serialport) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addDriver", 0);

  /* "libopenzwave.pyx":745
 * 
 *         '''
 *         self.manager.AddDriver(string(serialport))             # <<<<<<<<<<<<<<
 * 
 *     def removeDriver(self, char *serialport):
 */
  __pyx_v_self->manager->AddDriver(std::string(__pyx_v_serialport));

  /* "libopenzwave.pyx":724
 * # Methods for adding and removing drivers and obtaining basic controller information.
 * #
 *     def addDriver(self, char *serialport):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addDriver:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":747
 *         self.manager.AddDriver(string(serialport))
 * 
 *     def removeDriver(self, char *serialport):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeDriver:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_7removeDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_6removeDriver[] = "\n.. _removeDriver:\n\nRemoves the driver for a Z-Wave controller, and closes the controller.\n\nDrivers do not need to be explicitly removed before calling Destroy - this is\nhandled automatically.\n\n:param serialport: The same string as was passed in the original call toAddDriver.\n:type serialport: str\n:return: True if the driver was removed, False if it could not be found.\n:rtype: bool\n:see: addDriver_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_7removeDriver(PyObject *__pyx_v_self, PyObject *__pyx_arg_serialport) {
  char *__pyx_v_serialport;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeDriver (wrapper)", 0);
  assert(__pyx_arg_serialport); {
    __pyx_v_serialport = __Pyx_PyObject_AsString(__pyx_arg_serialport); if (unlikely((!__pyx_v_serialport) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 747; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeDriver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_6removeDriver(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((char *)__pyx_v_serialport));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_6removeDriver(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, char *__pyx_v_serialport) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeDriver", 0);

  /* "libopenzwave.pyx":763
 * 
 *         '''
 *         self.manager.RemoveDriver(string(serialport))             # <<<<<<<<<<<<<<
 * 
 *     def getControllerInterfaceType(self, homeid):
 */
  __pyx_v_self->manager->RemoveDriver(std::string(__pyx_v_serialport));

  /* "libopenzwave.pyx":747
 *         self.manager.AddDriver(string(serialport))
 * 
 *     def removeDriver(self, char *serialport):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeDriver:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":765
 *         self.manager.RemoveDriver(string(serialport))
 * 
 *     def getControllerInterfaceType(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .._getControllerInterfaceType:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_9getControllerInterfaceType(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_8getControllerInterfaceType[] = "\n.._getControllerInterfaceType:\nRetrieve controller interface type, Unknown, Serial, Hid\n\n:param homeId: The Home ID of the Z-Wave controller.\n:return: The controller interface type\n:rtype: str\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_9getControllerInterfaceType(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getControllerInterfaceType (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_8getControllerInterfaceType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_8getControllerInterfaceType(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  enum OpenZWave::Driver::ControllerInterface __pyx_v_type;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getControllerInterfaceType", 0);

  /* "libopenzwave.pyx":775
 * 
 *         '''
 *         type = self.manager.GetControllerInterfaceType(homeid)             # <<<<<<<<<<<<<<
 *         return PyControllerInterface[type]
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_type = __pyx_v_self->manager->GetControllerInterfaceType(__pyx_t_1);

  /* "libopenzwave.pyx":776
 *         '''
 *         type = self.manager.GetControllerInterfaceType(homeid)
 *         return PyControllerInterface[type]             # <<<<<<<<<<<<<<
 * 
 *     def getControllerPath(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyControllerInterface); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromLong(__pyx_v_type); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 776; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":765
 *         self.manager.RemoveDriver(string(serialport))
 * 
 *     def getControllerInterfaceType(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .._getControllerInterfaceType:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getControllerInterfaceType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":778
 *         return PyControllerInterface[type]
 * 
 *     def getControllerPath(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .._getControllerPath:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_11getControllerPath(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_10getControllerPath[] = "\n.._getControllerPath:\nRetrieve controller interface path, name or path used to open the controller hardware\n\n:param homeId: The Home ID of the Z-Wave controller.\n:return: The controller interface type\n:rtype: str\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_11getControllerPath(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getControllerPath (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_10getControllerPath(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_10getControllerPath(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getControllerPath", 0);

  /* "libopenzwave.pyx":788
 * 
 *         '''
 *         cdef string c_string = self.manager.GetControllerPath(homeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 788; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetControllerPath(__pyx_t_1);

  /* "libopenzwave.pyx":789
 *         '''
 *         cdef string c_string = self.manager.GetControllerPath(homeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getControllerNodeId(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":778
 *         return PyControllerInterface[type]
 * 
 *     def getControllerPath(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .._getControllerPath:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getControllerPath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":791
 *         return c_string.c_str()
 * 
 *     def getControllerNodeId(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getControllerNodeId:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_13getControllerNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_12getControllerNodeId[] = "\n.. _getControllerNodeId:\n\nGet the node ID of the Z-Wave controller.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: The node ID of the Z-Wave controller\n:rtype: int\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_13getControllerNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getControllerNodeId (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_12getControllerNodeId(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_12getControllerNodeId(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getControllerNodeId", 0);

  /* "libopenzwave.pyx":803
 * 
 *         '''
 *         return self.manager.GetControllerNodeId(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def getSUCNodeId(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetControllerNodeId(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":791
 *         return c_string.c_str()
 * 
 *     def getControllerNodeId(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getControllerNodeId:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getControllerNodeId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":805
 *         return self.manager.GetControllerNodeId(homeid)
 * 
 *     def getSUCNodeId(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSUCNodeId:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_15getSUCNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_14getSUCNodeId[] = "\n.. _getSUCNodeId:\n\nGet the node ID of the Static Update Controller.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: the node ID of the Z-Wave controller.\n:rtype: int\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_15getSUCNodeId(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSUCNodeId (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_14getSUCNodeId(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_14getSUCNodeId(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSUCNodeId", 0);

  /* "libopenzwave.pyx":817
 * 
 *         '''
 *         return self.manager.GetSUCNodeId(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isPrimaryController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetSUCNodeId(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":805
 *         return self.manager.GetControllerNodeId(homeid)
 * 
 *     def getSUCNodeId(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSUCNodeId:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getSUCNodeId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":819
 *         return self.manager.GetSUCNodeId(homeid)
 * 
 *     def isPrimaryController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isPrimaryController:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_17isPrimaryController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_16isPrimaryController[] = "\n.. _isPrimaryController:\n\nQuery if the controller is a primary controller.\n\nThe primary controller is the main device used to configure and control a\nZ-Wave network.  There can only be one primary controller - all other\ncontrollers are secondary controllers.\n\nThe only difference between a primary and secondary controller is that the\nprimary is the only one that can be used to add or remove other devices.  For\nthis reason, it is usually better for the promary controller to be portable,\nsince most devices must be added when installed in their final location.\n\nCalls to BeginControllerCommand will fail if the controller is not the primary.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: True if it is a primary controller, False if not.\n:rtype: bool\n:see: isBridgeController_, isStaticUpdateController_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_17isPrimaryController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isPrimaryController (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_16isPrimaryController(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_16isPrimaryController(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPrimaryController", 0);

  /* "libopenzwave.pyx":843
 * 
 *         '''
 *         return self.manager.IsPrimaryController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isStaticUpdateController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsPrimaryController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 843; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":819
 *         return self.manager.GetSUCNodeId(homeid)
 * 
 *     def isPrimaryController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isPrimaryController:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.isPrimaryController", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":845
 *         return self.manager.IsPrimaryController(homeid)
 * 
 *     def isStaticUpdateController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isStaticUpdateController:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_19isStaticUpdateController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_18isStaticUpdateController[] = "\n.. _isStaticUpdateController:\n\nQuery if the controller is a static update controller (SUC).\n\nA Static Update Controller (SUC) is a controller that must never be moved in\nnormal operation and which can be used by other nodes to receive information\nabout network changes.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: True if it is a static update controller, False if not.\n:rtype: bool\n:see: isBridgeController_, isPrimaryController_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_19isStaticUpdateController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isStaticUpdateController (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_18isStaticUpdateController(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_18isStaticUpdateController(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isStaticUpdateController", 0);

  /* "libopenzwave.pyx":862
 * 
 *         '''
 *         return self.manager.IsStaticUpdateController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def isBridgeController(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsStaticUpdateController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 862; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":845
 *         return self.manager.IsPrimaryController(homeid)
 * 
 *     def isStaticUpdateController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isStaticUpdateController:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.isStaticUpdateController", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":864
 *         return self.manager.IsStaticUpdateController(homeid)
 * 
 *     def isBridgeController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isBridgeController:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_21isBridgeController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_20isBridgeController[] = "\n.. _isBridgeController:\n\nQuery if the controller is using the bridge controller library.\n\nA bridge controller is able to create virtual nodes that can be associated\nwith other controllers to enable events to be passed on.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: True if it is a bridge controller, False if not.\n:rtype: bool\n:see: isPrimaryController_, isStaticUpdateController_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_21isBridgeController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isBridgeController (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_20isBridgeController(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_20isBridgeController(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isBridgeController", 0);

  /* "libopenzwave.pyx":880
 * 
 *         '''
 *         return self.manager.IsBridgeController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def getLibraryVersion(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsBridgeController(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":864
 *         return self.manager.IsStaticUpdateController(homeid)
 * 
 *     def isBridgeController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isBridgeController:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.isBridgeController", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":882
 *         return self.manager.IsBridgeController(homeid)
 * 
 *     def getLibraryVersion(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getLibraryVersion:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_23getLibraryVersion(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_22getLibraryVersion[] = "\n.. _getLibraryVersion:\n\nGet the version of the Z-Wave API library used by a controller.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: A string containing the library version. For example, \"Z-Wave 2.48\".\n:rtype: str\n:see: getPythonLibraryVersion_, getLibraryTypeName_, getOzwLibraryVersion_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_23getLibraryVersion(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLibraryVersion (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_22getLibraryVersion(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_22getLibraryVersion(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLibraryVersion", 0);

  /* "libopenzwave.pyx":895
 * 
 *         '''
 *         cdef string c_string = self.manager.GetLibraryVersion(homeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetLibraryVersion(__pyx_t_1);

  /* "libopenzwave.pyx":896
 *         '''
 *         cdef string c_string = self.manager.GetLibraryVersion(homeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getPythonLibraryVersion(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":882
 *         return self.manager.IsBridgeController(homeid)
 * 
 *     def getLibraryVersion(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getLibraryVersion:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getLibraryVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":898
 *         return c_string.c_str()
 * 
 *     def getPythonLibraryVersion(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPythonLibraryVersion:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_25getPythonLibraryVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_24getPythonLibraryVersion[] = "\n.. _getPythonLibraryVersion:\n\nGet the version of the python library.\n\n:return: A string containing the python library version. For example, \"python-openzwave version 0.1\".\n:rtype: str\n:see: getLibraryTypeName_, getLibraryVersion_, getOzwLibraryVersion_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_25getPythonLibraryVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPythonLibraryVersion (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_24getPythonLibraryVersion(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_24getPythonLibraryVersion(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPythonLibraryVersion", 0);

  /* "libopenzwave.pyx":909
 * 
 *         '''
 *         return "python-openzwave version %s" % PYLIBRARY             # <<<<<<<<<<<<<<
 * 
 *     def getPythonLibraryVersionNumber(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PYLIBRARY); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_python_openzwave_version_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 909; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":898
 *         return c_string.c_str()
 * 
 *     def getPythonLibraryVersion(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPythonLibraryVersion:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getPythonLibraryVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":911
 *         return "python-openzwave version %s" % PYLIBRARY
 * 
 *     def getPythonLibraryVersionNumber(self):             # <<<<<<<<<<<<<<
 *         """
 * .. _getPythonLibraryVersionNumber:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_27getPythonLibraryVersionNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_26getPythonLibraryVersionNumber[] = "\n.. _getPythonLibraryVersionNumber:\n\nGet the python library version number\n\n:return: A string containing the python library version. For example, \"0.1\".\n:rtype: str\n:see: getLibraryTypeName_, getLibraryVersion_, getOzwLibraryVersion_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_27getPythonLibraryVersionNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPythonLibraryVersionNumber (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_26getPythonLibraryVersionNumber(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_26getPythonLibraryVersionNumber(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPythonLibraryVersionNumber", 0);

  /* "libopenzwave.pyx":922
 * 
 *         """
 *         return PYLIBRARY             # <<<<<<<<<<<<<<
 * 
 *     def getOzwLibraryVersion(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PYLIBRARY); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 922; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":911
 *         return "python-openzwave version %s" % PYLIBRARY
 * 
 *     def getPythonLibraryVersionNumber(self):             # <<<<<<<<<<<<<<
 *         """
 * .. _getPythonLibraryVersionNumber:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getPythonLibraryVersionNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":924
 *         return PYLIBRARY
 * 
 *     def getOzwLibraryVersion(self):             # <<<<<<<<<<<<<<
 *         """
 * .. _getOzwLibraryVersion:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_29getOzwLibraryVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_28getOzwLibraryVersion[] = "\n.. _getOzwLibraryVersion:\n\nGet a string containing the openzwave library version.\n\n:return: A string containing the library type.\n:rtype: str\n:see: getLibraryVersion_, getPythonLibraryVersion_, getLibraryTypeName_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_29getOzwLibraryVersion(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOzwLibraryVersion (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_28getOzwLibraryVersion(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_28getOzwLibraryVersion(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOzwLibraryVersion", 0);

  /* "libopenzwave.pyx":935
 * 
 *         """
 *         return "OpenZWave version %s" %(ozw_version_string)             # <<<<<<<<<<<<<<
 * 
 *     def getOzwLibraryVersionNumber(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_to_py_(ozw_version_string); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_OpenZWave_version_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 935; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":924
 *         return PYLIBRARY
 * 
 *     def getOzwLibraryVersion(self):             # <<<<<<<<<<<<<<
 *         """
 * .. _getOzwLibraryVersion:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getOzwLibraryVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":937
 *         return "OpenZWave version %s" %(ozw_version_string)
 * 
 *     def getOzwLibraryVersionNumber(self):             # <<<<<<<<<<<<<<
 *         '''
 * _getOzwLibraryVersionNumber: Get the openzwave library version number.
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_31getOzwLibraryVersionNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_30getOzwLibraryVersionNumber[] = "\n_getOzwLibraryVersionNumber: Get the openzwave library version number.\n\n:return: A string containing the library type.\n:rtype: str\n:see: getLibraryVersion_, getPythonLibraryVersion_, getLibraryTypeName_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_31getOzwLibraryVersionNumber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOzwLibraryVersionNumber (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_30getOzwLibraryVersionNumber(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_30getOzwLibraryVersionNumber(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOzwLibraryVersionNumber", 0);

  /* "libopenzwave.pyx":946
 * 
 *         '''
 *         return "%d.%d.%d" %(ozw_vers_major, ozw_vers_minor, ozw_vers_revision)             # <<<<<<<<<<<<<<
 * 
 *     def getLibraryTypeName(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint16_t(ozw_vers_major); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_uint16_t(ozw_vers_minor); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_uint16_t(ozw_vers_revision); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_d_d_d, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 946; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":937
 *         return "OpenZWave version %s" %(ozw_version_string)
 * 
 *     def getOzwLibraryVersionNumber(self):             # <<<<<<<<<<<<<<
 *         '''
 * _getOzwLibraryVersionNumber: Get the openzwave library version number.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getOzwLibraryVersionNumber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":948
 *         return "%d.%d.%d" %(ozw_vers_major, ozw_vers_minor, ozw_vers_revision)
 * 
 *     def getLibraryTypeName(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getLibraryTypeName:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_33getLibraryTypeName(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_32getLibraryTypeName[] = "\n.. _getLibraryTypeName:\n\nGet a string containing the Z-Wave API library type used by a controller.\n\nThe possible library types are:\n\n    - Static Controller\n    - Controller\n    - Enhanced Slave\n    - Slave\n    - Installer\n    - Routing Slave\n    - Bridge Controller\n    - Device Under Test\n\nThe controller should never return a slave library type.  For a more efficient\ntest of whether a controller is a Bridge Controller, use the IsBridgeController\nmethod.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: A string containing the library type.\n:rtype: str\n:see: getLibraryVersion_, getPythonLibraryVersion_, getOzwLibraryVersion_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_33getLibraryTypeName(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLibraryTypeName (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_32getLibraryTypeName(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_32getLibraryTypeName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLibraryTypeName", 0);

  /* "libopenzwave.pyx":976
 * 
 *         '''
 *         cdef string c_string = self.manager.GetLibraryTypeName(homeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 976; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetLibraryTypeName(__pyx_t_1);

  /* "libopenzwave.pyx":977
 *         '''
 *         cdef string c_string = self.manager.GetLibraryTypeName(homeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getSendQueueCount(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 977; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":948
 *         return "%d.%d.%d" %(ozw_vers_major, ozw_vers_minor, ozw_vers_revision)
 * 
 *     def getLibraryTypeName(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getLibraryTypeName:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getLibraryTypeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":979
 *         return c_string.c_str()
 * 
 *     def getSendQueueCount(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSendQueueCount:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_35getSendQueueCount(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_34getSendQueueCount[] = "\n.. _getSendQueueCount:\n\nGet count of messages in the outgoing send queue.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: Message count\n:rtype: int\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_35getSendQueueCount(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSendQueueCount (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_34getSendQueueCount(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_34getSendQueueCount(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSendQueueCount", 0);

  /* "libopenzwave.pyx":991
 * 
 *         '''
 *         return self.manager.GetSendQueueCount(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def logDriverStatistics(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_self->manager->GetSendQueueCount(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 991; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":979
 *         return c_string.c_str()
 * 
 *     def getSendQueueCount(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSendQueueCount:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getSendQueueCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":993
 *         return self.manager.GetSendQueueCount(homeid)
 * 
 *     def logDriverStatistics(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _logDriverStatistics:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_37logDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_36logDriverStatistics[] = "\n.. _logDriverStatistics:\n\nSend current driver statistics to the log file.\n\n:param homeid: The Home ID of the Z-Wave controller.\n:type homeid: int\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_37logDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logDriverStatistics (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_36logDriverStatistics(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_36logDriverStatistics(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("logDriverStatistics", 0);

  /* "libopenzwave.pyx":1003
 * 
 *         '''
 *         self.manager.LogDriverStatistics(homeid)             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1003; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->LogDriverStatistics(__pyx_t_1);

  /* "libopenzwave.pyx":993
 *         return self.manager.GetSendQueueCount(homeid)
 * 
 *     def logDriverStatistics(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _logDriverStatistics:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.logDriverStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1008
 * # Statistics interface
 * #-----------------------------------------------------------------------------
 *     def getDriverStatistics(self, homeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getDriverStatistics:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_39getDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeId); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_38getDriverStatistics[] = "\n.. _getDriverStatistics:\n\nRetrieve statistics from driver.\n\nStatistics:\n\n    * SOFCnt : Number of SOF bytes received\n    * ACKWaiting : Number of unsolicited messages while waiting for an ACK\n    * readAborts : Number of times read were aborted due to timeouts\n    * badChecksum : Number of bad checksums\n    * readCnt : Number of messages successfully read\n    * writeCnt : Number of messages successfully sent\n    * CANCnt : Number of CAN bytes received\n    * NAKCnt : Number of NAK bytes received\n    * ACKCnt : Number of ACK bytes received\n    * OOFCnt : Number of bytes out of framing\n    * dropped : Number of messages dropped & not delivered\n    * retries : Number of messages retransmitted\n    * callbacks : Number of unexpected callbacks\n    * badroutes : Number of failed messages due to bad route response\n    * noack : Number of no ACK returned errors\n    * netbusy : Number of network busy/failure messages\n    * nondelivery : Number of messages not delivered to network\n    * routedbusy : Number of messages received with routed busy status\n    * broadcastReadCnt : Number of broadcasts read\n    * broadcastWriteCnt : Number of broadcasts sent\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:param data: Pointer to structure DriverData to return values\n:type data: int\n:return: A dict containing statistics of the driver.\n:rtype: dict()\n:see: getNodeStatistics_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_39getDriverStatistics(PyObject *__pyx_v_self, PyObject *__pyx_v_homeId) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDriverStatistics (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_38getDriverStatistics(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeId));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_38getDriverStatistics(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId) {
  __pyx_t_6driver_DriverData_t __pyx_v_data;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDriverStatistics", 0);

  /* "libopenzwave.pyx":1047
 *        '''
 *         cdef DriverData_t data
 *         self.manager.GetDriverStatistics( homeId, &data );             # <<<<<<<<<<<<<<
 *         ret = {}
 *         ret['SOFCnt'] = data.m_SOFCnt
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1047; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->GetDriverStatistics(__pyx_t_1, (&__pyx_v_data));

  /* "libopenzwave.pyx":1048
 *         cdef DriverData_t data
 *         self.manager.GetDriverStatistics( homeId, &data );
 *         ret = {}             # <<<<<<<<<<<<<<
 *         ret['SOFCnt'] = data.m_SOFCnt
 *         ret['ACKWaiting'] = data.m_ACKWaiting
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1048; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1049
 *         self.manager.GetDriverStatistics( homeId, &data );
 *         ret = {}
 *         ret['SOFCnt'] = data.m_SOFCnt             # <<<<<<<<<<<<<<
 *         ret['ACKWaiting'] = data.m_ACKWaiting
 *         ret['readAborts'] = data.m_readAborts
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_SOFCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_SOFCnt, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1049; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1050
 *         ret = {}
 *         ret['SOFCnt'] = data.m_SOFCnt
 *         ret['ACKWaiting'] = data.m_ACKWaiting             # <<<<<<<<<<<<<<
 *         ret['readAborts'] = data.m_readAborts
 *         ret['badChecksum'] = data.m_badChecksum
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_ACKWaiting); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_ACKWaiting, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1050; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1051
 *         ret['SOFCnt'] = data.m_SOFCnt
 *         ret['ACKWaiting'] = data.m_ACKWaiting
 *         ret['readAborts'] = data.m_readAborts             # <<<<<<<<<<<<<<
 *         ret['badChecksum'] = data.m_badChecksum
 *         ret['readCnt'] = data.m_readCnt
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_readAborts); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_readAborts, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1051; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1052
 *         ret['ACKWaiting'] = data.m_ACKWaiting
 *         ret['readAborts'] = data.m_readAborts
 *         ret['badChecksum'] = data.m_badChecksum             # <<<<<<<<<<<<<<
 *         ret['readCnt'] = data.m_readCnt
 *         ret['writeCnt'] = data.m_writeCnt
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_badChecksum); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_badChecksum, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1052; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1053
 *         ret['readAborts'] = data.m_readAborts
 *         ret['badChecksum'] = data.m_badChecksum
 *         ret['readCnt'] = data.m_readCnt             # <<<<<<<<<<<<<<
 *         ret['writeCnt'] = data.m_writeCnt
 *         ret['CANCnt'] = data.m_CANCnt
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_readCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_readCnt, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1053; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1054
 *         ret['badChecksum'] = data.m_badChecksum
 *         ret['readCnt'] = data.m_readCnt
 *         ret['writeCnt'] = data.m_writeCnt             # <<<<<<<<<<<<<<
 *         ret['CANCnt'] = data.m_CANCnt
 *         ret['NAKCnt'] = data.m_NAKCnt
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_writeCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_writeCnt, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1055
 *         ret['readCnt'] = data.m_readCnt
 *         ret['writeCnt'] = data.m_writeCnt
 *         ret['CANCnt'] = data.m_CANCnt             # <<<<<<<<<<<<<<
 *         ret['NAKCnt'] = data.m_NAKCnt
 *         ret['ACKCnt'] = data.m_ACKCnt
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_CANCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_CANCnt, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1055; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1056
 *         ret['writeCnt'] = data.m_writeCnt
 *         ret['CANCnt'] = data.m_CANCnt
 *         ret['NAKCnt'] = data.m_NAKCnt             # <<<<<<<<<<<<<<
 *         ret['ACKCnt'] = data.m_ACKCnt
 *         ret['OOFCnt'] = data.m_OOFCnt
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_NAKCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_NAKCnt, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1057
 *         ret['CANCnt'] = data.m_CANCnt
 *         ret['NAKCnt'] = data.m_NAKCnt
 *         ret['ACKCnt'] = data.m_ACKCnt             # <<<<<<<<<<<<<<
 *         ret['OOFCnt'] = data.m_OOFCnt
 *         ret['dropped'] = data.m_dropped
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_ACKCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_ACKCnt, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1058
 *         ret['NAKCnt'] = data.m_NAKCnt
 *         ret['ACKCnt'] = data.m_ACKCnt
 *         ret['OOFCnt'] = data.m_OOFCnt             # <<<<<<<<<<<<<<
 *         ret['dropped'] = data.m_dropped
 *         ret['retries'] = data.m_retries
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_OOFCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_OOFCnt, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1059
 *         ret['ACKCnt'] = data.m_ACKCnt
 *         ret['OOFCnt'] = data.m_OOFCnt
 *         ret['dropped'] = data.m_dropped             # <<<<<<<<<<<<<<
 *         ret['retries'] = data.m_retries
 *         ret['callbacks'] = data.m_callbacks
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_dropped); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_dropped, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1059; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1060
 *         ret['OOFCnt'] = data.m_OOFCnt
 *         ret['dropped'] = data.m_dropped
 *         ret['retries'] = data.m_retries             # <<<<<<<<<<<<<<
 *         ret['callbacks'] = data.m_callbacks
 *         ret['badroutes'] = data.m_badroutes
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_retries); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_retries, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1060; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1061
 *         ret['dropped'] = data.m_dropped
 *         ret['retries'] = data.m_retries
 *         ret['callbacks'] = data.m_callbacks             # <<<<<<<<<<<<<<
 *         ret['badroutes'] = data.m_badroutes
 *         ret['noack'] = data.m_noack
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_callbacks); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_callbacks, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1061; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1062
 *         ret['retries'] = data.m_retries
 *         ret['callbacks'] = data.m_callbacks
 *         ret['badroutes'] = data.m_badroutes             # <<<<<<<<<<<<<<
 *         ret['noack'] = data.m_noack
 *         ret['netbusy'] = data.m_netbusy
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_badroutes); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1062; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_badroutes, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1062; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1063
 *         ret['callbacks'] = data.m_callbacks
 *         ret['badroutes'] = data.m_badroutes
 *         ret['noack'] = data.m_noack             # <<<<<<<<<<<<<<
 *         ret['netbusy'] = data.m_netbusy
 *         ret['nondelivery'] = data.m_nondelivery
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_noack); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_noack, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1063; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1064
 *         ret['badroutes'] = data.m_badroutes
 *         ret['noack'] = data.m_noack
 *         ret['netbusy'] = data.m_netbusy             # <<<<<<<<<<<<<<
 *         ret['nondelivery'] = data.m_nondelivery
 *         ret['routedbusy'] = data.m_routedbusy
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_netbusy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_netbusy, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1064; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1065
 *         ret['noack'] = data.m_noack
 *         ret['netbusy'] = data.m_netbusy
 *         ret['nondelivery'] = data.m_nondelivery             # <<<<<<<<<<<<<<
 *         ret['routedbusy'] = data.m_routedbusy
 *         ret['broadcastReadCnt'] = data.m_broadcastReadCnt
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_nondelivery); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_nondelivery, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1065; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1066
 *         ret['netbusy'] = data.m_netbusy
 *         ret['nondelivery'] = data.m_nondelivery
 *         ret['routedbusy'] = data.m_routedbusy             # <<<<<<<<<<<<<<
 *         ret['broadcastReadCnt'] = data.m_broadcastReadCnt
 *         ret['broadcastWriteCnt'] = data.m_broadcastWriteCnt
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_routedbusy); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_routedbusy, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1067
 *         ret['nondelivery'] = data.m_nondelivery
 *         ret['routedbusy'] = data.m_routedbusy
 *         ret['broadcastReadCnt'] = data.m_broadcastReadCnt             # <<<<<<<<<<<<<<
 *         ret['broadcastWriteCnt'] = data.m_broadcastWriteCnt
 *         return ret
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_broadcastReadCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_broadcastReadCnt, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1067; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1068
 *         ret['routedbusy'] = data.m_routedbusy
 *         ret['broadcastReadCnt'] = data.m_broadcastReadCnt
 *         ret['broadcastWriteCnt'] = data.m_broadcastWriteCnt             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_broadcastWriteCnt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_broadcastWriteCnt, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1068; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "libopenzwave.pyx":1069
 *         ret['broadcastReadCnt'] = data.m_broadcastReadCnt
 *         ret['broadcastWriteCnt'] = data.m_broadcastWriteCnt
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1008
 * # Statistics interface
 * #-----------------------------------------------------------------------------
 *     def getDriverStatistics(self, homeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getDriverStatistics:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getDriverStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1080
 * 
 * 
 *     def testNetworkNode(self, homeid, nodeid, count):             # <<<<<<<<<<<<<<
 *         '''
 * .. _testNetworkNode:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_41testNetworkNode(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_40testNetworkNode[] = "\n.. _testNetworkNode:\n\nTest network node.\n\nSends a series of messages to a network node for testing network reliability.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param nodeid: The ID of the node to query.\n:type nodeid: int\n:param count: This is the number of test messages to send.\n:type count: int\n:see: testNetwork_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_41testNetworkNode(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_count = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("testNetworkNode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_count,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("testNetworkNode", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("testNetworkNode", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "testNetworkNode") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_count = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("testNetworkNode", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1080; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.testNetworkNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_40testNetworkNode(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_40testNetworkNode(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint32_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("testNetworkNode", 0);

  /* "libopenzwave.pyx":1097
 * 
 *         '''
 *         self.manager.TestNetworkNode(homeid, nodeid, count)             # <<<<<<<<<<<<<<
 * 
 *     def testNetwork(self, homeid, count):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint32_t(__pyx_v_count); if (unlikely((__pyx_t_3 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1097; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->TestNetworkNode(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "libopenzwave.pyx":1080
 * 
 * 
 *     def testNetworkNode(self, homeid, nodeid, count):             # <<<<<<<<<<<<<<
 *         '''
 * .. _testNetworkNode:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.testNetworkNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1099
 *         self.manager.TestNetworkNode(homeid, nodeid, count)
 * 
 *     def testNetwork(self, homeid, count):             # <<<<<<<<<<<<<<
 *         '''
 * .. _testNetwork:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_43testNetwork(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_42testNetwork[] = "\n.. _testNetwork:\n\nTest network.\n\nSends a series of messages to every node on the network for testing network reliability.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param count: This is the number of test messages to send.\n:type count: int\n:see: testNetworkNode_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_43testNetwork(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_count = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("testNetwork (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_count,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("testNetwork", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "testNetwork") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_count = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("testNetwork", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1099; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.testNetwork", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_42testNetwork(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_count);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_42testNetwork(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("testNetwork", 0);

  /* "libopenzwave.pyx":1114
 * 
 *         '''
 *         self.manager.TestNetwork(homeid, count)             # <<<<<<<<<<<<<<
 * 
 *     def healNetworkNode(self, homeid, nodeid,  upNodeRoute = False):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint32_t(__pyx_v_count); if (unlikely((__pyx_t_2 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->TestNetwork(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1099
 *         self.manager.TestNetworkNode(homeid, nodeid, count)
 * 
 *     def testNetwork(self, homeid, count):             # <<<<<<<<<<<<<<
 *         '''
 * .. _testNetwork:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.testNetwork", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1116
 *         self.manager.TestNetwork(homeid, count)
 * 
 *     def healNetworkNode(self, homeid, nodeid,  upNodeRoute = False):             # <<<<<<<<<<<<<<
 *         '''
 * .. _healNetworkNode:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_45healNetworkNode(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_44healNetworkNode[] = "\n.. _healNetworkNode:\n\nHeal network node by requesting the node rediscover their neighbors.\nSends a ControllerCommand_RequestNodeNeighborUpdate to the node.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param nodeid: The ID of the node to query.\n:type nodeid: int\n:param upNodeRoute: Optional Whether to perform return routes initialization. (default = false).\n:type upNodeRoute: bool\n:see: healNetwork_\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_45healNetworkNode(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_upNodeRoute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("healNetworkNode (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_upNodeRoute,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("healNetworkNode", 0, 2, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_upNodeRoute);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "healNetworkNode") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_upNodeRoute = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("healNetworkNode", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.healNetworkNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_44healNetworkNode(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_upNodeRoute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_44healNetworkNode(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_upNodeRoute) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint32_t __pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("healNetworkNode", 0);

  /* "libopenzwave.pyx":1131
 * :see: healNetwork_
 *         '''
 *         self.manager.HealNetworkNode(homeid, nodeid,  upNodeRoute)             # <<<<<<<<<<<<<<
 * 
 *     def healNetwork(self, homeid, upNodeRoute = False):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint32_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_upNodeRoute); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->HealNetworkNode(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "libopenzwave.pyx":1116
 *         self.manager.TestNetwork(homeid, count)
 * 
 *     def healNetworkNode(self, homeid, nodeid,  upNodeRoute = False):             # <<<<<<<<<<<<<<
 *         '''
 * .. _healNetworkNode:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.healNetworkNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1133
 *         self.manager.HealNetworkNode(homeid, nodeid,  upNodeRoute)
 * 
 *     def healNetwork(self, homeid, upNodeRoute = False):             # <<<<<<<<<<<<<<
 *         '''
 * .. _healNetwork:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_47healNetwork(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_46healNetwork[] = "\n.. _healNetwork:\n\nHeal network by requesting nodes rediscover their neighbors.\nSends a ControllerCommand_RequestNodeNeighborUpdate to every node.\nCan take a while on larger networks.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param upNodeRoute: Optional Whether to perform return routes initialization. (default = false).\n:type upNodeRoute: bool\n:see: healNetworkNode_\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_47healNetwork(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_upNodeRoute = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("healNetwork (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_upNodeRoute,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_upNodeRoute);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "healNetwork") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_homeid = values[0];
    __pyx_v_upNodeRoute = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("healNetwork", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1133; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.healNetwork", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_46healNetwork(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_upNodeRoute);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_46healNetwork(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_upNodeRoute) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  bool __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("healNetwork", 0);

  /* "libopenzwave.pyx":1147
 * :see: healNetworkNode_
 *         '''
 *         self.manager.HealNetwork(homeid, upNodeRoute)             # <<<<<<<<<<<<<<
 * 
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_upNodeRoute); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->HealNetwork(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1133
 *         self.manager.HealNetworkNode(homeid, nodeid,  upNodeRoute)
 * 
 *     def healNetwork(self, homeid, upNodeRoute = False):             # <<<<<<<<<<<<<<
 *         '''
 * .. _healNetwork:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.healNetwork", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1156
 * # detect status changes.
 * #
 *     def getPollInterval(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPollInterval:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_49getPollInterval(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_48getPollInterval[] = "\n.. _getPollInterval:\n\nGet the time period between polls of a nodes state\n\n:return: The number of milliseconds between polls\n:rtype: int\n:see: setPollInterval_, enablePoll_, isPolled_, setPollIntensity_, disablePoll_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_49getPollInterval(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPollInterval (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_48getPollInterval(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_48getPollInterval(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPollInterval", 0);

  /* "libopenzwave.pyx":1167
 * 
 *         '''
 *         return self.manager.GetPollInterval()             # <<<<<<<<<<<<<<
 * 
 *     def setPollInterval(self, milliseconds, bIntervalBetweenPolls ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->manager->GetPollInterval()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1156
 * # detect status changes.
 * #
 *     def getPollInterval(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPollInterval:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getPollInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1169
 *         return self.manager.GetPollInterval()
 * 
 *     def setPollInterval(self, milliseconds, bIntervalBetweenPolls ):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setPollInterval:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_51setPollInterval(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_50setPollInterval[] = "\n.. _setPollInterval:\n\nSet the time period between polls of a nodes state.\n\nDue to patent concerns, some devices do not report state changes automatically\nto the controller.  These devices need to have their state polled at regular\nintervals.  The length of the interval is the same for all devices.  To even\nout the Z-Wave network traffic generated by polling, OpenZWave divides the\npolling interval by the number of devices that have polling enabled, and polls\neach in turn.  It is recommended that if possible, the interval should not be\nset shorter than the number of polled devices in seconds (so that the network\ndoes not have to cope with more than one poll per second).\n\n:param milliseconds: The length of the polling interval in milliseconds.\n:type milliseconds: int\n:param bIntervalBetweenPolls: If true, the library intersperses m_pollInterval between polls.\n                                               If false, the library attempts to complete all polls within m_pollInterval\n:type bIntervalBetweenPolls: bool\n:see: getPollInterval_, enablePoll_, isPolled_, setPollIntensity_, disablePoll_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_51setPollInterval(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_milliseconds = 0;
  PyObject *__pyx_v_bIntervalBetweenPolls = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPollInterval (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_milliseconds,&__pyx_n_s_bIntervalBetweenPolls,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_milliseconds)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bIntervalBetweenPolls)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setPollInterval", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setPollInterval") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_milliseconds = values[0];
    __pyx_v_bIntervalBetweenPolls = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPollInterval", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_50setPollInterval(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_milliseconds, __pyx_v_bIntervalBetweenPolls);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_50setPollInterval(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_milliseconds, PyObject *__pyx_v_bIntervalBetweenPolls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPollInterval", 0);

  /* "libopenzwave.pyx":1192
 * 
 *         '''
 *         self.manager.SetPollInterval(milliseconds, bIntervalBetweenPolls)             # <<<<<<<<<<<<<<
 * 
 *     def enablePoll(self, id, intensity = 1):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_milliseconds); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SetPollInterval(__pyx_t_1, __pyx_v_bIntervalBetweenPolls);

  /* "libopenzwave.pyx":1169
 *         return self.manager.GetPollInterval()
 * 
 *     def setPollInterval(self, milliseconds, bIntervalBetweenPolls ):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setPollInterval:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollInterval", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1194
 *         self.manager.SetPollInterval(milliseconds, bIntervalBetweenPolls)
 * 
 *     def enablePoll(self, id, intensity = 1):             # <<<<<<<<<<<<<<
 *         '''
 * .. _enablePoll:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_53enablePoll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_52enablePoll[] = "\n.. _enablePoll:\n\nEnable the polling of a device's state.\n\n:param id: The ID of the value to start polling\n:type id: int\n:param intensity: The intensity of the poll\n:type intensity: int\n:return: True if polling was enabled.\n:rtype: bool\n:see: getPollInterval_, setPollInterval_, isPolled_, setPollIntensity_, disablePoll_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_53enablePoll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_intensity = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("enablePoll (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_intensity,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_1);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_intensity);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "enablePoll") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_id = values[0];
    __pyx_v_intensity = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("enablePoll", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1194; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.enablePoll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_52enablePoll(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_id, __pyx_v_intensity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_52enablePoll(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_intensity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("enablePoll", 0);

  /* "libopenzwave.pyx":1209
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.EnablePoll(values_map.at(id), intensity)
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1209; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1210
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.EnablePoll(values_map.at(id), intensity)             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_intensity); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->EnablePoll(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1212
 *             return self.manager.EnablePoll(values_map.at(id), intensity)
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def disablePoll(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":1194
 *         self.manager.SetPollInterval(milliseconds, bIntervalBetweenPolls)
 * 
 *     def enablePoll(self, id, intensity = 1):             # <<<<<<<<<<<<<<
 *         '''
 * .. _enablePoll:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.enablePoll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1214
 *             return False
 * 
 *     def disablePoll(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _disablePoll:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_55disablePoll(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_54disablePoll[] = "\n.. _disablePoll:\n\nDisable polling of a value.\n\n:param id: The ID of the value to disable polling.\n:type id: int\n:return: True if polling was disabled.\n:rtype: bool\n:see: getPollInterval_, setPollInterval_, enablePoll_, isPolled_, setPollIntensity_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_55disablePoll(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("disablePoll (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_54disablePoll(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_54disablePoll(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("disablePoll", 0);

  /* "libopenzwave.pyx":1227
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.DisablePoll(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1228
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.DisablePoll(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->DisablePoll(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1230
 *             return self.manager.DisablePoll(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def isPolled(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":1214
 *             return False
 * 
 *     def disablePoll(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _disablePoll:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.disablePoll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1232
 *             return False
 * 
 *     def isPolled(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isPolled:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_57isPolled(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_56isPolled[] = "\n.. _isPolled:\n\nCheck polling status of a value\n\n:param id: The ID of the value to check polling.\n:type id: int\n:return: True if polling is active.\n:rtype: bool\n:see: getPollInterval_, setPollInterval_, enablePoll_, setPollIntensity_, disablePoll_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_57isPolled(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isPolled (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_56isPolled(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_56isPolled(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isPolled", 0);

  /* "libopenzwave.pyx":1245
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.isPolled(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1246
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.isPolled(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->isPolled(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1248
 *             return self.manager.isPolled(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def getPollIntensity(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":1232
 *             return False
 * 
 *     def isPolled(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isPolled:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isPolled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1250
 *             return False
 * 
 *     def getPollIntensity(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPollIntensity:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_59getPollIntensity(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_58getPollIntensity[] = "\n.. _getPollIntensity:\n\nGet the intensity with which this value is polled (0=none, 1=every time through the list, 2-every other time, etc).\n:param id: The ID of a value.\n:type id: int\n:return: A integer containing the poll intensity\n:rtype: int\n:see: getPollInterval_, setPollInterval_, enablePoll_, setPollIntensity_, disablePoll_, isPolled_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_59getPollIntensity(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPollIntensity (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_58getPollIntensity(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_58getPollIntensity(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  uint8_t __pyx_v_intensity;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getPollIntensity", 0);

  /* "libopenzwave.pyx":1262
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             intensity = self.manager.GetPollIntensity(values_map.at(id))
 *             return intensity
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1263
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             intensity = self.manager.GetPollIntensity(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return intensity
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_intensity = __pyx_v_self->manager->GetPollIntensity(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "libopenzwave.pyx":1264
 *         if values_map.find(id) != values_map.end():
 *             intensity = self.manager.GetPollIntensity(values_map.at(id))
 *             return intensity             # <<<<<<<<<<<<<<
 *         else :
 *             return 0
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_intensity); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":1266
 *             return intensity
 *         else :
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     def setPollIntensity(self, id, intensity):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":1250
 *             return False
 * 
 *     def getPollIntensity(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getPollIntensity:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getPollIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1268
 *             return 0
 * 
 *     def setPollIntensity(self, id, intensity):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setPollIntensity:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_61setPollIntensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_60setPollIntensity[] = "\n.. _setPollIntensity:\n\nSet the frequency of polling (0=none, 1=every time through the set, 2-every other time, etc)\n\n:param id: The ID of the value whose intensity should be set\n:type id: int\n:param intensity: the intensity of the poll\n:type intensity: int\n:see: getPollInterval_, setPollInterval_, enablePoll_, isPolled_, disablePoll_, getPollIntensity_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_61setPollIntensity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_intensity = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setPollIntensity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_intensity,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_intensity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setPollIntensity", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setPollIntensity") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_id = values[0];
    __pyx_v_intensity = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setPollIntensity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1268; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_60setPollIntensity(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_id, __pyx_v_intensity);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_60setPollIntensity(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_intensity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setPollIntensity", 0);

  /* "libopenzwave.pyx":1281
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetPollIntensity(values_map.at(id), intensity)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":1282
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetPollIntensity(values_map.at(id), intensity)             # <<<<<<<<<<<<<<
 * 
 * #
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_intensity); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->manager->SetPollIntensity(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":1268
 *             return 0
 * 
 *     def setPollIntensity(self, id, intensity):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setPollIntensity:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setPollIntensity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1291
 * #
 * 
 *     def getNodeStatistics(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeStatistics:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_63getNodeStatistics(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_62getNodeStatistics[] = "\n.. _getNodeStatistics:\n\nRetrieve statistics per node\n\nStatistics:\n\n    cdef struct NodeData:\n        * sentCnt                              # Number of messages sent from this node.\n        * sentFailed                           # Number of sent messages failed\n        * retries                                # Number of message retries\n        * receivedCnt                        # Number of messages received from this node.\n        * receivedDups                      # Number of duplicated messages received;\n        * receivedUnsolicited             # Number of messages received unsolicited\n        * sentTS                                # Last message sent time\n        * receivedTS                          # Last message received time\n        * lastRequestRTT                    # Last message request RTT\n        * averageRequestRTT             # Average Request Round Trip Time (ms).\n        * lastResponseRTT                  # Last message response RTT\n        * averageResponseRTT           #Average Reponse round trip time.\n        * quality                                # Node quality measure\n        * lastReceivedMessage[254]   # Place to hold last received message\n        * ccData                                # List of statistic\n              * commandClassId               # Num of commandClass id.\n              * sentCnt                             # Number of messages sent from this CommandClass.\n              * receivedCnt                       # Number of messages received from this CommandClass.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param data: Pointer to structure NodeData to return values\n:type data: int\n:return: A dict containing statistics of the node.\n:rtype: dict()\n:see: getDriverStatistics_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_63getNodeStatistics(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeId = 0;
  PyObject *__pyx_v_nodeId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeStatistics (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeId,&__pyx_n_s_nodeId,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeId)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeStatistics", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1291; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeStatistics") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1291; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeId = values[0];
    __pyx_v_nodeId = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeStatistics", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1291; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_62getNodeStatistics(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeId, __pyx_v_nodeId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_62getNodeStatistics(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId, PyObject *__pyx_v_nodeId) {
  __pyx_t_4node_NodeData_t __pyx_v_data;
  PyObject *__pyx_v_ret = NULL;
  long __pyx_v_i;
  PyObject *__pyx_v_listccdata = NULL;
  PyObject *__pyx_v_ccd = NULL;
  struct OpenZWave::Node::CommandClassData __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeStatistics", 0);

  /* "libopenzwave.pyx":1332
 * 
 *         cdef NodeData_t data
 *         self.manager.GetNodeStatistics( homeId, nodeId, &data );             # <<<<<<<<<<<<<<
 *         ret = {}
 *         ret['sentCnt'] = data.m_sentCnt
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeId); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->GetNodeStatistics(__pyx_t_1, __pyx_t_2, (&__pyx_v_data));

  /* "libopenzwave.pyx":1333
 *         cdef NodeData_t data
 *         self.manager.GetNodeStatistics( homeId, nodeId, &data );
 *         ret = {}             # <<<<<<<<<<<<<<
 *         ret['sentCnt'] = data.m_sentCnt
 *         ret['sentFailed'] = data.m_sentFailed
 */
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_ret = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1334
 *         self.manager.GetNodeStatistics( homeId, nodeId, &data );
 *         ret = {}
 *         ret['sentCnt'] = data.m_sentCnt             # <<<<<<<<<<<<<<
 *         ret['sentFailed'] = data.m_sentFailed
 *         ret['retries'] = data.m_retries
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_sentCnt); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_sentCnt, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1335
 *         ret = {}
 *         ret['sentCnt'] = data.m_sentCnt
 *         ret['sentFailed'] = data.m_sentFailed             # <<<<<<<<<<<<<<
 *         ret['retries'] = data.m_retries
 *         ret['receivedCnt'] = data.m_receivedCnt
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_sentFailed); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_sentFailed, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1336
 *         ret['sentCnt'] = data.m_sentCnt
 *         ret['sentFailed'] = data.m_sentFailed
 *         ret['retries'] = data.m_retries             # <<<<<<<<<<<<<<
 *         ret['receivedCnt'] = data.m_receivedCnt
 *         ret['receivedDups'] = data.m_receivedDups
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_retries); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_retries, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1337
 *         ret['sentFailed'] = data.m_sentFailed
 *         ret['retries'] = data.m_retries
 *         ret['receivedCnt'] = data.m_receivedCnt             # <<<<<<<<<<<<<<
 *         ret['receivedDups'] = data.m_receivedDups
 *         ret['receivedUnsolicited'] = data.m_receivedUnsolicited
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_receivedCnt); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_receivedCnt, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1338
 *         ret['retries'] = data.m_retries
 *         ret['receivedCnt'] = data.m_receivedCnt
 *         ret['receivedDups'] = data.m_receivedDups             # <<<<<<<<<<<<<<
 *         ret['receivedUnsolicited'] = data.m_receivedUnsolicited
 *         ret['sentTS'] = data.m_sentTS.c_str()
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_receivedDups); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_receivedDups, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1339
 *         ret['receivedCnt'] = data.m_receivedCnt
 *         ret['receivedDups'] = data.m_receivedDups
 *         ret['receivedUnsolicited'] = data.m_receivedUnsolicited             # <<<<<<<<<<<<<<
 *         ret['sentTS'] = data.m_sentTS.c_str()
 *         ret['receivedTS'] = data.m_receivedTS.c_str()
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_receivedUnsolicited); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_receivedUnsolicited, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1340
 *         ret['receivedDups'] = data.m_receivedDups
 *         ret['receivedUnsolicited'] = data.m_receivedUnsolicited
 *         ret['sentTS'] = data.m_sentTS.c_str()             # <<<<<<<<<<<<<<
 *         ret['receivedTS'] = data.m_receivedTS.c_str()
 *         ret['lastRequestRTT'] = data.m_lastRequestRTT
 */
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_data.m_sentTS.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_sentTS, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1341
 *         ret['receivedUnsolicited'] = data.m_receivedUnsolicited
 *         ret['sentTS'] = data.m_sentTS.c_str()
 *         ret['receivedTS'] = data.m_receivedTS.c_str()             # <<<<<<<<<<<<<<
 *         ret['lastRequestRTT'] = data.m_lastRequestRTT
 *         ret['averageRequestRTT'] = data.m_averageRequestRTT
 */
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_data.m_receivedTS.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_receivedTS, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1342
 *         ret['sentTS'] = data.m_sentTS.c_str()
 *         ret['receivedTS'] = data.m_receivedTS.c_str()
 *         ret['lastRequestRTT'] = data.m_lastRequestRTT             # <<<<<<<<<<<<<<
 *         ret['averageRequestRTT'] = data.m_averageRequestRTT
 *         ret['lastResponseRTT'] = data.m_lastResponseRTT
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_lastRequestRTT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_lastRequestRTT, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1343
 *         ret['receivedTS'] = data.m_receivedTS.c_str()
 *         ret['lastRequestRTT'] = data.m_lastRequestRTT
 *         ret['averageRequestRTT'] = data.m_averageRequestRTT             # <<<<<<<<<<<<<<
 *         ret['lastResponseRTT'] = data.m_lastResponseRTT
 *         ret['averageResponseRTT'] = data.m_averageResponseRTT
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_averageRequestRTT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_averageRequestRTT, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1344
 *         ret['lastRequestRTT'] = data.m_lastRequestRTT
 *         ret['averageRequestRTT'] = data.m_averageRequestRTT
 *         ret['lastResponseRTT'] = data.m_lastResponseRTT             # <<<<<<<<<<<<<<
 *         ret['averageResponseRTT'] = data.m_averageResponseRTT
 *         ret['quality'] = data.m_quality
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_lastResponseRTT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_lastResponseRTT, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1345
 *         ret['averageRequestRTT'] = data.m_averageRequestRTT
 *         ret['lastResponseRTT'] = data.m_lastResponseRTT
 *         ret['averageResponseRTT'] = data.m_averageResponseRTT             # <<<<<<<<<<<<<<
 *         ret['quality'] = data.m_quality
 *         ret['lastReceivedMessage'] = []
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_data.m_averageResponseRTT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_averageResponseRTT, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1346
 *         ret['lastResponseRTT'] = data.m_lastResponseRTT
 *         ret['averageResponseRTT'] = data.m_averageResponseRTT
 *         ret['quality'] = data.m_quality             # <<<<<<<<<<<<<<
 *         ret['lastReceivedMessage'] = []
 *         for i in range( 0, 254) :
 */
  __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_data.m_quality); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_quality, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1347
 *         ret['averageResponseRTT'] = data.m_averageResponseRTT
 *         ret['quality'] = data.m_quality
 *         ret['lastReceivedMessage'] = []             # <<<<<<<<<<<<<<
 *         for i in range( 0, 254) :
 *             ret['lastReceivedMessage'] .append(data.m_lastReceivedMessage[i])
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_lastReceivedMessage, __pyx_t_3) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "libopenzwave.pyx":1348
 *         ret['quality'] = data.m_quality
 *         ret['lastReceivedMessage'] = []
 *         for i in range( 0, 254) :             # <<<<<<<<<<<<<<
 *             ret['lastReceivedMessage'] .append(data.m_lastReceivedMessage[i])
 *         listccdata =[]
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 254; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "libopenzwave.pyx":1349
 *         ret['lastReceivedMessage'] = []
 *         for i in range( 0, 254) :
 *             ret['lastReceivedMessage'] .append(data.m_lastReceivedMessage[i])             # <<<<<<<<<<<<<<
 *         listccdata =[]
 *         while not data.m_ccData.empty() :
 */
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_ret, __pyx_n_s_lastReceivedMessage); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_From_uint8_t((__pyx_v_data.m_lastReceivedMessage[__pyx_v_i])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_t_5); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "libopenzwave.pyx":1350
 *         for i in range( 0, 254) :
 *             ret['lastReceivedMessage'] .append(data.m_lastReceivedMessage[i])
 *         listccdata =[]             # <<<<<<<<<<<<<<
 *         while not data.m_ccData.empty() :
 *             ccd = {}
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_listccdata = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "libopenzwave.pyx":1351
 *             ret['lastReceivedMessage'] .append(data.m_lastReceivedMessage[i])
 *         listccdata =[]
 *         while not data.m_ccData.empty() :             # <<<<<<<<<<<<<<
 *             ccd = {}
 *             temp = data.m_ccData.back()
 */
  while (1) {
    __pyx_t_7 = ((!(__pyx_v_data.m_ccData.empty() != 0)) != 0);
    if (!__pyx_t_7) break;

    /* "libopenzwave.pyx":1352
 *         listccdata =[]
 *         while not data.m_ccData.empty() :
 *             ccd = {}             # <<<<<<<<<<<<<<
 *             temp = data.m_ccData.back()
 *             ccd['commandClassId'] = temp.m_commandClassId
 */
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_ccd, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":1353
 *         while not data.m_ccData.empty() :
 *             ccd = {}
 *             temp = data.m_ccData.back()             # <<<<<<<<<<<<<<
 *             ccd['commandClassId'] = temp.m_commandClassId
 *             ccd['sentCnt'] = temp.m_sentCnt
 */
    __pyx_v_temp = __pyx_v_data.m_ccData.back();

    /* "libopenzwave.pyx":1354
 *             ccd = {}
 *             temp = data.m_ccData.back()
 *             ccd['commandClassId'] = temp.m_commandClassId             # <<<<<<<<<<<<<<
 *             ccd['sentCnt'] = temp.m_sentCnt
 *             ccd['receivedCnt']  = temp.m_receivedCnt
 */
    __pyx_t_5 = __Pyx_PyInt_From_uint8_t(__pyx_v_temp.m_commandClassId); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_ccd, __pyx_n_s_commandClassId, __pyx_t_5) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "libopenzwave.pyx":1355
 *             temp = data.m_ccData.back()
 *             ccd['commandClassId'] = temp.m_commandClassId
 *             ccd['sentCnt'] = temp.m_sentCnt             # <<<<<<<<<<<<<<
 *             ccd['receivedCnt']  = temp.m_receivedCnt
 *             listccdata.append(ccd)
 */
    __pyx_t_5 = __Pyx_PyInt_From_uint32_t(__pyx_v_temp.m_sentCnt); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_ccd, __pyx_n_s_sentCnt, __pyx_t_5) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1355; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "libopenzwave.pyx":1356
 *             ccd['commandClassId'] = temp.m_commandClassId
 *             ccd['sentCnt'] = temp.m_sentCnt
 *             ccd['receivedCnt']  = temp.m_receivedCnt             # <<<<<<<<<<<<<<
 *             listccdata.append(ccd)
 *             data.m_ccData.pop_back();
 */
    __pyx_t_5 = __Pyx_PyInt_From_uint32_t(__pyx_v_temp.m_receivedCnt); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(PyDict_SetItem(__pyx_v_ccd, __pyx_n_s_receivedCnt, __pyx_t_5) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "libopenzwave.pyx":1357
 *             ccd['sentCnt'] = temp.m_sentCnt
 *             ccd['receivedCnt']  = temp.m_receivedCnt
 *             listccdata.append(ccd)             # <<<<<<<<<<<<<<
 *             data.m_ccData.pop_back();
 *         ret['ccData'] = listccdata
 */
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_listccdata, __pyx_v_ccd); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "libopenzwave.pyx":1358
 *             ccd['receivedCnt']  = temp.m_receivedCnt
 *             listccdata.append(ccd)
 *             data.m_ccData.pop_back();             # <<<<<<<<<<<<<<
 *         ret['ccData'] = listccdata
 *         return ret
 */
    __pyx_v_data.m_ccData.pop_back();
  }

  /* "libopenzwave.pyx":1359
 *             listccdata.append(ccd)
 *             data.m_ccData.pop_back();
 *         ret['ccData'] = listccdata             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_n_s_ccData, __pyx_v_listccdata) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":1360
 *             data.m_ccData.pop_back();
 *         ret['ccData'] = listccdata
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def requestNodeDynamic(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1291
 * #
 * 
 *     def getNodeStatistics(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeStatistics:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeStatistics", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_listccdata);
  __Pyx_XDECREF(__pyx_v_ccd);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1362
 *         return ret
 * 
 *     def requestNodeDynamic(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestNodeDynamic:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_65requestNodeDynamic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_64requestNodeDynamic[] = "\n.. _requestNodeDynamic:\n\nTrigger the fetching of fixed data about a node.\n\nCauses the nodes data to be obtained from the Z-Wave network in the same way\nas if it had just been added.  This method would normally be called\nautomatically by OpenZWave, but if you know that a node has been changed,\ncalling this method will force a refresh of the data held by the library.  This\ncan be especially useful for devices that were asleep when the application was\nfirst run.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the request was sent successfully.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_65requestNodeDynamic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("requestNodeDynamic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("requestNodeDynamic", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "requestNodeDynamic") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestNodeDynamic", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1362; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeDynamic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_64requestNodeDynamic(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_64requestNodeDynamic(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("requestNodeDynamic", 0);

  /* "libopenzwave.pyx":1383
 * 
 *         '''
 *         return self.manager.RequestNodeDynamic(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def refreshNodeInfo(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->RequestNodeDynamic(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1362
 *         return ret
 * 
 *     def requestNodeDynamic(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestNodeDynamic:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeDynamic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1385
 *         return self.manager.RequestNodeDynamic(homeid, nodeid)
 * 
 *     def refreshNodeInfo(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _refreshNodeInfo:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_67refreshNodeInfo(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_66refreshNodeInfo[] = "\n.. _refreshNodeInfo:\n\nTrigger the fetching of fixed data about a node.\n\nCauses the nodes data to be obtained from the Z-Wave network in the same way\nas if it had just been added.  This method would normally be called\nautomatically by OpenZWave, but if you know that a node has been changed,\ncalling this method will force a refresh of the data held by the library.  This\ncan be especially useful for devices that were asleep when the application was\nfirst run.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the request was sent successfully.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_67refreshNodeInfo(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("refreshNodeInfo (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("refreshNodeInfo", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "refreshNodeInfo") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("refreshNodeInfo", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1385; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.refreshNodeInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_66refreshNodeInfo(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_66refreshNodeInfo(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("refreshNodeInfo", 0);

  /* "libopenzwave.pyx":1406
 * 
 *         '''
 *         return self.manager.RefreshNodeInfo(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def requestNodeState(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->RefreshNodeInfo(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1385
 *         return self.manager.RequestNodeDynamic(homeid, nodeid)
 * 
 *     def refreshNodeInfo(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _refreshNodeInfo:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.refreshNodeInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1408
 *         return self.manager.RefreshNodeInfo(homeid, nodeid)
 * 
 *     def requestNodeState(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestNodeState:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_69requestNodeState(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_68requestNodeState[] = "\n.. _requestNodeState:\n\nTrigger the fetching of just the dynamic value data for a node.\nCauses the node's values to be requested from the Z-Wave network. This is the\nsame as the query state starting from the dynamic state.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the request was sent successfully.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_69requestNodeState(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("requestNodeState (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("requestNodeState", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "requestNodeState") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestNodeState", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_68requestNodeState(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_68requestNodeState(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("requestNodeState", 0);

  /* "libopenzwave.pyx":1424
 * 
 *         '''
 *         return self.manager.RequestNodeState(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeBeamingDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->RequestNodeState(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1408
 *         return self.manager.RefreshNodeInfo(homeid, nodeid)
 * 
 *     def requestNodeState(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestNodeState:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.requestNodeState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1426
 *         return self.manager.RequestNodeState(homeid, nodeid)
 * 
 *     def isNodeBeamingDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeBeamingDevice:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_71isNodeBeamingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_70isNodeBeamingDevice[] = "\n.. _isNodeBeamingDevice:\n\nGet whether the node is a beam capable device.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the node is a beaming device\n:rtype: bool\n:see: isNodeListeningDevice_, isNodeFrequentListeningDevice_, isNodeSecurityDevice_, isNodeRoutingDevice_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_71isNodeBeamingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeBeamingDevice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeBeamingDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isNodeBeamingDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeBeamingDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1426; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeBeamingDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_70isNodeBeamingDevice(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_70isNodeBeamingDevice(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeBeamingDevice", 0);

  /* "libopenzwave.pyx":1441
 * 
 *         '''
 *         return self.manager.IsNodeBeamingDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsNodeBeamingDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1426
 *         return self.manager.RequestNodeState(homeid, nodeid)
 * 
 *     def isNodeBeamingDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeBeamingDevice:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeBeamingDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1444
 * 
 * 
 *     def isNodeListeningDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeListeningDevice:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_73isNodeListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_72isNodeListeningDevice[] = "\n.. _isNodeListeningDevice:\n\nGet whether the node is a setening device that does not go to sleep\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if it is a setening node.\n:rtype: bool\n:see: isNodeBeamingDevice_, isNodeFrequentListeningDevice_, isNodeSecurityDevice_, isNodeRoutingDevice_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_73isNodeListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeListeningDevice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeListeningDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isNodeListeningDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeListeningDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1444; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeListeningDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_72isNodeListeningDevice(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_72isNodeListeningDevice(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeListeningDevice", 0);

  /* "libopenzwave.pyx":1459
 * 
 *         '''
 *         return self.manager.IsNodeListeningDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeFrequentListeningDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsNodeListeningDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1444
 * 
 * 
 *     def isNodeListeningDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeListeningDevice:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeListeningDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1461
 *         return self.manager.IsNodeListeningDevice(homeid, nodeid)
 * 
 *     def isNodeFrequentListeningDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeFrequentListeningDevice:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_75isNodeFrequentListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_74isNodeFrequentListeningDevice[] = "\n.. _isNodeFrequentListeningDevice:\n\nGet whether the node is a frequent setening device that goes to sleep but\ncan be woken up by a beam. Useful to determine node and controller consistency.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if it is a frequent setening node.\n:rtype: bool\n:see: isNodeBeamingDevice_, isNodeListeningDevice_, isNodeSecurityDevice_, isNodeRoutingDevice_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_75isNodeFrequentListeningDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeFrequentListeningDevice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeFrequentListeningDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isNodeFrequentListeningDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeFrequentListeningDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1461; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeFrequentListeningDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_74isNodeFrequentListeningDevice(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_74isNodeFrequentListeningDevice(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeFrequentListeningDevice", 0);

  /* "libopenzwave.pyx":1477
 * 
 *         '''
 *         return self.manager.IsNodeFrequentListeningDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeSecurityDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsNodeFrequentListeningDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1461
 *         return self.manager.IsNodeListeningDevice(homeid, nodeid)
 * 
 *     def isNodeFrequentListeningDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeFrequentListeningDevice:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeFrequentListeningDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1479
 *         return self.manager.IsNodeFrequentListeningDevice(homeid, nodeid)
 * 
 *     def isNodeSecurityDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeSecurityDevice:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_77isNodeSecurityDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_76isNodeSecurityDevice[] = "\n.. _isNodeSecurityDevice:\n\nGet the security attribute for a node. True if node supports security features.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if security features implemented.\n:rtype: bool\n:see: isNodeBeamingDevice_, isNodeListeningDevice_, isNodeFrequentListeningDevice_, isNodeRoutingDevice_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_77isNodeSecurityDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeSecurityDevice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeSecurityDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isNodeSecurityDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeSecurityDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1479; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeSecurityDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_76isNodeSecurityDevice(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_76isNodeSecurityDevice(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeSecurityDevice", 0);

  /* "libopenzwave.pyx":1494
 * 
 *         '''
 *         return self.manager.IsNodeSecurityDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeRoutingDevice(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsNodeSecurityDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1479
 *         return self.manager.IsNodeFrequentListeningDevice(homeid, nodeid)
 * 
 *     def isNodeSecurityDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeSecurityDevice:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeSecurityDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1496
 *         return self.manager.IsNodeSecurityDevice(homeid, nodeid)
 * 
 *     def isNodeRoutingDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeRoutingDevice:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_79isNodeRoutingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_78isNodeRoutingDevice[] = "\n.. _isNodeRoutingDevice:\n\nGet whether the node is a routing device that passes messages to other nodes\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the node is a routing device\n:rtype: bool\n:see: isNodeBeamingDevice_, isNodeListeningDevice_, isNodeFrequentListeningDevice_, isNodeSecurityDevice_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_79isNodeRoutingDevice(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeRoutingDevice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeRoutingDevice", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1496; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isNodeRoutingDevice") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1496; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeRoutingDevice", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1496; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeRoutingDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_78isNodeRoutingDevice(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_78isNodeRoutingDevice(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeRoutingDevice", 0);

  /* "libopenzwave.pyx":1511
 * 
 *         '''
 *         return self.manager.IsNodeRoutingDevice(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeMaxBaudRate(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsNodeRoutingDevice(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1496
 *         return self.manager.IsNodeSecurityDevice(homeid, nodeid)
 * 
 *     def isNodeRoutingDevice(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeRoutingDevice:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeRoutingDevice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1513
 *         return self.manager.IsNodeRoutingDevice(homeid, nodeid)
 * 
 *     def getNodeMaxBaudRate(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeMaxBaudRate:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_81getNodeMaxBaudRate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_80getNodeMaxBaudRate[] = "\n.. _getNodeMaxBaudRate:\n\nGet the maximum baud rate of a nodes communications\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: The baud rate in bits per second.\n:rtype: int\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_81getNodeMaxBaudRate(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeMaxBaudRate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeMaxBaudRate", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeMaxBaudRate") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeMaxBaudRate", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1513; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeMaxBaudRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_80getNodeMaxBaudRate(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_80getNodeMaxBaudRate(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeMaxBaudRate", 0);

  /* "libopenzwave.pyx":1527
 * 
 *         '''
 *         return self.manager.GetNodeMaxBaudRate(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeVersion(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->manager->GetNodeMaxBaudRate(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1527; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1513
 *         return self.manager.IsNodeRoutingDevice(homeid, nodeid)
 * 
 *     def getNodeMaxBaudRate(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeMaxBaudRate:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeMaxBaudRate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1529
 *         return self.manager.GetNodeMaxBaudRate(homeid, nodeid)
 * 
 *     def getNodeVersion(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeVersion:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_83getNodeVersion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_82getNodeVersion[] = "\n.. _getNodeVersion:\n\nGet the version number of a node\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: The node version number\n:rtype: int\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_83getNodeVersion(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeVersion (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeVersion", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeVersion") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeVersion", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1529; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_82getNodeVersion(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_82getNodeVersion(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeVersion", 0);

  /* "libopenzwave.pyx":1543
 * 
 *         '''
 *         return self.manager.GetNodeVersion(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeSecurity(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetNodeVersion(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1543; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1529
 *         return self.manager.GetNodeMaxBaudRate(homeid, nodeid)
 * 
 *     def getNodeVersion(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeVersion:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeVersion", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1545
 *         return self.manager.GetNodeVersion(homeid, nodeid)
 * 
 *     def getNodeSecurity(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeSecurity:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_85getNodeSecurity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_84getNodeSecurity[] = "\n.. _getNodeSecurity:\n\nGet the security byte for a node.  Bit meanings are still to be determined.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: The node security byte\n:rtype: int\n:see: getNodeType_, getNodeSpecific_, getNodeGeneric_, getNodeBasic_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_85getNodeSecurity(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeSecurity (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeSecurity", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeSecurity") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeSecurity", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1545; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSecurity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_84getNodeSecurity(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_84getNodeSecurity(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeSecurity", 0);

  /* "libopenzwave.pyx":1560
 * 
 *         '''
 *         return self.manager.GetNodeSecurity(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeBasic(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetNodeSecurity(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1545
 *         return self.manager.GetNodeVersion(homeid, nodeid)
 * 
 *     def getNodeSecurity(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeSecurity:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSecurity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1562
 *         return self.manager.GetNodeSecurity(homeid, nodeid)
 * 
 *     def getNodeBasic(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeBasic:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_87getNodeBasic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_86getNodeBasic[] = "\n.. _getNodeBasic:\n\nGet the basic type of a node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: The node basic type.\n:rtype: int\n:see: getNodeType_, getNodeSpecific_, getNodeGeneric_, getNodeSecurity_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_87getNodeBasic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeBasic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeBasic", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1562; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeBasic") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1562; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeBasic", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1562; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeBasic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_86getNodeBasic(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_86getNodeBasic(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeBasic", 0);

  /* "libopenzwave.pyx":1577
 * 
 *         '''
 *         return self.manager.GetNodeBasic(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeGeneric(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetNodeBasic(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1577; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1562
 *         return self.manager.GetNodeSecurity(homeid, nodeid)
 * 
 *     def getNodeBasic(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeBasic:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeBasic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1579
 *         return self.manager.GetNodeBasic(homeid, nodeid)
 * 
 *     def getNodeGeneric(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeGeneric:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_89getNodeGeneric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_88getNodeGeneric[] = "\n.. _getNodeGeneric:\n\nGet the generic type of a node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: The node generic type.\n:rtype: int\n:see: getNodeType_, getNodeSpecific_, getNodeBasic_, getNodeSecurity_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_89getNodeGeneric(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeGeneric (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeGeneric", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeGeneric") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeGeneric", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1579; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeGeneric", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_88getNodeGeneric(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_88getNodeGeneric(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeGeneric", 0);

  /* "libopenzwave.pyx":1594
 * 
 *         '''
 *         return self.manager.GetNodeGeneric(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeSpecific(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetNodeGeneric(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1594; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1579
 *         return self.manager.GetNodeBasic(homeid, nodeid)
 * 
 *     def getNodeGeneric(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeGeneric:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeGeneric", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1596
 *         return self.manager.GetNodeGeneric(homeid, nodeid)
 * 
 *     def getNodeSpecific(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeSpecific:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_91getNodeSpecific(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_90getNodeSpecific[] = "\n.. _getNodeSpecific:\n\nGet the specific type of a node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type homeId: int\n:return: int -- The node specific type.\n:see: getNodeType_, getNodeGeneric_, getNodeBasic_, getNodeSecurity_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_91getNodeSpecific(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeSpecific (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeSpecific", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1596; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeSpecific") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1596; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeSpecific", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1596; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSpecific", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_90getNodeSpecific(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_90getNodeSpecific(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeSpecific", 0);

  /* "libopenzwave.pyx":1610
 * 
 *         '''
 *         return self.manager.GetNodeSpecific(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getNodeType(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetNodeSpecific(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1610; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1596
 *         return self.manager.GetNodeGeneric(homeid, nodeid)
 * 
 *     def getNodeSpecific(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeSpecific:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeSpecific", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1612
 *         return self.manager.GetNodeSpecific(homeid, nodeid)
 * 
 *     def getNodeType(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeType:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_93getNodeType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_92getNodeType[] = "\n.. _getNodeType:\n\nGet a human-readable label describing the node\n\nThe label is taken from the Z-Wave specific, generic or basic type, depending\non which of those values are specified by the node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A string containing the label text.\n:rtype: str\n:see: getNodeSpecific_, getNodeGeneric_, getNodeBasic_, getNodeSecurity_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_93getNodeType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeType (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeType", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeType") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeType", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1612; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_92getNodeType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_92getNodeType(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeType", 0);

  /* "libopenzwave.pyx":1630
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeType(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1630; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetNodeType(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1631
 *         '''
 *         cdef string c_string = self.manager.GetNodeType(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeNeighbors(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1612
 *         return self.manager.GetNodeSpecific(homeid, nodeid)
 * 
 *     def getNodeType(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeType:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1633
 *         return c_string.c_str()
 * 
 *     def getNodeNeighbors(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeNeighbors:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_95getNodeNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_94getNodeNeighbors[] = "\n.. _getNodeNeighbors:\n\nGet the bitmap of this node's neighbors.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A set containing neighboring node IDs\n:rtype: set()\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_95getNodeNeighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeNeighbors (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeNeighbors", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeNeighbors") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeNeighbors", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1633; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_94getNodeNeighbors(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_94getNodeNeighbors(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_v_data = NULL;
  uint8_t **__pyx_v_dbuf;
  uint32_t __pyx_v_count;
  struct __pyx_obj_12libopenzwave_RetAlloc *__pyx_v_retuint8 = 0;
  uint8_t *__pyx_v_p;
  uint32_t __pyx_v_start;
  uint32_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uint32_t __pyx_t_2;
  uint8_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  uint32_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  char const *__pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeNeighbors", 0);

  /* "libopenzwave.pyx":1647
 * 
 *         '''
 *         data = set()             # <<<<<<<<<<<<<<
 *         #Allocate memory for the c++ function
 *         #Return value is pointer to uint8_t[]
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":1650
 *         #Allocate memory for the c++ function
 *         #Return value is pointer to uint8_t[]
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t)*29)             # <<<<<<<<<<<<<<
 *         #Get the number of neigbors
 *         cdef uint32_t count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
 */
  __pyx_v_dbuf = ((uint8_t **)malloc(((sizeof(uint8_t)) * 29)));

  /* "libopenzwave.pyx":1652
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t)*29)
 *         #Get the number of neigbors
 *         cdef uint32_t count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)             # <<<<<<<<<<<<<<
 *         if count == 0:
 *             #Don't need to allocate memory.
 */
  __pyx_t_2 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_2 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = __pyx_v_self->manager->GetNodeNeighbors(__pyx_t_2, __pyx_t_3, __pyx_v_dbuf);

  /* "libopenzwave.pyx":1653
 *         #Get the number of neigbors
 *         cdef uint32_t count = self.manager.GetNodeNeighbors(homeid, nodeid, dbuf)
 *         if count == 0:             # <<<<<<<<<<<<<<
 *             #Don't need to allocate memory.
 *             free(dbuf)
 */
  __pyx_t_4 = ((__pyx_v_count == 0) != 0);
  if (__pyx_t_4) {

    /* "libopenzwave.pyx":1655
 *         if count == 0:
 *             #Don't need to allocate memory.
 *             free(dbuf)             # <<<<<<<<<<<<<<
 *             return data
 *         #Allocate memory for the returned values
 */
    free(__pyx_v_dbuf);

    /* "libopenzwave.pyx":1656
 *             #Don't need to allocate memory.
 *             free(dbuf)
 *             return data             # <<<<<<<<<<<<<<
 *         #Allocate memory for the returned values
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_data);
    __pyx_r = __pyx_v_data;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":1658
 *             return data
 *         #Allocate memory for the returned values
 *         cdef RetAlloc retuint8 = RetAlloc(count)             # <<<<<<<<<<<<<<
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_12libopenzwave_RetAlloc)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_retuint8 = ((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":1660
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0             # <<<<<<<<<<<<<<
 *         if count:
 *             try:
 */
  __pyx_v_start = 0;

  /* "libopenzwave.pyx":1661
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
  __pyx_t_4 = (__pyx_v_count != 0);
  if (__pyx_t_4) {

    /* "libopenzwave.pyx":1662
 *         cdef uint32_t start = 0
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 */
    /*try:*/ {

      /* "libopenzwave.pyx":1663
 *         if count:
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(start, count):
 *                     #cdef uint8_t = retuint8[i]
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "libopenzwave.pyx":1664
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):             # <<<<<<<<<<<<<<
 *                     #cdef uint8_t = retuint8[i]
 *                     retuint8.data[i] = p[0]
 */
      __pyx_t_2 = __pyx_v_count;
      for (__pyx_t_6 = __pyx_v_start; __pyx_t_6 < __pyx_t_2; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "libopenzwave.pyx":1666
 *                 for i in range(start, count):
 *                     #cdef uint8_t = retuint8[i]
 *                     retuint8.data[i] = p[0]             # <<<<<<<<<<<<<<
 *                     data.add(retuint8.data[i])
 *                     p += 1
 */
        (__pyx_v_retuint8->data[__pyx_v_i]) = (__pyx_v_p[0]);

        /* "libopenzwave.pyx":1667
 *                     #cdef uint8_t = retuint8[i]
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])             # <<<<<<<<<<<<<<
 *                     p += 1
 *             finally:
 */
        __pyx_t_1 = __Pyx_PyInt_From_uint8_t((__pyx_v_retuint8->data[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = PySet_Add(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1667; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "libopenzwave.pyx":1668
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])
 *                     p += 1             # <<<<<<<<<<<<<<
 *             finally:
 *                 #Free memory
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }
    }

    /* "libopenzwave.pyx":1671
 *             finally:
 *                 #Free memory
 *                 free(dbuf)             # <<<<<<<<<<<<<<
 *                 pass
 *         return data
 */
    /*finally:*/ {
      /*normal exit:*/{
        free(__pyx_v_dbuf);
        goto __pyx_L7;
      }
      /*exception exit:*/{
        __pyx_L6_error:;
        __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13) < 0)) __Pyx_ErrFetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_16);
        __pyx_t_8 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_10 = __pyx_filename;
        {
          free(__pyx_v_dbuf);
        }
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
        }
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ErrRestore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
        __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
        __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_10;
        goto __pyx_L1_error;
      }
      __pyx_L7:;
    }
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "libopenzwave.pyx":1673
 *                 free(dbuf)
 *                 pass
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     def getNodeManufacturerName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data);
  __pyx_r = __pyx_v_data;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1633
 *         return c_string.c_str()
 * 
 *     def getNodeNeighbors(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeNeighbors:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeNeighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF((PyObject *)__pyx_v_retuint8);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1675
 *         return data
 * 
 *     def getNodeManufacturerName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 *         .. _getNodeManufacturerName:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_97getNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_96getNodeManufacturerName[] = "\n        .. _getNodeManufacturerName:\n\nGet the manufacturer name of a device\n\nThe manufacturer name would normally be handled by the Manufacturer Specific\ncommmand class, taking the manufacturer ID reported by the device and using it\nto look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A string containing the nodes manufacturer name.\n:rtype: str\n:see: setNodeManufacturerName_, getNodeProductName_, setNodeProductName_,     getNodeManufacturerId_, getNodeProductId_, getNodeProductType_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_97getNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeManufacturerName (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeManufacturerName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeManufacturerName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeManufacturerName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1675; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_96getNodeManufacturerName(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_96getNodeManufacturerName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  std::string __pyx_v_manufacturer_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeManufacturerName", 0);

  /* "libopenzwave.pyx":1699
 * 
 *         '''
 *         cdef string manufacturer_string = self.manager.GetNodeManufacturerName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return manufacturer_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_manufacturer_string = __pyx_v_self->manager->GetNodeManufacturerName(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1700
 *         '''
 *         cdef string manufacturer_string = self.manager.GetNodeManufacturerName(homeid, nodeid)
 *         return manufacturer_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_manufacturer_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1675
 *         return data
 * 
 *     def getNodeManufacturerName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 *         .. _getNodeManufacturerName:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1702
 *         return manufacturer_string.c_str()
 * 
 *     def getNodeProductName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductName:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_99getNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_98getNodeProductName[] = "\n.. _getNodeProductName:\n\nGet the product name of a device\n\nThe product name would normally be handled by the Manufacturer Specific\ncommmand class, taking the product Type and ID reported by the device and using\nit to look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: str -- A string containing the nodes product name.\n:see: setNodeProductName_, getNodeManufacturerName_, setNodeManufacturerName_,     getNodeManufacturerId_, getNodeProductId_, getNodeProductType_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_99getNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeProductName (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeProductName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeProductName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1702; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_98getNodeProductName(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_98getNodeProductName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  std::string __pyx_v_productname_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeProductName", 0);

  /* "libopenzwave.pyx":1725
 * 
 *         '''
 *         cdef string productname_string = self.manager.GetNodeProductName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return productname_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_productname_string = __pyx_v_self->manager->GetNodeProductName(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1726
 *         '''
 *         cdef string productname_string = self.manager.GetNodeProductName(homeid, nodeid)
 *         return productname_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeName(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_productname_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1702
 *         return manufacturer_string.c_str()
 * 
 *     def getNodeProductName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductName:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1728
 *         return productname_string.c_str()
 * 
 *     def getNodeName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeName:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_101getNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_100getNodeName[] = "\n.. _getNodeName:\n\nGet the name of a node\n\nThe node name is a user-editable label for the node that would normally be\nhandled by the Node Naming commmand class, but many devices do not support it.\nSo that a node can always be named, OpenZWave stores it with the node data, and\nprovides access through this method and SetNodeName, rather than reporting it\nvia a command class Value object.  The maximum length of a node name is 16\ncharacters.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: str -- A string containing the node name.\n:see: setNodeName_, getNodeLocation_, setNodeLocation_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_101getNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeName (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeName", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1728; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1728; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeName", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1728; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_100getNodeName(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_100getNodeName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeName", 0);

  /* "libopenzwave.pyx":1749
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeName(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetNodeName(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1750
 *         '''
 *         cdef string c_string = self.manager.GetNodeName(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeLocation(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1728
 *         return productname_string.c_str()
 * 
 *     def getNodeName(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeName:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1752
 *         return c_string.c_str()
 * 
 *     def getNodeLocation(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeLocation:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_103getNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_102getNodeLocation[] = "\n.. _getNodeLocation:\n\nGet the location of a node\n\nThe node location is a user-editable string that would normally be handled by\nthe Node Naming commmand class, but many devices do not support it.  So that a\nnode can always report its location, OpenZWave stores it with the node data,\nand provides access through this method and SetNodeLocation, rather than\nreporting it via a command class Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: str -- A string containing the nodes location.\n:see: setNodeLocation_, getNodeName_, setNodeName_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_103getNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeLocation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeLocation", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1752; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeLocation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1752; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeLocation", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1752; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_102getNodeLocation(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_102getNodeLocation(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeLocation", 0);

  /* "libopenzwave.pyx":1772
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeLocation(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetNodeLocation(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1773
 *         '''
 *         cdef string c_string = self.manager.GetNodeLocation(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeManufacturerId(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1773; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1752
 *         return c_string.c_str()
 * 
 *     def getNodeLocation(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeLocation:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1775
 *         return c_string.c_str()
 * 
 *     def getNodeManufacturerId(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeManufacturerId:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_105getNodeManufacturerId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_104getNodeManufacturerId[] = "\n.. _getNodeManufacturerId:\n\nGet the manufacturer ID of a device\n\nThe manufacturer ID is a four digit hex code and would normally be handled by\nthe Manufacturer-Specific commmand class, but not all devices support it.\nAlthough the value reported by this method will be an empty string if the\ncommand class is not supported and cannot be set by the user, the manufacturer\nID is still stored with the node data (rather than being reported via a command\nclass Value object) to retain a consistent approach with the other manufacturer\nspecific data.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A string containing the nodes manufacturer ID, or an empty string if the manufactuer-specific command class is not supported by the device.\n:rtype: str\n:see: getNodeProductType_, getNodeProductId_, getNodeManufacturerName_, setNodeManufacturerName_,     getNodeProductName_, setNodeProductName_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_105getNodeManufacturerId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeManufacturerId (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeManufacturerId", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeManufacturerId") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeManufacturerId", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1775; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_104getNodeManufacturerId(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_104getNodeManufacturerId(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeManufacturerId", 0);

  /* "libopenzwave.pyx":1799
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeManufacturerId(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetNodeManufacturerId(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1800
 *         '''
 *         cdef string c_string = self.manager.GetNodeManufacturerId(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductType(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1800; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1775
 *         return c_string.c_str()
 * 
 *     def getNodeManufacturerId(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeManufacturerId:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeManufacturerId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1802
 *         return c_string.c_str()
 * 
 *     def getNodeProductType(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductType:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_107getNodeProductType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_106getNodeProductType[] = "\n.. _getNodeProductType:\n\nGet the product type of a device\n\nThe product type is a four digit hex code and would normally be handled by the\nManufacturer Specific commmand class, but not all devices support it.  Although\nthe value reported by this method will be an empty string if the command class\nis not supported and cannot be set by the user, the product type is still\nstored with the node data (rather than being reported via a command class Value\nobject) to retain a consistent approach with the other manufacturer specific\ndata.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A string containing the nodes product type, or an empty string if the manufactuer-specific command class is not supported by the device.\n:rtype: str\n:see: getNodeManufacturerId_, getNodeProductId_, getNodeManufacturerName_, setNodeManufacturerName_,     getNodeProductName_, setNodeProductName_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_107getNodeProductType(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeProductType (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeProductType", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1802; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeProductType") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1802; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductType", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1802; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_106getNodeProductType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_106getNodeProductType(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeProductType", 0);

  /* "libopenzwave.pyx":1826
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductType(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetNodeProductType(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1827
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductType(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def getNodeProductId(self, homeid, nodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1802
 *         return c_string.c_str()
 * 
 *     def getNodeProductType(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductType:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1829
 *         return c_string.c_str()
 * 
 *     def getNodeProductId(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductId:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_109getNodeProductId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_108getNodeProductId[] = "\n.. _getNodeProductId:\n\nGet the product ID of a device\n\nThe product ID is a four digit hex code and would normally be handled by the\nManufacturer-Specific commmand class, but not all devices support it.  Although\nthe value reported by this method will be an empty string if the command class\nis not supported and cannot be set by the user, the product ID is still stored\nwith the node data (rather than being reported via a command class Value\nobject)  to retain a consistent approach with the other manufacturer specific\ndata.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: A string containing the nodes product ID, or an empty string if the manufactuer-specific command class is not supported by the device.\n:rtype: str\n:see: getNodeManufacturerId_, getNodeProductType_, getNodeManufacturerName_, setNodeManufacturerName_, getNodeProductName_, setNodeProductName_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_109getNodeProductId(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeProductId (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeProductId", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeProductId") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeProductId", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1829; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_108getNodeProductId(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_108getNodeProductId(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeProductId", 0);

  /* "libopenzwave.pyx":1852
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductId(homeid, nodeid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1852; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetNodeProductId(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1853
 *         '''
 *         cdef string c_string = self.manager.GetNodeProductId(homeid, nodeid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def setNodeManufacturerName(self, homeid, nodeid, char *manufacturerName):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1853; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":1829
 *         return c_string.c_str()
 * 
 *     def getNodeProductId(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeProductId:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeProductId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1855
 *         return c_string.c_str()
 * 
 *     def setNodeManufacturerName(self, homeid, nodeid, char *manufacturerName):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeManufacturerName:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_111setNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_110setNodeManufacturerName[] = "\n.. _setNodeManufacturerName:\n\nSet the manufacturer name of a device\n\nThe manufacturer name would normally be handled by the Manufacturer Specific\ncommmand class, taking the manufacturer ID reported by the device and using it\nto look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param manufacturerName: A string containing the nodess manufacturer name.\n:type manufacturerName: str\n:see: getNodeManufacturerName_, getNodeProductName_, setNodeProductName_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_111setNodeManufacturerName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_manufacturerName;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodeManufacturerName (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_manufacturerName,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1855; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_manufacturerName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1855; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setNodeManufacturerName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1855; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_manufacturerName = __Pyx_PyObject_AsString(values[2]); if (unlikely((!__pyx_v_manufacturerName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1855; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeManufacturerName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1855; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeManufacturerName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_110setNodeManufacturerName(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_manufacturerName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_110setNodeManufacturerName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, char *__pyx_v_manufacturerName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNodeManufacturerName", 0);

  /* "libopenzwave.pyx":1878
 * 
 *         '''
 *         self.manager.SetNodeManufacturerName(homeid, nodeid, string(manufacturerName))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeProductName(self, homeid, nodeid, char *productName):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1878; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SetNodeManufacturerName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_manufacturerName));

  /* "libopenzwave.pyx":1855
 *         return c_string.c_str()
 * 
 *     def setNodeManufacturerName(self, homeid, nodeid, char *manufacturerName):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeManufacturerName:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeManufacturerName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1880
 *         self.manager.SetNodeManufacturerName(homeid, nodeid, string(manufacturerName))
 * 
 *     def setNodeProductName(self, homeid, nodeid, char *productName):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeProductName:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_113setNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_112setNodeProductName[] = "\n.. _setNodeProductName:\n\nSet the product name of a device\n\nThe product name would normally be handled by the Manufacturer Specific\ncommmand class, taking the product Type and ID reported by the device and using\nit to look up the name from the manufacturer_specific.xml file in the OpenZWave\nconfig folder.  However, there are some devices that do not support the command\nclass, so to enable the user to manually set the name, it is stored with the\nnode data and accessed via this method rather than being reported via a command\nclass Value object.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param productName: A string containing the nodes product name.\n:type productName: str\n:see: getNodeProductName_, getNodeManufacturerName_, setNodeManufacturerName_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_113setNodeProductName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_productName;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodeProductName (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_productName,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1880; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_productName)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1880; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setNodeProductName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1880; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_productName = __Pyx_PyObject_AsString(values[2]); if (unlikely((!__pyx_v_productName) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1880; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeProductName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1880; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeProductName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_112setNodeProductName(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_productName);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_112setNodeProductName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, char *__pyx_v_productName) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNodeProductName", 0);

  /* "libopenzwave.pyx":1903
 * 
 *         '''
 *         self.manager.SetNodeProductName(homeid, nodeid, string(productName))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeName(self, homeid, nodeid, char *name):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SetNodeProductName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_productName));

  /* "libopenzwave.pyx":1880
 *         self.manager.SetNodeManufacturerName(homeid, nodeid, string(manufacturerName))
 * 
 *     def setNodeProductName(self, homeid, nodeid, char *productName):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeProductName:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeProductName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1905
 *         self.manager.SetNodeProductName(homeid, nodeid, string(productName))
 * 
 *     def setNodeName(self, homeid, nodeid, char *name):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeName:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_115setNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_114setNodeName[] = "\n.. _setNodeName:\n\nSet the name of a node\n\nThe node name is a user-editable label for the node that would normally be\nhandled by the Node Naming commmand class, but many devices do not support it.\nSo that a node can always be named, OpenZWave stores it with the node data, and\nprovides access through this method and GetNodeName, rather than reporting it\nvia a command class Value object.  If the device does support the Node Naming\ncommand class, the new name will be sent to the node.  The maximum length of a\nnode name is 16 characters.\n\n:param homeI: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param nodeName: A string containing the nodes name.\n:type nodeName: str\n:see: getNodeName_, getNodeLocation_, setNodeLocation_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_115setNodeName(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_name;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodeName (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_name,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setNodeName") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_name = __Pyx_PyObject_AsString(values[2]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeName", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1905; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_114setNodeName(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_114setNodeName(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNodeName", 0);

  /* "libopenzwave.pyx":1928
 * 
 *         '''
 *         self.manager.SetNodeName(homeid, nodeid, string(name))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeLocation(self, homeid, nodeid, char *location):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1928; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SetNodeName(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_name));

  /* "libopenzwave.pyx":1905
 *         self.manager.SetNodeProductName(homeid, nodeid, string(productName))
 * 
 *     def setNodeName(self, homeid, nodeid, char *name):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeName:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeName", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1930
 *         self.manager.SetNodeName(homeid, nodeid, string(name))
 * 
 *     def setNodeLocation(self, homeid, nodeid, char *location):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeLocation:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_117setNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_116setNodeLocation[] = "\n.. _setNodeLocation:\n\nSet the location of a node\n\nThe node location is a user-editable string that would normally be handled by\nthe Node Naming commmand class, but many devices do not support it.  So that a\nnode can always report its location, OpenZWave stores it with the node data,\nand provides access through this method and GetNodeLocation, rather than\nreporting it via a command class Value object.  If the device does support the\nNode Naming command class, the new location will be sent to the node.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param location: A string containing the nodes location.\n:type location: int\n:see: getNodeLocation_, getNodeName_, setNodeName_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_117setNodeLocation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  char *__pyx_v_location;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodeLocation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_location,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_location)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setNodeLocation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_location = __Pyx_PyObject_AsString(values[2]); if (unlikely((!__pyx_v_location) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeLocation", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1930; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_116setNodeLocation(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_location);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_116setNodeLocation(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, char *__pyx_v_location) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNodeLocation", 0);

  /* "libopenzwave.pyx":1952
 * 
 *         '''
 *         self.manager.SetNodeLocation(homeid, nodeid, string(location))             # <<<<<<<<<<<<<<
 * 
 *     def setNodeOn(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1952; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SetNodeLocation(__pyx_t_1, __pyx_t_2, std::string(__pyx_v_location));

  /* "libopenzwave.pyx":1930
 *         self.manager.SetNodeName(homeid, nodeid, string(name))
 * 
 *     def setNodeLocation(self, homeid, nodeid, char *location):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeLocation:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLocation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1954
 *         self.manager.SetNodeLocation(homeid, nodeid, string(location))
 * 
 *     def setNodeOn(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeOn:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_119setNodeOn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_118setNodeOn[] = "\n.. _setNodeOn:\n\nTurns a node on\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the level reported by the nodes Basic command class to\n255, and will generate a ValueChanged notification from that class.  This\ncommand will turn on the device at its last known level, if supported by the\ndevice, otherwise it will turn it on at 100%.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to be changed.\n:type nodeId: int\n:see: setNodeOff_, setNodeLevel_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_119setNodeOn(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodeOn (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeOn", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setNodeOn") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeOn", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1954; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_118setNodeOn(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_118setNodeOn(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNodeOn", 0);

  /* "libopenzwave.pyx":1974
 *         '''
 * 
 *         self.manager.SetNodeOn(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def setNodeOff(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1974; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SetNodeOn(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1954
 *         self.manager.SetNodeLocation(homeid, nodeid, string(location))
 * 
 *     def setNodeOn(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeOn:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1976
 *         self.manager.SetNodeOn(homeid, nodeid)
 * 
 *     def setNodeOff(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeOff:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_121setNodeOff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_120setNodeOff[] = "\n.. _setNodeOff:\n\nTurns a node off\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the level reported by the nodes Basic command class to\nzero, and will generate a ValueChanged notification from that class.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to be changed.\n:type nodeId: int\n:see: setNodeOn_, setNodeLevel_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_121setNodeOff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodeOff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeOff", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1976; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setNodeOff") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1976; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeOff", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1976; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_120setNodeOff(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_120setNodeOff(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNodeOff", 0);

  /* "libopenzwave.pyx":1993
 * 
 *         '''
 *         self.manager.SetNodeOff(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def setNodeLevel(self, homeid, nodeid, level):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1993; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SetNodeOff(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":1976
 *         self.manager.SetNodeOn(homeid, nodeid)
 * 
 *     def setNodeOff(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeOff:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeOff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":1995
 *         self.manager.SetNodeOff(homeid, nodeid)
 * 
 *     def setNodeLevel(self, homeid, nodeid, level):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeLevel:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_123setNodeLevel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_122setNodeLevel[] = "\n.. _setNodeLevel:\n\nSets the basic level of a node\n\nThis is a helper method to simplify basic control of a node.  It is the\nequivalent of changing the value reported by the nodes Basic command class\nand will generate a ValueChanged notification from that class.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to be changed.\n:type nodeId: int\n:param level: The level to set the node.  Valid values are 0-99 and 255.  Zero is off and 99 is fully on.  255 will turn on the device at its last known level (if supported).\n:type level: int\n:see: setNodeOn_, setNodeOff_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_123setNodeLevel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_level = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setNodeLevel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_level,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1995; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_level)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1995; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setNodeLevel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1995; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_level = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setNodeLevel", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1995; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_122setNodeLevel(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_level);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_122setNodeLevel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_level) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setNodeLevel", 0);

  /* "libopenzwave.pyx":2014
 * 
 *         '''
 *         self.manager.SetNodeLevel(homeid, nodeid, level)             # <<<<<<<<<<<<<<
 * 
 *     def isNodeInfoReceived(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_level); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2014; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SetNodeLevel(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "libopenzwave.pyx":1995
 *         self.manager.SetNodeOff(homeid, nodeid)
 * 
 *     def setNodeLevel(self, homeid, nodeid, level):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setNodeLevel:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setNodeLevel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2016
 *         self.manager.SetNodeLevel(homeid, nodeid, level)
 * 
 *     def isNodeInfoReceived(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeInfoReceived:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_125isNodeInfoReceived(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_124isNodeInfoReceived[] = "\n.. _isNodeInfoReceived:\n\nGet whether the node information has been received\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: bool -- True if the node information has been received yet\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_125isNodeInfoReceived(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeInfoReceived (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeInfoReceived", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2016; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isNodeInfoReceived") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2016; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeInfoReceived", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2016; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeInfoReceived", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_124isNodeInfoReceived(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_124isNodeInfoReceived(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeInfoReceived", 0);

  /* "libopenzwave.pyx":2029
 * 
 *         '''
 *         return self.manager.IsNodeInfoReceived(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsNodeInfoReceived(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2029; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2016
 *         self.manager.SetNodeLevel(homeid, nodeid, level)
 * 
 *     def isNodeInfoReceived(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeInfoReceived:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeInfoReceived", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2032
 * 
 * 
 *     def getNodeClassInformation(self, homeid, nodeid, commandClassId, className = None, classVersion = None):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeClassInformation:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_127getNodeClassInformation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_126getNodeClassInformation[] = "\n.. _getNodeClassInformation:\n\nHelper method to return whether a particular class is available in a node\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:param commandClassId: control class to query\n:type commandClassId: int\n:param className: (optional, default=None) specific name of class to query\n:type className: str\n:param classVersion: (optional, default=None) specific class version\n:type classVersion: int\n:return: True if the node does have the class instantiated, will return name & version\n:rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_127getNodeClassInformation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_commandClassId = 0;
  CYTHON_UNUSED PyObject *__pyx_v_className = 0;
  CYTHON_UNUSED PyObject *__pyx_v_classVersion = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeClassInformation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_commandClassId,&__pyx_n_s_className,&__pyx_n_s_classVersion,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 0, 3, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_commandClassId)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 0, 3, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_className);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_classVersion);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeClassInformation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_commandClassId = values[2];
    __pyx_v_className = values[3];
    __pyx_v_classVersion = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeClassInformation", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2032; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeClassInformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_126getNodeClassInformation(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_commandClassId, __pyx_v_className, __pyx_v_classVersion);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_126getNodeClassInformation(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_commandClassId, CYTHON_UNUSED PyObject *__pyx_v_className, CYTHON_UNUSED PyObject *__pyx_v_classVersion) {
  std::string __pyx_v_oclassName;
  uint8_t __pyx_v_oclassVersion;
  bool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeClassInformation", 0);
  __Pyx_INCREF(__pyx_v_className);
  __Pyx_INCREF(__pyx_v_classVersion);

  /* "libopenzwave.pyx":2054
 *         cdef string oclassName
 *         cdef uint8_t oclassVersion
 *         ret=self.manager.GetNodeClassInformation(homeid, nodeid, commandClassId, &oclassName, &oclassVersion)             # <<<<<<<<<<<<<<
 *         if ret :
 *             className = oclassName.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_commandClassId); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2054; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_ret = __pyx_v_self->manager->GetNodeClassInformation(__pyx_t_1, __pyx_t_2, __pyx_t_3, (&__pyx_v_oclassName), (&__pyx_v_oclassVersion));

  /* "libopenzwave.pyx":2055
 *         cdef uint8_t oclassVersion
 *         ret=self.manager.GetNodeClassInformation(homeid, nodeid, commandClassId, &oclassName, &oclassVersion)
 *         if ret :             # <<<<<<<<<<<<<<
 *             className = oclassName.c_str()
 *             classVersion = oclassVersion
 */
  __pyx_t_4 = (__pyx_v_ret != 0);
  if (__pyx_t_4) {

    /* "libopenzwave.pyx":2056
 *         ret=self.manager.GetNodeClassInformation(homeid, nodeid, commandClassId, &oclassName, &oclassVersion)
 *         if ret :
 *             className = oclassName.c_str()             # <<<<<<<<<<<<<<
 *             classVersion = oclassVersion
 *             return ret
 */
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_oclassName.c_str()); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2056; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_className, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":2057
 *         if ret :
 *             className = oclassName.c_str()
 *             classVersion = oclassVersion             # <<<<<<<<<<<<<<
 *             return ret
 *         else :
 */
    __pyx_t_5 = __Pyx_PyInt_From_uint8_t(__pyx_v_oclassVersion); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2057; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF_SET(__pyx_v_classVersion, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":2058
 *             className = oclassName.c_str()
 *             classVersion = oclassVersion
 *             return ret             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2058; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2060
 *             return ret
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2032
 * 
 * 
 *     def getNodeClassInformation(self, homeid, nodeid, commandClassId, className = None, classVersion = None):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNodeClassInformation:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeClassInformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_className);
  __Pyx_XDECREF(__pyx_v_classVersion);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2063
 * 
 * 
 *     def isNodeAwake(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeAwake: Get whether the node is awake or asleep
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_129isNodeAwake(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_128isNodeAwake[] = "\n.. _isNodeAwake: Get whether the node is awake or asleep\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the node is awake.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_129isNodeAwake(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeId = 0;
  PyObject *__pyx_v_nodeId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeAwake (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeId,&__pyx_n_s_nodeId,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeId)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeAwake", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isNodeAwake") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeId = values[0];
    __pyx_v_nodeId = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeAwake", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2063; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeAwake", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_128isNodeAwake(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeId, __pyx_v_nodeId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_128isNodeAwake(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId, PyObject *__pyx_v_nodeId) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeAwake", 0);

  /* "libopenzwave.pyx":2075
 * 
 *         '''
 *         return self.manager.IsNodeAwake(homeId, nodeId)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeId); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsNodeAwake(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2075; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2063
 * 
 * 
 *     def isNodeAwake(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isNodeAwake: Get whether the node is awake or asleep
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeAwake", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2078
 * 
 * 
 *     def isNodeFailed(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. isNodeFailed: Get whether the node is working or has failed
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_131isNodeFailed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_130isNodeFailed[] = "\n.. isNodeFailed: Get whether the node is working or has failed\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: True if the node has failed and is no longer part of the network.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_131isNodeFailed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeId = 0;
  PyObject *__pyx_v_nodeId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeFailed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeId,&__pyx_n_s_nodeId,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeId)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("isNodeFailed", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2078; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isNodeFailed") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2078; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeId = values[0];
    __pyx_v_nodeId = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeFailed", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2078; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeFailed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_130isNodeFailed(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeId, __pyx_v_nodeId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_130isNodeFailed(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId, PyObject *__pyx_v_nodeId) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeFailed", 0);

  /* "libopenzwave.pyx":2090
 * 
 *         '''
 *         return self.manager.IsNodeFailed(homeId, nodeId)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeId); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsNodeFailed(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2090; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2078
 * 
 * 
 *     def isNodeFailed(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. isNodeFailed: Get whether the node is working or has failed
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isNodeFailed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2093
 * 
 * 
 *     def getNodeQueryStage(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. getNodeQueryStage: Get whether the node's query stage as a string
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_133getNodeQueryStage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_132getNodeQueryStage[] = "\n.. getNodeQueryStage: Get whether the node's query stage as a string\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to query.\n:type nodeId: int\n:return: name of current query stage as a string.\n:rtype: str\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_133getNodeQueryStage(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeId = 0;
  PyObject *__pyx_v_nodeId = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeQueryStage (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeId,&__pyx_n_s_nodeId,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeId)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeQueryStage", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2093; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNodeQueryStage") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2093; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeId = values[0];
    __pyx_v_nodeId = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeQueryStage", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2093; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeQueryStage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_132getNodeQueryStage(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeId, __pyx_v_nodeId);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_132getNodeQueryStage(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId, PyObject *__pyx_v_nodeId) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeQueryStage", 0);

  /* "libopenzwave.pyx":2105
 * 
 *         '''
 *         cdef string c_string = self.manager.GetNodeQueryStage(homeId, nodeId)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeId); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetNodeQueryStage(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":2106
 *         '''
 *         cdef string c_string = self.manager.GetNodeQueryStage(homeId, nodeId)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2093
 * 
 * 
 *     def getNodeQueryStage(self, homeId, nodeId):             # <<<<<<<<<<<<<<
 *         '''
 * .. getNodeQueryStage: Get whether the node's query stage as a string
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeQueryStage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2109
 * 
 * 
 *     def getNodeQueryStageCode(self, queryStage):             # <<<<<<<<<<<<<<
 *         '''
 * .. getNodeQueryStageCode: Get code value from a query stage description
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_135getNodeQueryStageCode(PyObject *__pyx_v_self, PyObject *__pyx_v_queryStage); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_134getNodeQueryStageCode[] = "\n.. getNodeQueryStageCode: Get code value from a query stage description\n\n:param queryStage: The query stage description.\n:type queryStage: str\n:return: code value.\n:rtype: int\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_135getNodeQueryStageCode(PyObject *__pyx_v_self, PyObject *__pyx_v_queryStage) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeQueryStageCode (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_134getNodeQueryStageCode(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_queryStage));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_134getNodeQueryStageCode(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_queryStage) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeQueryStageCode", 0);

  /* "libopenzwave.pyx":2119
 * 
 *         '''
 *         if queryStage == "ProtocolInfo":             # <<<<<<<<<<<<<<
 *             # Retrieve protocol information
 *             # QueryStage_ProtocolInfo
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_ProtocolInfo, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2122
 *             # Retrieve protocol information
 *             # QueryStage_ProtocolInfo
 *             return 0             # <<<<<<<<<<<<<<
 *         elif queryStage == "Probe":
 *             # Ping device to see if alive
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2123
 *             # QueryStage_ProtocolInfo
 *             return 0
 *         elif queryStage == "Probe":             # <<<<<<<<<<<<<<
 *             # Ping device to see if alive
 *             # QueryStage_Probe
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Probe, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2126
 *             # Ping device to see if alive
 *             # QueryStage_Probe
 *             return 1             # <<<<<<<<<<<<<<
 *         elif queryStage == "WakeUp":
 *             # Start wake up process if a sleeping node
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_1);
    __pyx_r = __pyx_int_1;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2127
 *             # QueryStage_Probe
 *             return 1
 *         elif queryStage == "WakeUp":             # <<<<<<<<<<<<<<
 *             # Start wake up process if a sleeping node
 *             # QueryStage_WakeUp
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_WakeUp, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2130
 *             # Start wake up process if a sleeping node
 *             # QueryStage_WakeUp
 *             return 2             # <<<<<<<<<<<<<<
 *         elif queryStage == "ManufacturerSpecific1":
 *             # Retrieve manufacturer name and product ids if ProtocolInfo lets us
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_2);
    __pyx_r = __pyx_int_2;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2131
 *             # QueryStage_WakeUp
 *             return 2
 *         elif queryStage == "ManufacturerSpecific1":             # <<<<<<<<<<<<<<
 *             # Retrieve manufacturer name and product ids if ProtocolInfo lets us
 *             # QueryStage_ManufacturerSpecific1
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_ManufacturerSpecific1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2134
 *             # Retrieve manufacturer name and product ids if ProtocolInfo lets us
 *             # QueryStage_ManufacturerSpecific1
 *             return 3             # <<<<<<<<<<<<<<
 *         elif queryStage == "NodeInfo":
 *             # Retrieve info about supported, controlled command classes
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_3);
    __pyx_r = __pyx_int_3;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2135
 *             # QueryStage_ManufacturerSpecific1
 *             return 3
 *         elif queryStage == "NodeInfo":             # <<<<<<<<<<<<<<
 *             # Retrieve info about supported, controlled command classes
 *             # QueryStage_NodeInfo
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_NodeInfo, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2138
 *             # Retrieve info about supported, controlled command classes
 *             # QueryStage_NodeInfo
 *             return 4             # <<<<<<<<<<<<<<
 *         elif queryStage == "ManufacturerSpecific2":
 *             # Retrieve manufacturer name and product ids
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_4);
    __pyx_r = __pyx_int_4;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2139
 *             # QueryStage_NodeInfo
 *             return 4
 *         elif queryStage == "ManufacturerSpecific2":             # <<<<<<<<<<<<<<
 *             # Retrieve manufacturer name and product ids
 *             # QueryStage_ManufacturerSpecific2
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_ManufacturerSpecific2, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2142
 *             # Retrieve manufacturer name and product ids
 *             # QueryStage_ManufacturerSpecific2
 *             return 5             # <<<<<<<<<<<<<<
 *         elif queryStage == "Versions":
 *             # Retrieve version information
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_5);
    __pyx_r = __pyx_int_5;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2143
 *             # QueryStage_ManufacturerSpecific2
 *             return 5
 *         elif queryStage == "Versions":             # <<<<<<<<<<<<<<
 *             # Retrieve version information
 *             # QueryStage_Versions
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Versions, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2146
 *             # Retrieve version information
 *             # QueryStage_Versions
 *             return 6             # <<<<<<<<<<<<<<
 *         elif queryStage == "Instances":
 *             # Retrieve information about multiple command class instances
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_6);
    __pyx_r = __pyx_int_6;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2147
 *             # QueryStage_Versions
 *             return 6
 *         elif queryStage == "Instances":             # <<<<<<<<<<<<<<
 *             # Retrieve information about multiple command class instances
 *             # QueryStage_Instances
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Instances, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2150
 *             # Retrieve information about multiple command class instances
 *             # QueryStage_Instances
 *             return 7             # <<<<<<<<<<<<<<
 *         elif queryStage == "Static":
 *             # Retrieve static information (doesn't change)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_7);
    __pyx_r = __pyx_int_7;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2151
 *             # QueryStage_Instances
 *             return 7
 *         elif queryStage == "Static":             # <<<<<<<<<<<<<<
 *             # Retrieve static information (doesn't change)
 *             # QueryStage_Static
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Static, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2154
 *             # Retrieve static information (doesn't change)
 *             # QueryStage_Static
 *             return 8             # <<<<<<<<<<<<<<
 *         elif queryStage == "Probe1":
 *             # Ping a device upon starting with configuration
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_8);
    __pyx_r = __pyx_int_8;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2155
 *             # QueryStage_Static
 *             return 8
 *         elif queryStage == "Probe1":             # <<<<<<<<<<<<<<
 *             # Ping a device upon starting with configuration
 *             # QueryStage_Probe1
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Probe1, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2158
 *             # Ping a device upon starting with configuration
 *             # QueryStage_Probe1
 *             return 9             # <<<<<<<<<<<<<<
 *         elif queryStage == "Associations":
 *             # Retrieve information about associations
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_9);
    __pyx_r = __pyx_int_9;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2159
 *             # QueryStage_Probe1
 *             return 9
 *         elif queryStage == "Associations":             # <<<<<<<<<<<<<<
 *             # Retrieve information about associations
 *             # QueryStage_Associations
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Associations, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2162
 *             # Retrieve information about associations
 *             # QueryStage_Associations
 *             return 10             # <<<<<<<<<<<<<<
 *         elif queryStage == "Neighbors":
 *             # Retrieve node neighbor list
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_10);
    __pyx_r = __pyx_int_10;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2163
 *             # QueryStage_Associations
 *             return 10
 *         elif queryStage == "Neighbors":             # <<<<<<<<<<<<<<
 *             # Retrieve node neighbor list
 *             # QueryStage_Neighbors
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Neighbors, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2166
 *             # Retrieve node neighbor list
 *             # QueryStage_Neighbors
 *             return 11             # <<<<<<<<<<<<<<
 *         elif queryStage == "Session":
 *             # Retrieve session information (changes infrequently)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_11);
    __pyx_r = __pyx_int_11;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2167
 *             # QueryStage_Neighbors
 *             return 11
 *         elif queryStage == "Session":             # <<<<<<<<<<<<<<
 *             # Retrieve session information (changes infrequently)
 *             # QueryStage_Session
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Session, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2170
 *             # Retrieve session information (changes infrequently)
 *             # QueryStage_Session
 *             return 12             # <<<<<<<<<<<<<<
 *         elif queryStage == "Dynamic":
 *             # Retrieve dynamic information (changes frequently)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_12);
    __pyx_r = __pyx_int_12;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2171
 *             # QueryStage_Session
 *             return 12
 *         elif queryStage == "Dynamic":             # <<<<<<<<<<<<<<
 *             # Retrieve dynamic information (changes frequently)
 *             # QueryStage_Dynamic
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Dynamic, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2174
 *             # Retrieve dynamic information (changes frequently)
 *             # QueryStage_Dynamic
 *             return 13             # <<<<<<<<<<<<<<
 *         elif queryStage == "Configuration":
 *             # Retrieve configurable parameter information (only done on request)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_13);
    __pyx_r = __pyx_int_13;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2175
 *             # QueryStage_Dynamic
 *             return 13
 *         elif queryStage == "Configuration":             # <<<<<<<<<<<<<<
 *             # Retrieve configurable parameter information (only done on request)
 *             # QueryStage_Configuration
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Configuration, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2178
 *             # Retrieve configurable parameter information (only done on request)
 *             # QueryStage_Configuration
 *             return 14             # <<<<<<<<<<<<<<
 *         elif queryStage == "Complete":
 *             # Query process is completed for this node
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_14);
    __pyx_r = __pyx_int_14;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2179
 *             # QueryStage_Configuration
 *             return 14
 *         elif queryStage == "Complete":             # <<<<<<<<<<<<<<
 *             # Query process is completed for this node
 *             # QueryStage_Complete
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_Complete, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2182
 *             # Query process is completed for this node
 *             # QueryStage_Complete
 *             return 15             # <<<<<<<<<<<<<<
 *         elif queryStage == "None":
 *             # Query process hasn't started for this node
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_15);
    __pyx_r = __pyx_int_15;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2183
 *             # QueryStage_Complete
 *             return 15
 *         elif queryStage == "None":             # <<<<<<<<<<<<<<
 *             # Query process hasn't started for this node
 *             # QueryStage_None
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_queryStage, __pyx_n_s_None, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":2186
 *             # Query process hasn't started for this node
 *             # QueryStage_None
 *             return 16             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_16);
    __pyx_r = __pyx_int_16;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2187
 *             # QueryStage_None
 *             return 16
 *         return None             # <<<<<<<<<<<<<<
 * 
 * #
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2109
 * 
 * 
 *     def getNodeQueryStageCode(self, queryStage):             # <<<<<<<<<<<<<<
 *         '''
 * .. getNodeQueryStageCode: Get code value from a query stage description
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNodeQueryStageCode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2202
 * #        bool SetValueListSelection(ValueID& valueid, string selecteditem)
 * 
 *     def setValue(self, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValue:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_137setValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_136setValue[] = "\n.. _setValue:\n\nSets the value of a device valueid.\nDue to the possibility of a device being asleep, the command is assumed to suceeed, and the value\nheld by the node is updated directly.  This will be reverted by a future status message from the device\nif the Z-Wave message actually failed to get through.  Notification callbacks will be sent in both cases.\n\n:param id: The ID of a value.\n:type id: int\n:param value: The value to set.\n:type value: int\n:return: An integer representing the result of the operation  0 : The C method fails, 1 : The C method succeed, 2 : Can't find id in the map\n:rtype: int\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_137setValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setValue", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2202; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2202; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_id = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValue", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2202; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_136setValue(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_id, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_136setValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_value) {
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  uint8_t __pyx_v_type_byte;
  int32_t __pyx_v_type_int;
  int16_t __pyx_v_type_short;
  std::string __pyx_v_type_string;
  uint8_t *__pyx_v_type_raw;
  long __pyx_v_ret;
  PyObject *__pyx_v_datatype = NULL;
  bool __pyx_v_cret;
  Py_ssize_t __pyx_v_x;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  long __pyx_t_7;
  uint8_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  float __pyx_t_11;
  int32_t __pyx_t_12;
  int16_t __pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setValue", 0);

  /* "libopenzwave.pyx":2226
 *         cdef string type_string
 *         cdef uint8_t* type_raw
 *         ret = 2             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 */
  __pyx_v_ret = 2;

  /* "libopenzwave.pyx":2227
 *         cdef uint8_t* type_raw
 *         ret = 2
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2228
 *         ret = 2
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 *             if datatype == "Bool":
 *                 type_bool = value
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2228; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":2229
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Bool, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2230
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "libopenzwave.pyx":2231
 *             if datatype == "Bool":
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "libopenzwave.pyx":2232
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 type_byte = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":2233
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 type_byte = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Byte, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2234
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 *                 type_byte = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_8 = __Pyx_PyInt_As_uint8_t(__pyx_v_value); if (unlikely((__pyx_t_8 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_byte = __pyx_t_8;

      /* "libopenzwave.pyx":2235
 *             elif datatype == "Byte":
 *                 type_byte = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Raw":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_byte);

      /* "libopenzwave.pyx":2236
 *                 type_byte = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Raw":
 *                 type_raw = <uint8_t*> malloc(len(value)*sizeof(uint8_t))
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":2237
 *                 cret = self.manager.SetValue(values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Raw":             # <<<<<<<<<<<<<<
 *                 type_raw = <uint8_t*> malloc(len(value)*sizeof(uint8_t))
 *                 for x in range(0, len(value)):
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Raw, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2238
 *                 ret = 1 if cret else 0
 *             elif datatype == "Raw":
 *                 type_raw = <uint8_t*> malloc(len(value)*sizeof(uint8_t))             # <<<<<<<<<<<<<<
 *                 for x in range(0, len(value)):
 *                     print value[x]
 */
      __pyx_t_9 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_raw = ((uint8_t *)malloc((__pyx_t_9 * (sizeof(uint8_t)))));

      /* "libopenzwave.pyx":2239
 *             elif datatype == "Raw":
 *                 type_raw = <uint8_t*> malloc(len(value)*sizeof(uint8_t))
 *                 for x in range(0, len(value)):             # <<<<<<<<<<<<<<
 *                     print value[x]
 *                     type_raw[x] = ord(value[x])
 */
      __pyx_t_9 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_x = __pyx_t_10;

        /* "libopenzwave.pyx":2240
 *                 type_raw = <uint8_t*> malloc(len(value)*sizeof(uint8_t))
 *                 for x in range(0, len(value)):
 *                     print value[x]             # <<<<<<<<<<<<<<
 *                     type_raw[x] = ord(value[x])
 *                 cret = self.manager.SetValue(values_map.at(id), type_raw, len(value))
 */
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_value, __pyx_v_x, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_PrintOne(0, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "libopenzwave.pyx":2241
 *                 for x in range(0, len(value)):
 *                     print value[x]
 *                     type_raw[x] = ord(value[x])             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_raw, len(value))
 *                 ret = 1 if cret else 0
 */
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_value, __pyx_v_x, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2241; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ord, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_8 = __Pyx_PyInt_As_uint8_t(__pyx_t_5); if (unlikely((__pyx_t_8 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        (__pyx_v_type_raw[__pyx_v_x]) = __pyx_t_8;
      }

      /* "libopenzwave.pyx":2242
 *                     print value[x]
 *                     type_raw[x] = ord(value[x])
 *                 cret = self.manager.SetValue(values_map.at(id), type_raw, len(value))             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *                 free(type_raw)
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_raw, __pyx_t_9);

      /* "libopenzwave.pyx":2243
 *                     type_raw[x] = ord(value[x])
 *                 cret = self.manager.SetValue(values_map.at(id), type_raw, len(value))
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *                 free(type_raw)
 *             elif datatype == "Decimal":
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;

      /* "libopenzwave.pyx":2244
 *                 cret = self.manager.SetValue(values_map.at(id), type_raw, len(value))
 *                 ret = 1 if cret else 0
 *                 free(type_raw)             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 type_float = value
 */
      free(__pyx_v_type_raw);
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":2245
 *                 ret = 1 if cret else 0
 *                 free(type_raw)
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 type_float = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Decimal, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2246
 *                 free(type_raw)
 *             elif datatype == "Decimal":
 *                 type_float = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_float = __pyx_t_11;

      /* "libopenzwave.pyx":2247
 *             elif datatype == "Decimal":
 *                 type_float = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_float);

      /* "libopenzwave.pyx":2248
 *                 type_float = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Int":
 *                 type_int = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":2249
 *                 cret = self.manager.SetValue(values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                 type_int = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Int, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2250
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 *                 type_int = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = __Pyx_PyInt_As_int32_t(__pyx_v_value); if (unlikely((__pyx_t_12 == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_int = __pyx_t_12;

      /* "libopenzwave.pyx":2251
 *             elif datatype == "Int":
 *                 type_int = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_int);

      /* "libopenzwave.pyx":2252
 *                 type_int = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Short":
 *                 type_short = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":2253
 *                 cret = self.manager.SetValue(values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                 type_short = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Short, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2254
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 *                 type_short = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_13 = __Pyx_PyInt_As_int16_t(__pyx_v_value); if (unlikely((__pyx_t_13 == (int16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_short = __pyx_t_13;

      /* "libopenzwave.pyx":2255
 *             elif datatype == "Short":
 *                 type_short = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_short);

      /* "libopenzwave.pyx":2256
 *                 type_short = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "String":
 *                 type_string = string(value)
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":2257
 *                 cret = self.manager.SetValue(values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_String, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2258
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_14 = __Pyx_PyObject_AsString(__pyx_v_value); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_14);

      /* "libopenzwave.pyx":2259
 *             elif datatype == "String":
 *                 type_string = string(value)
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "libopenzwave.pyx":2260
 *                 type_string = string(value)
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Button":
 *                 type_bool = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":2261
 *                 cret = self.manager.SetValue(values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Button, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2262
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "libopenzwave.pyx":2263
 *             elif datatype == "Button":
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "libopenzwave.pyx":2264
 *                 type_bool = value
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "List":
 *                 type_string = string(value)
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":2265
 *                 cret = self.manager.SetValue(values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 #logging.debug("SetValueListSelection %s" % value)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_List, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2266
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 #logging.debug("SetValueListSelection %s" % value)
 *                 cret = self.manager.SetValueListSelection(values_map.at(id), type_string)
 */
      __pyx_t_14 = __Pyx_PyObject_AsString(__pyx_v_value); if (unlikely((!__pyx_t_14) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_14);

      /* "libopenzwave.pyx":2268
 *                 type_string = string(value)
 *                 #logging.debug("SetValueListSelection %s" % value)
 *                 cret = self.manager.SetValueListSelection(values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 #logging.debug("SetValueListSelection %s" % cret)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetValueListSelection(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "libopenzwave.pyx":2270
 *                 cret = self.manager.SetValueListSelection(values_map.at(id), type_string)
 *                 #logging.debug("SetValueListSelection %s" % cret)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":2271
 *                 #logging.debug("SetValueListSelection %s" % cret)
 *                 ret = 1 if cret else 0
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def refreshValue(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_ret); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2202
 * #        bool SetValueListSelection(ValueID& valueid, string selecteditem)
 * 
 *     def setValue(self, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValue:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.setValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2273
 *         return ret
 * 
 *     def refreshValue(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _refreshValue:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_139refreshValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_138refreshValue[] = "\n.. _refreshValue:\n\nRefreshes the specified value from the Z-Wave network.\nA call to this function causes the library to send a message to the network to retrieve the current value\nof the specified ValueID (just like a poll, except only one-time, not recurring).\n\n:param id: The unique identifier of the value to be refreshed.\n:type id: int\n:return: bool -- True if the driver and node were found; false otherwise\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_139refreshValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("refreshValue (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_138refreshValue(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_138refreshValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("refreshValue", 0);

  /* "libopenzwave.pyx":2286
 * 
 *         '''
 *         return self.manager.RefreshValue(values_map.at(id))             # <<<<<<<<<<<<<<
 * 
 *     def getValueLabel(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->RefreshValue(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2273
 *         return ret
 * 
 *     def refreshValue(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _refreshValue:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.refreshValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2288
 *         return self.manager.RefreshValue(values_map.at(id))
 * 
 *     def getValueLabel(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueLabel:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_141getValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_140getValueLabel[] = "\n.. _getValueLabel:\n\nGets the user-friendly label for the value\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the user-friendly label of the value\n:rtype: str\n:see: setValueLabel_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_141getValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueLabel (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_140getValueLabel(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_140getValueLabel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueLabel", 0);

  /* "libopenzwave.pyx":2302
 *        '''
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             c_string = self.manager.GetValueLabel(values_map.at(id))
 *             return c_string.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2303
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueLabel(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return c_string.c_str()
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_string = __pyx_v_self->manager->GetValueLabel(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "libopenzwave.pyx":2304
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueLabel(values_map.at(id))
 *             return c_string.c_str()             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2306
 *             return c_string.c_str()
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def setValueLabel(self, id, char *label):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2288
 *         return self.manager.RefreshValue(values_map.at(id))
 * 
 *     def getValueLabel(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueLabel:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueLabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2308
 *             return None
 * 
 *     def setValueLabel(self, id, char *label):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueLabel:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_143setValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_142setValueLabel[] = "\n.. _setValueLabel:\n\nSets the user-friendly label for the value\n\n:param id: The ID of a value.\n:type id: int\n:param label: The label of the value.\n:type label: str\n:see: getValueLabel_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_143setValueLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  char *__pyx_v_label;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setValueLabel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_label,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setValueLabel", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setValueLabel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_id = values[0];
    __pyx_v_label = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValueLabel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2308; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueLabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_142setValueLabel(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_id, __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_142setValueLabel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, char *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setValueLabel", 0);

  /* "libopenzwave.pyx":2321
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetValueLabel(values_map.at(id), string(label))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2321; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2322
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetValueLabel(values_map.at(id), string(label))             # <<<<<<<<<<<<<<
 * 
 *     def getValueUnits(self, id):
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->manager->SetValueLabel(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), std::string(__pyx_v_label));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":2308
 *             return None
 * 
 *     def setValueLabel(self, id, char *label):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueLabel:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueLabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2324
 *             self.manager.SetValueLabel(values_map.at(id), string(label))
 * 
 *     def getValueUnits(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueUnits:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_145getValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_144getValueUnits[] = "\n.. _getValueUnits:\n\nGets the units that the value is measured in.\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the value of the units.\n:rtype: str\n:see: setValueUnits_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_145getValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueUnits (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_144getValueUnits(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_144getValueUnits(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueUnits", 0);

  /* "libopenzwave.pyx":2338
 *         '''
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             c_string = self.manager.GetValueUnits(values_map.at(id))
 *             return c_string.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2339
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueUnits(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return c_string.c_str()
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_string = __pyx_v_self->manager->GetValueUnits(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "libopenzwave.pyx":2340
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueUnits(values_map.at(id))
 *             return c_string.c_str()             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2342
 *             return c_string.c_str()
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def setValueUnits(self, id, char *unit):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2324
 *             self.manager.SetValueLabel(values_map.at(id), string(label))
 * 
 *     def getValueUnits(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueUnits:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueUnits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2344
 *             return None
 * 
 *     def setValueUnits(self, id, char *unit):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueUnits:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_147setValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_146setValueUnits[] = "\n.. _setValueUnits:\n\nSets the units that the value is measured in.\n\n:param id: The ID of a value.\n:type id: int\n:param label: The new value of the units.\n:type label: str\n:see: getValueUnits_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_147setValueUnits(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  char *__pyx_v_unit;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setValueUnits (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_unit,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_unit)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setValueUnits", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setValueUnits") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_id = values[0];
    __pyx_v_unit = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_unit) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValueUnits", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2344; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueUnits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_146setValueUnits(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_id, __pyx_v_unit);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_146setValueUnits(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, char *__pyx_v_unit) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setValueUnits", 0);

  /* "libopenzwave.pyx":2357
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetValueUnits(values_map.at(id), string(unit))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2358
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetValueUnits(values_map.at(id), string(unit))             # <<<<<<<<<<<<<<
 * 
 *     def getValueHelp(self, id):
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->manager->SetValueUnits(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), std::string(__pyx_v_unit));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":2344
 *             return None
 * 
 *     def setValueUnits(self, id, char *unit):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueUnits:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueUnits", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2360
 *             self.manager.SetValueUnits(values_map.at(id), string(unit))
 * 
 *     def getValueHelp(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueHelp:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_149getValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_148getValueHelp[] = "\n.. _getValueHelp:\n\nGets a help string describing the value's purpose and usage.\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the value help text.\n:rtype: str\n:see: setValueHelp_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_149getValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueHelp (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_148getValueHelp(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_148getValueHelp(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueHelp", 0);

  /* "libopenzwave.pyx":2374
 *         '''
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             c_string = self.manager.GetValueHelp(values_map.at(id))
 *             return c_string.c_str()
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2375
 *         cdef string c_string
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueHelp(values_map.at(id))             # <<<<<<<<<<<<<<
 *             return c_string.c_str()
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_c_string = __pyx_v_self->manager->GetValueHelp(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));

    /* "libopenzwave.pyx":2376
 *         if values_map.find(id) != values_map.end():
 *             c_string = self.manager.GetValueHelp(values_map.at(id))
 *             return c_string.c_str()             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2378
 *             return c_string.c_str()
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def setValueHelp(self, id, char *help):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2360
 *             self.manager.SetValueUnits(values_map.at(id), string(unit))
 * 
 *     def getValueHelp(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueHelp:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueHelp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2380
 *             return None
 * 
 *     def setValueHelp(self, id, char *help):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueHelp:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_151setValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_150setValueHelp[] = "\n.. _setValueHelp:\n\nSets a help string describing the value's purpose and usage.\n\n:param id: the ID of a value.\n:type id: int\n:param help: The new value of the help text.\n:type help: str\n:see: getValueHelp_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_151setValueHelp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  char *__pyx_v_help;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setValueHelp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_help,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_help)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setValueHelp", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setValueHelp") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_id = values[0];
    __pyx_v_help = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_help) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValueHelp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2380; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueHelp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_150setValueHelp(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_id, __pyx_v_help);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_150setValueHelp(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, char *__pyx_v_help) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setValueHelp", 0);

  /* "libopenzwave.pyx":2393
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetValueHelp(values_map.at(id), string(help))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2394
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetValueHelp(values_map.at(id), string(help))             # <<<<<<<<<<<<<<
 * 
 *     def getValueMin(self, id):
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->manager->SetValueHelp(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), std::string(__pyx_v_help));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":2380
 *             return None
 * 
 *     def setValueHelp(self, id, char *help):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setValueHelp:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setValueHelp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2396
 *             self.manager.SetValueHelp(values_map.at(id), string(help))
 * 
 *     def getValueMin(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueMin:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_153getValueMin(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_152getValueMin[] = "\n.. _getValueMin:\n\nGets the minimum that this value may contain.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value minimum.\n:rtype: int\n:see: getValueMax_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_153getValueMin(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueMin (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_152getValueMin(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_152getValueMin(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueMin", 0);

  /* "libopenzwave.pyx":2409
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.GetValueMin(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2409; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2410
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetValueMin(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->manager->GetValueMin(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2412
 *             return self.manager.GetValueMin(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueMax(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2396
 *             self.manager.SetValueHelp(values_map.at(id), string(help))
 * 
 *     def getValueMin(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueMin:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueMin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2414
 *             return None
 * 
 *     def getValueMax(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueMax:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_155getValueMax(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_154getValueMax[] = "\n.. _getValueMax:\n\nGets the maximum that this value may contain.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value maximum.\n:rtype: int\n:see: getValueMin_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_155getValueMax(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueMax (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_154getValueMax(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_154getValueMax(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueMax", 0);

  /* "libopenzwave.pyx":2427
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.GetValueMax(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2428
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetValueMax(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_From_uint32_t(__pyx_v_self->manager->GetValueMax(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2430
 *             return self.manager.GetValueMax(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def isValueReadOnly(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2414
 *             return None
 * 
 *     def getValueMax(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueMax:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2432
 *             return None
 * 
 *     def isValueReadOnly(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueReadOnly:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_157isValueReadOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_156isValueReadOnly[] = "\n.. _isValueReadOnly:\n\nTest whether the value is read-only.\n\n:param id: The ID of a value.\n:type id: int\n:return: True if the value cannot be changed by the user.\n:rtype: bool\n:see: isValueWriteOnly_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_157isValueReadOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isValueReadOnly (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_156isValueReadOnly(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_156isValueReadOnly(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isValueReadOnly", 0);

  /* "libopenzwave.pyx":2445
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.IsValueReadOnly(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2446
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.IsValueReadOnly(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsValueReadOnly(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2448
 *             return self.manager.IsValueReadOnly(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def isValueWriteOnly(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2432
 *             return None
 * 
 *     def isValueReadOnly(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueReadOnly:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isValueReadOnly", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2450
 *             return None
 * 
 *     def isValueWriteOnly(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueWriteOnly:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_159isValueWriteOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_158isValueWriteOnly[] = "\n.. _isValueWriteOnly:\n\nTest whether the value is write-only.\n\n:param id: The ID of a value.\n:type id: int\n:return: True if the value can only be written to and not read.\n:rtype: bool\n:see: isValueReadOnly_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_159isValueWriteOnly(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isValueWriteOnly (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_158isValueWriteOnly(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_158isValueWriteOnly(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isValueWriteOnly", 0);

  /* "libopenzwave.pyx":2463
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.IsValueWriteOnly(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2464
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.IsValueWriteOnly(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsValueWriteOnly(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2466
 *             return self.manager.IsValueWriteOnly(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def isValueSet(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2450
 *             return None
 * 
 *     def isValueWriteOnly(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueWriteOnly:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isValueWriteOnly", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2468
 *             return None
 * 
 *     def isValueSet(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueSet:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_161isValueSet(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_160isValueSet[] = "\n.. _isValueSet:\n\nTest whether the value has been set.\n\n:param id: the ID of a value.\n:type id: int\n:return: True if the value has actually been set by a status message from the device, rather than simply being the default.\n:rtype: bool\n:see: getValue_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_161isValueSet(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isValueSet (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_160isValueSet(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_160isValueSet(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isValueSet", 0);

  /* "libopenzwave.pyx":2483
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.IsValueSet(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2484
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.IsValueSet(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsValueSet(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2486
 *             return self.manager.IsValueSet(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def isValuePolled(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2468
 *             return None
 * 
 *     def isValueSet(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValueSet:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isValueSet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2488
 *             return None
 * 
 *     def isValuePolled(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValuePolled:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_163isValuePolled(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_162isValuePolled[] = "\n.. _isValuePolled:\n\nTest whether the value is currently being polled.\n\n:param id: the ID of a value.\n:type id: int\n:return: True if the value is being polled, otherwise false.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_163isValuePolled(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isValuePolled (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_162isValuePolled(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_162isValuePolled(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isValuePolled", 0);

  /* "libopenzwave.pyx":2500
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.IsValuePolled(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2501
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.IsValuePolled(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->IsValuePolled(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2501; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2503
 *             return self.manager.IsValuePolled(values_map.at(id))
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueGenre(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2488
 *             return None
 * 
 *     def isValuePolled(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _isValuePolled:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.isValuePolled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2505
 *             return None
 * 
 *     def getValueGenre(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueGenre:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_165getValueGenre(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_164getValueGenre[] = "\n.. _getValueGenre:\n\nGet the genre of the value.  The genre classifies a value to enable\nlow-level system or configuration parameters to be filtered out\nby the application\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the type of the value\n:rtype: str\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueCommandClass_getValueAsString_, getValue_, getValueType_, getValueInstance_, getValueIndex_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_165getValueGenre(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueGenre (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_164getValueGenre(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_164getValueGenre(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_v_genre = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueGenre", 0);

  /* "libopenzwave.pyx":2523
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             genre = PyGenres[values_map.at(id).GetGenre()]
 *             return genre
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2523; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2524
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             genre = PyGenres[values_map.at(id).GetGenre()]             # <<<<<<<<<<<<<<
 *             return genre
 *         else :
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyGenres); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetGenre()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2524; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2524; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_genre = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":2525
 *         if values_map.find(id) != values_map.end():
 *             genre = PyGenres[values_map.at(id).GetGenre()]
 *             return genre             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_genre);
    __pyx_r = __pyx_v_genre;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2527
 *             return genre
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueCommandClass(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2505
 *             return None
 * 
 *     def getValueGenre(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueGenre:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueGenre", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_genre);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2529
 *             return None
 * 
 *     def getValueCommandClass(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueCommandClass:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_167getValueCommandClass(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_166getValueCommandClass[] = "\n.. _getValueCommandClass:\n\nGet the command class instance of this value.  It is possible for there to be\nmultiple instances of a command class, although currently it appears that\nonly the SensorMultilevel command class ever does this.  Knowledge of\ninstances and command classes is not required to use OpenZWave, but this\ninformation is exposed in case it is of interest.\n\n\n:param id: The ID of a value.\n:type id: int\n:return: The command class of the value\n:rtype: int\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueGenre_, getValueAsString_, getValue_, getValueType_, getValueInstance_, getValueIndex_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_167getValueCommandClass(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueCommandClass (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_166getValueCommandClass(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_166getValueCommandClass(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  uint8_t __pyx_v_cmd_cls;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueCommandClass", 0);

  /* "libopenzwave.pyx":2550
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             cmd_cls = values_map.at(id).GetCommandClassId()
 *             return cmd_cls
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2550; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2551
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             cmd_cls = values_map.at(id).GetCommandClassId()             # <<<<<<<<<<<<<<
 *             return cmd_cls
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_cmd_cls = __pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetCommandClassId();

    /* "libopenzwave.pyx":2552
 *         if values_map.find(id) != values_map.end():
 *             cmd_cls = values_map.at(id).GetCommandClassId()
 *             return cmd_cls             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_cmd_cls); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2552; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2554
 *             return cmd_cls
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueInstance(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2529
 *             return None
 * 
 *     def getValueCommandClass(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueCommandClass:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueCommandClass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2556
 *             return None
 * 
 *     def getValueInstance(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueInstance:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_169getValueInstance(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_168getValueInstance[] = "\n.. _getValueInstance:\n\nGet the command class instance of this value.  It is possible for there to be\nmultiple instances of a command class, although currently it appears that\nonly the SensorMultilevel command class ever does this.\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the type of the value\n:rtype: str\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueCommandClass_, getValueAsString_, getValue_, getValueType_, getValueIndex_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_169getValueInstance(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueInstance (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_168getValueInstance(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_168getValueInstance(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  uint8_t __pyx_v_genre;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueInstance", 0);

  /* "libopenzwave.pyx":2574
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             genre = values_map.at(id).GetInstance()
 *             return genre
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2574; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2575
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             genre = values_map.at(id).GetInstance()             # <<<<<<<<<<<<<<
 *             return genre
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_genre = __pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetInstance();

    /* "libopenzwave.pyx":2576
 *         if values_map.find(id) != values_map.end():
 *             genre = values_map.at(id).GetInstance()
 *             return genre             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_genre); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2576; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2578
 *             return genre
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueIndex(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2556
 *             return None
 * 
 *     def getValueInstance(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueInstance:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueInstance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2580
 *             return None
 * 
 *     def getValueIndex(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueIndex:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_171getValueIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_170getValueIndex[] = "\n.. _getValueIndex:\n\nGet the value index.  The index is used to identify one of multiple\nvalues created and managed by a command class.  In the case of configurable\nparameters (handled by the configuration command class), the index is the\nsame as the parameter ID.\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the type of the value\n:rtype: str\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueCommandClass_, getValueAsString_, getValue_, getValueType_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_171getValueIndex(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueIndex (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_170getValueIndex(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_170getValueIndex(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  uint8_t __pyx_v_genre;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueIndex", 0);

  /* "libopenzwave.pyx":2599
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             genre = values_map.at(id).GetIndex()
 *             return genre
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2600
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             genre = values_map.at(id).GetIndex()             # <<<<<<<<<<<<<<
 *             return genre
 *         else :
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2600; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_genre = __pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetIndex();

    /* "libopenzwave.pyx":2601
 *         if values_map.find(id) != values_map.end():
 *             genre = values_map.at(id).GetIndex()
 *             return genre             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_genre); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2601; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2603
 *             return genre
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValueType(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2580
 *             return None
 * 
 *     def getValueIndex(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueIndex:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2605
 *             return None
 * 
 *     def getValueType(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueType:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_173getValueType(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_172getValueType[] = "\n.. _getValueType:\n\nGets the type of the value\n\n:param id: The ID of a value.\n:type id: int\n:return: A string containing the type of the value\n:rtype: str\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValue_, getValueInstance_, getValueIndex_, getValueCommandClass_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_173getValueType(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueType (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_172getValueType(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_172getValueType(CYTHON_UNUSED struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_v_datatype = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueType", 0);

  /* "libopenzwave.pyx":2621
 * 
 *        '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             return datatype
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2621; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2622
 *        '''
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 *             return datatype
 *         else :
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2622; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":2623
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             return datatype             # <<<<<<<<<<<<<<
 *         else :
 *             return None
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_datatype);
    __pyx_r = __pyx_v_datatype;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2625
 *             return datatype
 *         else :
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def getValue(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2605
 *             return None
 * 
 *     def getValueType(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueType:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2627
 *             return None
 * 
 *     def getValue(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValue:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_175getValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_174getValue[] = "\n.. _getValue:\n\nGets a value.\n\n:param id: The ID of a value.\n:type id: int\n:param value: The value to set.\n:type value: int\n:return: Depending of the type of the valueId, None otherwise\n:rtype: variable\n:see: isValueSet_, getValueAsBool_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_, getValueCommandClass_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_175getValue(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValue (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_174getValue(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_174getValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValue", 0);

  /* "libopenzwave.pyx":2645
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsBool(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_self->manager, __pyx_v_id);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_MemoryError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_MemoryError); }
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2645; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2627
 *             return None
 * 
 *     def getValue(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValue:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2647
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsBool(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsBool:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_177getValueAsBool(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_176getValueAsBool[] = "\n.. _getValueAsBool:\n\nGets a value as a bool.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: bool\n:see: isValueSet_, getValue_, getValueAsByte_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_, getValueCommandClass_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_177getValueAsBool(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueAsBool (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_176getValueAsBool(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_176getValueAsBool(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueAsBool", 0);

  /* "libopenzwave.pyx":2663
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsByte(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_self->manager, __pyx_v_id);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_MemoryError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_MemoryError); }
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2663; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2647
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsBool(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsBool:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsBool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2665
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsByte(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsByte:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_179getValueAsByte(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_178getValueAsByte[] = "\n.. _getValueAsByte:\n\nGets a value as an 8-bit unsigned integer.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: int\n:see: isValueSet_, getValue_, getValueAsBool_, getValueListItems_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_, getValueCommandClass_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_179getValueAsByte(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueAsByte (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_178getValueAsByte(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_178getValueAsByte(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueAsByte", 0);

  /* "libopenzwave.pyx":2681
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsFloat(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_self->manager, __pyx_v_id);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_MemoryError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_MemoryError); }
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2681; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2665
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsByte(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsByte:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsByte", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2683
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsFloat(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsFloat:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_181getValueAsFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_180getValueAsFloat[] = "\n.. _getValueAsFloat:\n\nGets a value as a float.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: float\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueListItems_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_181getValueAsFloat(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueAsFloat (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_180getValueAsFloat(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_180getValueAsFloat(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueAsFloat", 0);

  /* "libopenzwave.pyx":2699
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsShort(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_self->manager, __pyx_v_id);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_MemoryError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_MemoryError); }
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2683
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsFloat(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsFloat:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsFloat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2701
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsShort(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsShort:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_183getValueAsShort(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_182getValueAsShort[] = "\n.. _getValueAsShort:\n\nGets a value as a 16-bit signed integer.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: int\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsInt_, getValueAsString_, getValueListItems_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_183getValueAsShort(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueAsShort (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_182getValueAsShort(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_182getValueAsShort(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueAsShort", 0);

  /* "libopenzwave.pyx":2717
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsInt(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_self->manager, __pyx_v_id);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_MemoryError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_MemoryError); }
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2701
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsShort(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsShort:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsShort", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2719
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsInt(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsInt:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_185getValueAsInt(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_184getValueAsInt[] = "\n.. _getValueAsInt:\n\nGets a value as a 32-bit signed integer.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: int\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsString_, getValueListItems_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_185getValueAsInt(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueAsInt (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_184getValueAsInt(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_184getValueAsInt(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueAsInt", 0);

  /* "libopenzwave.pyx":2735
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueAsString(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_self->manager, __pyx_v_id);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_MemoryError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_MemoryError); }
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2735; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2719
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsInt(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsInt:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsInt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2737
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsString(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsString:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_187getValueAsString(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_186getValueAsString[] = "\n.. _getValueAsString:\n\nGets a value as a string.\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: str\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_ , getValueListSelectionNum_, getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueListItems_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_187getValueAsString(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueAsString (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_186getValueAsString(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_186getValueAsString(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueAsString", 0);

  /* "libopenzwave.pyx":2753
 * 
 *         '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueListSelectionStr(self,  id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_self->manager, __pyx_v_id);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_MemoryError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_MemoryError); }
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2753; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2737
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueAsString(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueAsString:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueAsString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2755
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueListSelectionStr(self,  id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueListSelectionStr:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_189getValueListSelectionStr(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_188getValueListSelectionStr[] = "\n.. _getValueListSelectionStr:\n\nGets value of items from a list value\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: str\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionNum_, getValueListItems_,getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_\n    ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_189getValueListSelectionStr(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueListSelectionStr (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_188getValueListSelectionStr(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_188getValueListSelectionStr(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueListSelectionStr", 0);

  /* "libopenzwave.pyx":2770
 * getValueType_, getValueInstance_, getValueIndex_
 *     '''
 *         return getValueFromType(self.manager,id)             # <<<<<<<<<<<<<<
 * 
 *     def getValueListSelectionNum(self,  id):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_f_12libopenzwave_getValueFromType(__pyx_v_self->manager, __pyx_v_id);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_MemoryError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_MemoryError); }
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2755
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueListSelectionStr(self,  id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueListSelectionStr:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueListSelectionStr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2772
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueListSelectionNum(self,  id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueListSelectionNum:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_191getValueListSelectionNum(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_190getValueListSelectionNum[] = "\n.. _getValueListSelectionNum:\n\nGets value of items from a list value\n\n:param id: The ID of a value.\n:type id: int\n:return: The value\n:rtype: int\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_, getValueListItems_,getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_\n    ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_191getValueListSelectionNum(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueListSelectionNum (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_190getValueListSelectionNum(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_190getValueListSelectionNum(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  int32_t __pyx_v_type_int;
  long __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueListSelectionNum", 0);

  /* "libopenzwave.pyx":2788
 *     '''
 *         cdef int32_t type_int
 *         ret=-1             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListSelection(values_map.at(id), &type_int):
 */
  __pyx_v_ret = -1;

  /* "libopenzwave.pyx":2789
 *         cdef int32_t type_int
 *         ret=-1
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             if self.manager.GetValueListSelection(values_map.at(id), &type_int):
 *                 ret = type_int
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2790
 *         ret=-1
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListSelection(values_map.at(id), &type_int):             # <<<<<<<<<<<<<<
 *                 ret = type_int
 *         #print "//////// Value Num list item : " ,  ret
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = (__pyx_v_self->manager->GetValueListSelection(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_type_int)) != 0);
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":2791
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListSelection(values_map.at(id), &type_int):
 *                 ret = type_int             # <<<<<<<<<<<<<<
 *         #print "//////// Value Num list item : " ,  ret
 *         return ret
 */
      __pyx_v_ret = __pyx_v_type_int;
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":2793
 *                 ret = type_int
 *         #print "//////// Value Num list item : " ,  ret
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def getValueListItems(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v_ret); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2772
 *         return getValueFromType(self.manager,id)
 * 
 *     def getValueListSelectionNum(self,  id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueListSelectionNum:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueListSelectionNum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2795
 *         return ret
 * 
 *     def getValueListItems(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueListItems:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_193getValueListItems(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_192getValueListItems[] = "\n.. _getValueListItems:\n\nGets the list of items from a list value\n\n:param id: The ID of a value.\n:type id: int\n:return: The list of possible values\n:rtype: set()\n:see: isValueSet_, getValue_, getValueAsBool_, getValueAsByte_, getValueListSelectionStr_ , getValueListSelectionNum_ getValueAsFloat_, getValueAsShort_, getValueAsInt_, getValueAsString_, getValueType_, getValueInstance_, getValueIndex_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_193getValueListItems(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueListItems (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_192getValueListItems(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_192getValueListItems(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  std::vector<std::string> __pyx_v_vect;
  PyObject *__pyx_v_ret = NULL;
  std::string __pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uint64_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueListItems", 0);

  /* "libopenzwave.pyx":2813
 *         #print "**** libopenzwave.GetValueListItems ******"
 *         cdef vector[string] vect
 *         ret = set()             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListItems(values_map.at(id), &vect):
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":2814
 *         cdef vector[string] vect
 *         ret = set()
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             if self.manager.GetValueListItems(values_map.at(id), &vect):
 *                 while not vect.empty() :
 */
  __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_2) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_3) {

    /* "libopenzwave.pyx":2815
 *         ret = set()
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListItems(values_map.at(id), &vect):             # <<<<<<<<<<<<<<
 *                 while not vect.empty() :
 *                     temp = vect.back()
 */
    __pyx_t_2 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_2 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = (__pyx_v_self->manager->GetValueListItems(__pyx_v_12libopenzwave_values_map.at(__pyx_t_2), (&__pyx_v_vect)) != 0);
    if (__pyx_t_3) {

      /* "libopenzwave.pyx":2816
 *         if values_map.find(id) != values_map.end():
 *             if self.manager.GetValueListItems(values_map.at(id), &vect):
 *                 while not vect.empty() :             # <<<<<<<<<<<<<<
 *                     temp = vect.back()
 *                     ret.add(temp.c_str())
 */
      while (1) {
        __pyx_t_3 = ((!(__pyx_v_vect.empty() != 0)) != 0);
        if (!__pyx_t_3) break;

        /* "libopenzwave.pyx":2817
 *             if self.manager.GetValueListItems(values_map.at(id), &vect):
 *                 while not vect.empty() :
 *                     temp = vect.back()             # <<<<<<<<<<<<<<
 *                     ret.add(temp.c_str())
 *                     vect.pop_back();
 */
        __pyx_v_temp = __pyx_v_vect.back();

        /* "libopenzwave.pyx":2818
 *                 while not vect.empty() :
 *                     temp = vect.back()
 *                     ret.add(temp.c_str())             # <<<<<<<<<<<<<<
 *                     vect.pop_back();
 *             #print "++++ list des items : " ,  ret
 */
        __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_temp.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = PySet_Add(__pyx_v_ret, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2818; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "libopenzwave.pyx":2819
 *                     temp = vect.back()
 *                     ret.add(temp.c_str())
 *                     vect.pop_back();             # <<<<<<<<<<<<<<
 *             #print "++++ list des items : " ,  ret
 *         return ret
 */
        __pyx_v_vect.pop_back();
      }
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":2821
 *                     vect.pop_back();
 *             #print "++++ list des items : " ,  ret
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def pressButton(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2795
 *         return ret
 * 
 *     def getValueListItems(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueListItems:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueListItems", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2823
 *         return ret
 * 
 *     def pressButton(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _pressButton:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_195pressButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_194pressButton[] = "\n.. _pressButton:\n\nStarts an activity in a device.\nSince buttons are write-only values that do not report a state,\nno notification callbacks are sent.\n\n:param id: The ID of an integer value.\n:type id: int\n:return: True if the activity was started. Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.\n:rtype: bool\n:see: releaseButton_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_195pressButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pressButton (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_194pressButton(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_194pressButton(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pressButton", 0);

  /* "libopenzwave.pyx":2838
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.PressButton(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2839
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.PressButton(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->PressButton(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2841
 *             return self.manager.PressButton(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def releaseButton(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2823
 *         return ret
 * 
 *     def pressButton(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _pressButton:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.pressButton", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2843
 *             return False
 * 
 *     def releaseButton(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _releaseButton:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_197releaseButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_196releaseButton[] = "\n.. _releaseButton:\n\nStops an activity in a device.\nSince buttons are write-only values that do not report a state,\nno notification callbacks are sent.\n\n:param id: the ID of an integer value.\n:type id: int\n:return: True if the activity was stopped. Returns false if the value is not a ValueID::ValueType_Button. The type can be tested with a call to ValueID::GetType.\n:rtype: bool\n:see: pressButton_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_197releaseButton(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("releaseButton (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_196releaseButton(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_196releaseButton(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("releaseButton", 0);

  /* "libopenzwave.pyx":2858
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.ReleaseButton(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2858; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2859
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.ReleaseButton(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->ReleaseButton(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2859; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2861
 *             return self.manager.ReleaseButton(values_map.at(id))
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2843
 *             return False
 * 
 *     def releaseButton(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _releaseButton:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.releaseButton", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2864
 * 
 * 
 *     def getValueFloatPrecision(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueFloatPrecision: Gets a float value's precision
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_199getValueFloatPrecision(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_198getValueFloatPrecision[] = "\n.. _getValueFloatPrecision: Gets a float value's precision\n\n:param id: The unique identifier of the value.\n:type id: int\n:return: a float value's precision.\n:rtype: int\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_199getValueFloatPrecision(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValueFloatPrecision (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_198getValueFloatPrecision(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_198getValueFloatPrecision(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  uint8_t __pyx_v_precision;
  bool __pyx_v_success;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValueFloatPrecision", 0);

  /* "libopenzwave.pyx":2875
 *         '''
 *         cdef uint8_t precision
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             success = self.manager.GetValueFloatPrecision(values_map.at(id), &precision)
 *             return precision if success else None
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2875; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2876
 *         cdef uint8_t precision
 *         if values_map.find(id) != values_map.end():
 *             success = self.manager.GetValueFloatPrecision(values_map.at(id), &precision)             # <<<<<<<<<<<<<<
 *             return precision if success else None
 *         return None
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2876; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_success = __pyx_v_self->manager->GetValueFloatPrecision(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), (&__pyx_v_precision));

    /* "libopenzwave.pyx":2877
 *         if values_map.find(id) != values_map.end():
 *             success = self.manager.GetValueFloatPrecision(values_map.at(id), &precision)
 *             return precision if success else None             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    if ((__pyx_v_success != 0)) {
      __pyx_t_4 = __Pyx_PyInt_From_uint8_t(__pyx_v_precision); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2877; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __pyx_t_4;
      __pyx_t_4 = 0;
    } else {
      __Pyx_INCREF(Py_None);
      __pyx_t_3 = Py_None;
    }
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2878
 *             success = self.manager.GetValueFloatPrecision(values_map.at(id), &precision)
 *             return precision if success else None
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     def getChangeVerified(self, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2864
 * 
 * 
 *     def getValueFloatPrecision(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getValueFloatPrecision: Gets a float value's precision
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getValueFloatPrecision", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2880
 *         return None
 * 
 *     def getChangeVerified(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getChangeVerified: determine if value changes upon a refresh should be verified.
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_201getChangeVerified(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_200getChangeVerified[] = "\n.. _getChangeVerified: determine if value changes upon a refresh should be verified.\n\nIf so, the library will immediately refresh the value a second time whenever a change is observed.\nThis helps to filter out spurious data reported occasionally by some devices.\n\n:param id:  The unique identifier of the value whose changes should or should not be verified.\n:type id: int\n:return: True if is verified.\n:rtype: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_201getChangeVerified(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getChangeVerified (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_200getChangeVerified(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_200getChangeVerified(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getChangeVerified", 0);

  /* "libopenzwave.pyx":2894
 *         '''
 * 
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.GetChangeVerified(values_map.at(id))
 *         return False
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2895
 * 
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetChangeVerified(values_map.at(id))             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->GetChangeVerified(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2896
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetChangeVerified(values_map.at(id))
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def setChangeVerified(self, id, verify ):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "libopenzwave.pyx":2880
 *         return None
 * 
 *     def getChangeVerified(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getChangeVerified: determine if value changes upon a refresh should be verified.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getChangeVerified", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2898
 *         return False
 * 
 *     def setChangeVerified(self, id, verify ):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setChangeVerified: Sets a flag indicating whether value changes noted upon a refresh should be verified.
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_203setChangeVerified(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_202setChangeVerified[] = "\n.. _setChangeVerified: Sets a flag indicating whether value changes noted upon a refresh should be verified.\n\nIf so, the library will immediately refresh the value a second time whenever a change is observed. This helps to filter out spurious data reported occasionally by some devices.\n\n:param id: The unique identifier of the value whose changes should or should not be verified.\n:type id: int\n:param verify if true, verify changes; if false, don't verify changes\n:type verify: bool\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_203setChangeVerified(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_verify = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setChangeVerified (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_verify,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_verify)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setChangeVerified", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2898; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setChangeVerified") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2898; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_id = values[0];
    __pyx_v_verify = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setChangeVerified", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2898; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setChangeVerified", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_202setChangeVerified(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_id, __pyx_v_verify);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_202setChangeVerified(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_verify) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  bool __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setChangeVerified", 0);

  /* "libopenzwave.pyx":2911
 *         '''
 * 
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.SetChangeVerified(values_map.at(id), verify)
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2911; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2912
 * 
 *         if values_map.find(id) != values_map.end():
 *             self.manager.SetChangeVerified(values_map.at(id), verify)             # <<<<<<<<<<<<<<
 * 
 * #
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_verify); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2912; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->manager->SetChangeVerified(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":2898
 *         return False
 * 
 *     def setChangeVerified(self, id, verify ):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setChangeVerified: Sets a flag indicating whether value changes noted upon a refresh should be verified.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setChangeVerified", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2929
 * # have been made, they are sent to the device by calling SetSchedule.
 * #
 *     def setSwitchPoint(self, id, hours, minutes, setback):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSwitchPoint:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_205setSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_204setSwitchPoint[] = "\n.. _setSwitchPoint:\n\nSet a switch point in the schedule.\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:param hours: The hours part of the time when the switch point will trigger. The time is set using the 24-hour clock, so this value must be between 0 and 23.\n:type hours: int\n:param minutes: The minutes part of the time when the switch point will trigger.  This value must be between 0 and 59.\n:type minutes: int\n:param setback: The setback in tenths of a degree Celsius.  The setback value can range from -128 (-12.8C) to 120 (12.0C).  There are two special setback values - 121 is used to set Frost Protection mode, and 122 is used to set Energy Saving mode.\n:type setback: int\n:return: True if the switch point is set.\n:rtype: bool\n:see: removeSwitchPoint_, clearSwitchPoints_, getSwitchPoint_, getNumSwitchPoints_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_205setSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_hours = 0;
  PyObject *__pyx_v_minutes = 0;
  PyObject *__pyx_v_setback = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSwitchPoint (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_hours,&__pyx_n_s_minutes,&__pyx_n_s_setback,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hours)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_minutes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_setback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setSwitchPoint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_id = values[0];
    __pyx_v_hours = values[1];
    __pyx_v_minutes = values[2];
    __pyx_v_setback = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSwitchPoint", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2929; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSwitchPoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_204setSwitchPoint(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_id, __pyx_v_hours, __pyx_v_minutes, __pyx_v_setback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_204setSwitchPoint(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_hours, PyObject *__pyx_v_minutes, PyObject *__pyx_v_setback) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  uint8_t __pyx_t_4;
  uint8_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setSwitchPoint", 0);

  /* "libopenzwave.pyx":2948
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.SetSwitchPoint(values_map.at(id), hours, minutes, setback)
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2948; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2949
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.SetSwitchPoint(values_map.at(id), hours, minutes, setback)             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_hours); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyInt_As_uint8_t(__pyx_v_minutes); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __Pyx_PyInt_As_uint8_t(__pyx_v_setback); if (unlikely((__pyx_t_5 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->SetSwitchPoint(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3, __pyx_t_4, __pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2949; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2951
 *             return self.manager.SetSwitchPoint(values_map.at(id), hours, minutes, setback)
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def removeSwitchPoint(self, id, hours, minutes):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2929
 * # have been made, they are sent to the device by calling SetSchedule.
 * #
 *     def setSwitchPoint(self, id, hours, minutes, setback):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSwitchPoint:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.setSwitchPoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2953
 *             return False
 * 
 *     def removeSwitchPoint(self, id, hours, minutes):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeSwitchPoint:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_207removeSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_206removeSwitchPoint[] = "\n.. _removeSwitchPoint:\n\nRemove a switch point from the schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:param hours: The hours part of the time when the switch point will trigger.  The time is set using the 24-hour clock, so this value must be between 0 and 23.\n:type hours: int\n:param minutes: The minutes part of the time when the switch point will trigger.  This value must be between 0 and 59.\n:type minutes: int\n:return: True if the switch point is removed.\n:rtype: bool\n:see: setSwitchPoint_, clearSwitchPoints_, getSwitchPoint_, getNumSwitchPoints_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_207removeSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_hours = 0;
  PyObject *__pyx_v_minutes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeSwitchPoint (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_hours,&__pyx_n_s_minutes,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hours)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("removeSwitchPoint", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2953; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_minutes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("removeSwitchPoint", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2953; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "removeSwitchPoint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2953; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_id = values[0];
    __pyx_v_hours = values[1];
    __pyx_v_minutes = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeSwitchPoint", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2953; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeSwitchPoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_206removeSwitchPoint(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_id, __pyx_v_hours, __pyx_v_minutes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_206removeSwitchPoint(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_hours, PyObject *__pyx_v_minutes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  uint8_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeSwitchPoint", 0);

  /* "libopenzwave.pyx":2970
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.RemoveSwitchPoint(values_map.at(id), hours, minutes)
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2970; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2971
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.RemoveSwitchPoint(values_map.at(id), hours, minutes)             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_hours); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyInt_As_uint8_t(__pyx_v_minutes); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->RemoveSwitchPoint(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3, __pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2971; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":2973
 *             return self.manager.RemoveSwitchPoint(values_map.at(id), hours, minutes)
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     def clearSwitchPoints(self, id):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2953
 *             return False
 * 
 *     def removeSwitchPoint(self, id, hours, minutes):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeSwitchPoint:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.removeSwitchPoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2975
 *             return False
 * 
 *     def clearSwitchPoints(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _clearSwitchPoints:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_209clearSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_208clearSwitchPoints[] = "\n.. _clearSwitchPoints:\n\nClears all switch points from the schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:return: True if all switch points are clear.\n:rtype: bool\n:see: setSwitchPoint_, removeSwitchPoint_, getSwitchPoint_, getNumSwitchPoints_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_209clearSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearSwitchPoints (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_208clearSwitchPoints(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_208clearSwitchPoints(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clearSwitchPoints", 0);

  /* "libopenzwave.pyx":2988
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             self.manager.ClearSwitchPoints(values_map.at(id))
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2988; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":2989
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             self.manager.ClearSwitchPoints(values_map.at(id))             # <<<<<<<<<<<<<<
 * 
 *     def getSwitchPoint(self, id, idx, hours, minutes, setback):
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2989; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->manager->ClearSwitchPoints(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1));
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":2975
 *             return False
 * 
 *     def clearSwitchPoints(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _clearSwitchPoints:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.clearSwitchPoints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":2991
 *             self.manager.ClearSwitchPoints(values_map.at(id))
 * 
 *     def getSwitchPoint(self, id, idx, hours, minutes, setback):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSwitchPoint:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_211getSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_210getSwitchPoint[] = "\n.. _getSwitchPoint:\n\nGets switch point data from the schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:param idx: The index of the switch point, between zero and one less than the value returned by GetNumSwitchPoints.\n:type idx: int\n:param hours: An integer that will be filled with the hours part of the switch point data.\n:type hours: int\n:param minutes: An integer that will be filled with the minutes part of the switch point data.\n:type minutes: int\n:param setback: An integer that will be filled with the setback value.  This can range from -128 (-12.8C)to 120 (12.0C).  There are two special setback values - 121 is used to set Frost Protection mode, and 122 is used to set Energy Saving mode.\n:type setback: int\n:return: True if successful.  Returns False if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.\n:rtype: bool\n:see: setSwitchPoint_, removeSwitchPoint_, clearSwitchPoints_, getNumSwitchPoints_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_211getSwitchPoint(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_idx = 0;
  CYTHON_UNUSED PyObject *__pyx_v_hours = 0;
  CYTHON_UNUSED PyObject *__pyx_v_minutes = 0;
  CYTHON_UNUSED PyObject *__pyx_v_setback = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSwitchPoint (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_id,&__pyx_n_s_idx,&__pyx_n_s_hours,&__pyx_n_s_minutes,&__pyx_n_s_setback,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_idx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hours)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_minutes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_setback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, 4); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getSwitchPoint") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_id = values[0];
    __pyx_v_idx = values[1];
    __pyx_v_hours = values[2];
    __pyx_v_minutes = values[3];
    __pyx_v_setback = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getSwitchPoint", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2991; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getSwitchPoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_210getSwitchPoint(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_id, __pyx_v_idx, __pyx_v_hours, __pyx_v_minutes, __pyx_v_setback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_210getSwitchPoint(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id, PyObject *__pyx_v_idx, CYTHON_UNUSED PyObject *__pyx_v_hours, CYTHON_UNUSED PyObject *__pyx_v_minutes, CYTHON_UNUSED PyObject *__pyx_v_setback) {
  uint8_t __pyx_v_ohours;
  uint8_t __pyx_v_ominutes;
  int8_t __pyx_v_osetback;
  bool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  uint8_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSwitchPoint", 0);
  __Pyx_INCREF(__pyx_v_hours);
  __Pyx_INCREF(__pyx_v_minutes);
  __Pyx_INCREF(__pyx_v_setback);

  /* "libopenzwave.pyx":3015
 *         cdef uint8_t ominutes
 *         cdef int8_t osetback
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \
 *                 &ohours, &ominutes, &osetback)
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3015; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":3016
 *         cdef int8_t osetback
 *         if values_map.find(id) != values_map.end():
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \             # <<<<<<<<<<<<<<
 *                 &ohours, &ominutes, &osetback)
 *             if ret :
 */
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_idx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3016; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "libopenzwave.pyx":3017
 *         if values_map.find(id) != values_map.end():
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \
 *                 &ohours, &ominutes, &osetback)             # <<<<<<<<<<<<<<
 *             if ret :
 *                 hours = ohours
 */
    __pyx_v_ret = __pyx_v_self->manager->GetSwitchPoint(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_t_3, (&__pyx_v_ohours), (&__pyx_v_ominutes), (&__pyx_v_osetback));

    /* "libopenzwave.pyx":3018
 *             ret=self.manager.GetSwitchPoint(values_map.at(id), idx, \
 *                 &ohours, &ominutes, &osetback)
 *             if ret :             # <<<<<<<<<<<<<<
 *                 hours = ohours
 *                 minutes = ominutes
 */
    __pyx_t_2 = (__pyx_v_ret != 0);
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3019
 *                 &ohours, &ominutes, &osetback)
 *             if ret :
 *                 hours = ohours             # <<<<<<<<<<<<<<
 *                 minutes = ominutes
 *                 setback = osetback
 */
      __pyx_t_4 = __Pyx_PyInt_From_uint8_t(__pyx_v_ohours); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3019; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_hours, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":3020
 *             if ret :
 *                 hours = ohours
 *                 minutes = ominutes             # <<<<<<<<<<<<<<
 *                 setback = osetback
 *             return ret
 */
      __pyx_t_4 = __Pyx_PyInt_From_uint8_t(__pyx_v_ominutes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3020; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_minutes, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":3021
 *                 hours = ohours
 *                 minutes = ominutes
 *                 setback = osetback             # <<<<<<<<<<<<<<
 *             return ret
 *         else :
 */
      __pyx_t_4 = __Pyx_PyInt_From_int8_t(__pyx_v_osetback); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3021; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_setback, __pyx_t_4);
      __pyx_t_4 = 0;
      goto __pyx_L4;
    }
    __pyx_L4:;

    /* "libopenzwave.pyx":3022
 *                 minutes = ominutes
 *                 setback = osetback
 *             return ret             # <<<<<<<<<<<<<<
 *         else :
 *             return False
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_ret); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3022; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":3024
 *             return ret
 *         else :
 *             return False             # <<<<<<<<<<<<<<
 * #        return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":2991
 *             self.manager.ClearSwitchPoints(values_map.at(id))
 * 
 *     def getSwitchPoint(self, id, idx, hours, minutes, setback):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSwitchPoint:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getSwitchPoint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_hours);
  __Pyx_XDECREF(__pyx_v_minutes);
  __Pyx_XDECREF(__pyx_v_setback);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3027
 * #        return False
 * 
 *     def getNumSwitchPoints(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumSwitchPoints:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_213getNumSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_212getNumSwitchPoints[] = "\n.. _getNumSwitchPoints:\n\nGet the number of switch points defined in a schedule\n\n:param id: The unique identifier of the schedule value.\n:type id: int\n:return: The number of switch points defined in this schedule.  Returns zero if the value is not a ValueID::ValueType_Schedule. The type can be tested with a call to ValueID::GetType.\n:rtype: int\n:see: setSwitchPoint_, removeSwitchPoint_, clearSwitchPoints_, getSwitchPoint_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_213getNumSwitchPoints(PyObject *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumSwitchPoints (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_212getNumSwitchPoints(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_212getNumSwitchPoints(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNumSwitchPoints", 0);

  /* "libopenzwave.pyx":3040
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.GetNumSwitchPoints(values_map.at(id))
 *         else :
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3040; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":3041
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.GetNumSwitchPoints(values_map.at(id))             # <<<<<<<<<<<<<<
 *         else :
 *             return 0
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetNumSwitchPoints(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3041; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "libopenzwave.pyx":3043
 *             return self.manager.GetNumSwitchPoints(values_map.at(id))
 *         else :
 *             return 0             # <<<<<<<<<<<<<<
 * 
 * #
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":3027
 * #        return False
 * 
 *     def getNumSwitchPoints(self, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumSwitchPoints:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumSwitchPoints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3054
 * # not routed, the message might not otherwise reach all the nodes).
 * #
 *     def switchAllOn(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _switchAllOn:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_215switchAllOn(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_214switchAllOn[] = "\n.. _switchAllOn:\n\nSwitch all devices on.  All devices that support the SwitchAll command class\nwill be turned on.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:see: switchAllOff_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_215switchAllOn(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("switchAllOn (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_214switchAllOn(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_214switchAllOn(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("switchAllOn", 0);

  /* "libopenzwave.pyx":3066
 * 
 *         '''
 *         self.manager.SwitchAllOn(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def switchAllOff(self, homeid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3066; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SwitchAllOn(__pyx_t_1);

  /* "libopenzwave.pyx":3054
 * # not routed, the message might not otherwise reach all the nodes).
 * #
 *     def switchAllOn(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _switchAllOn:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.switchAllOn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3068
 *         self.manager.SwitchAllOn(homeid)
 * 
 *     def switchAllOff(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _switchAllOff:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_217switchAllOff(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_216switchAllOff[] = "\n.. _switchAllOff:\n\nSwitch all devices off.  All devices that support the SwitchAll command class\nwill be turned off.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:see: switchAllOn_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_217switchAllOff(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("switchAllOff (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_216switchAllOff(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_216switchAllOff(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("switchAllOff", 0);

  /* "libopenzwave.pyx":3080
 * 
 *         '''
 *         self.manager.SwitchAllOff(homeid)             # <<<<<<<<<<<<<<
 * 
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3080; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SwitchAllOff(__pyx_t_1);

  /* "libopenzwave.pyx":3068
 *         self.manager.SwitchAllOn(homeid)
 * 
 *     def switchAllOff(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _switchAllOff:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.switchAllOff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3093
 * # parameters for every Z-Wave.  See the config folder in the project source code for examples.
 * #
 *     def setConfigParam(self, homeid, nodeid, param, value, size=2):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setConfigParam:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_219setConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_218setConfigParam[] = "\n.. _setConfigParam:\n\nSet the value of a configurable parameter in a device.\n\nSome devices have various parameters that can be configured to control the\ndevice behaviour.  These are not reported by the device over the Z-Wave network\nbut can usually be found in the devices user manual.  This method returns\nimmediately, without waiting for confirmation from the device that the change\nhas been made.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to configure.\n:type nodeId: int\n:param param: The index of the parameter.\n:type param: int\n:param value: The value to which the parameter should be set.\n:type value: int\n:param size: Is an optional number of bytes to be sent for the parameter value. Defaults to 2.\n:type size: int\n:return: True if the message setting the value was sent to the device.\n:rtype: bool\n:see: requestConfigParam_, requestAllConfigParams_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_219setConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_param = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_size = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setConfigParam (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_param,&__pyx_n_s_value,&__pyx_n_s_size,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = ((PyObject *)__pyx_int_2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConfigParam", 0, 4, 5, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3093; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_param)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConfigParam", 0, 4, 5, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3093; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConfigParam", 0, 4, 5, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3093; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setConfigParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3093; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_param = values[2];
    __pyx_v_value = values[3];
    __pyx_v_size = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConfigParam", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3093; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setConfigParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_218setConfigParam(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_param, __pyx_v_value, __pyx_v_size);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_218setConfigParam(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_param, PyObject *__pyx_v_value, PyObject *__pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  uint32_t __pyx_t_4;
  uint8_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setConfigParam", 0);

  /* "libopenzwave.pyx":3120
 * 
 *         '''
 *         return self.manager.SetConfigParam(homeid, nodeid, param, value, size)             # <<<<<<<<<<<<<<
 * 
 *     def requestConfigParam(self, homeid, nodeid, param):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_param); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_As_uint32_t(__pyx_v_value); if (unlikely((__pyx_t_4 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyInt_As_uint8_t(__pyx_v_size); if (unlikely((__pyx_t_5 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->SetConfigParam(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4, __pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3093
 * # parameters for every Z-Wave.  See the config folder in the project source code for examples.
 * #
 *     def setConfigParam(self, homeid, nodeid, param, value, size=2):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setConfigParam:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.setConfigParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3122
 *         return self.manager.SetConfigParam(homeid, nodeid, param, value, size)
 * 
 *     def requestConfigParam(self, homeid, nodeid, param):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestConfigParam:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_221requestConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_220requestConfigParam[] = "\n.. _requestConfigParam:\n\nRequest the value of a configurable parameter from a device.\n\nSome devices have various parameters that can be configured to control the\ndevice behaviour.  These are not reported by the device over the Z-Wave network\nbut can usually be found in the devices user manual.  This method requests\nthe value of a parameter from the device, and then returns immediately,\nwithout waiting for a response.  If the parameter index is valid for this\ndevice, and the device is awake, the value will eventually be reported via a\nValueChanged notification callback.  The ValueID reported in the callback will\nhave an index set the same as _param and a command class set to the same value\nas returned by a call to Configuration::StaticGetCommandClassId.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to configure.\n:type nodeId: int\n:param param: The index of the parameter.\n:type param: int\n:see: requestAllConfigParams_, setConfigParam_, valueID_, notification_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_221requestConfigParam(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_param = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("requestConfigParam (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_param,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3122; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_param)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3122; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "requestConfigParam") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3122; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_param = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestConfigParam", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3122; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestConfigParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_220requestConfigParam(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_param);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_220requestConfigParam(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_param) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("requestConfigParam", 0);

  /* "libopenzwave.pyx":3147
 * 
 *         '''
 *         self.manager.RequestConfigParam(homeid, nodeid, param)             # <<<<<<<<<<<<<<
 * 
 *     def requestAllConfigParams(self, homeid, nodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_param); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->RequestConfigParam(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "libopenzwave.pyx":3122
 *         return self.manager.SetConfigParam(homeid, nodeid, param, value, size)
 * 
 *     def requestConfigParam(self, homeid, nodeid, param):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestConfigParam:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestConfigParam", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3149
 *         self.manager.RequestConfigParam(homeid, nodeid, param)
 * 
 *     def requestAllConfigParams(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestAllConfigParams:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_223requestAllConfigParams(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_222requestAllConfigParams[] = "\n.. _requestAllConfigParams:\n\nRequest the values of all known configurable parameters from a device.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node to configure.\n:type nodeId: int\n:see: requestConfigParam_, setConfigParam_, valueID_, notification_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_223requestAllConfigParams(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("requestAllConfigParams (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("requestAllConfigParams", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3149; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "requestAllConfigParams") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3149; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("requestAllConfigParams", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3149; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestAllConfigParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_222requestAllConfigParams(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_222requestAllConfigParams(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("requestAllConfigParams", 0);

  /* "libopenzwave.pyx":3162
 * 
 *         '''
 *         self.manager.RequestAllConfigParams(homeid, nodeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->RequestAllConfigParams(__pyx_t_1, __pyx_t_2);

  /* "libopenzwave.pyx":3149
 *         self.manager.RequestConfigParam(homeid, nodeid, param)
 * 
 *     def requestAllConfigParams(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _requestAllConfigParams:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.requestAllConfigParams", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3169
 * # Methods for accessing device association groups.
 * #
 *     def getNumGroups(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumGroups:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_225getNumGroups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_224getNumGroups[] = "\n.. _getNumGroups:\n\nGets the number of association groups reported by this node\n\nIn Z-Wave, groups are numbered starting from one.  For example, if a call to\nGetNumGroups returns 4, the _groupIdx value to use in calls to GetAssociations\nAddAssociation and RemoveAssociation will be a number between 1 and 4.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose groups we are interested in.\n:type nodeId: int\n:return: The number of groups.\n:rtype: int\n:see: getAssociations_, getMaxAssociations_, addAssociation_, removeAssociation_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_225getNumGroups(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumGroups (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getNumGroups", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getNumGroups") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNumGroups", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3169; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumGroups", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_224getNumGroups(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_224getNumGroups(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNumGroups", 0);

  /* "libopenzwave.pyx":3188
 * 
 *         '''
 *         return self.manager.GetNumGroups(homeid, nodeid)             # <<<<<<<<<<<<<<
 * 
 *     def getAssociations(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetNumGroups(__pyx_t_1, __pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3169
 * # Methods for accessing device association groups.
 * #
 *     def getNumGroups(self, homeid, nodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumGroups:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumGroups", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3190
 *         return self.manager.GetNumGroups(homeid, nodeid)
 * 
 *     def getAssociations(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getAssociations:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_227getAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_226getAssociations[] = "\n.. _getAssociations:\n\nGets the associations for a group\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations we are interested in.\n:type nodeId: int\n:param groupIdx: one-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:return: A set containing IDs of members of the group\n:rtype: set()\n:see: getNumGroups_, addAssociation_, removeAssociation_, getMaxAssociations_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_227getAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAssociations (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_groupidx,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_groupidx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getAssociations") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAssociations", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3190; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getAssociations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_226getAssociations(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_groupidx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_226getAssociations(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_groupidx) {
  PyObject *__pyx_v_data = NULL;
  uint32_t __pyx_v_size;
  uint8_t **__pyx_v_dbuf;
  uint32_t __pyx_v_count;
  struct __pyx_obj_12libopenzwave_RetAlloc *__pyx_v_retuint8 = 0;
  uint8_t *__pyx_v_p;
  uint32_t __pyx_v_start;
  uint32_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  uint32_t __pyx_t_2;
  uint8_t __pyx_t_3;
  uint8_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  uint32_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  char const *__pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAssociations", 0);

  /* "libopenzwave.pyx":3207
 * 
 *         '''
 *         data = set()             # <<<<<<<<<<<<<<
 *         cdef uint32_t size = self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 *         #Allocate memory
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":3208
 *         '''
 *         data = set()
 *         cdef uint32_t size = self.manager.GetMaxAssociations(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 *         #Allocate memory
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t) * size)
 */
  __pyx_t_2 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_2 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_As_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_size = __pyx_v_self->manager->GetMaxAssociations(__pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "libopenzwave.pyx":3210
 *         cdef uint32_t size = self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 *         #Allocate memory
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t) * size)             # <<<<<<<<<<<<<<
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)
 */
  __pyx_v_dbuf = ((uint8_t **)malloc(((sizeof(uint8_t)) * __pyx_v_size)));

  /* "libopenzwave.pyx":3212
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t) * size)
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)             # <<<<<<<<<<<<<<
 *         if count == 0:
 *             #Don't need to allocate memory.
 */
  __pyx_t_2 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_2 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_count = __pyx_v_self->manager->GetAssociations(__pyx_t_2, __pyx_t_4, __pyx_t_3, __pyx_v_dbuf);

  /* "libopenzwave.pyx":3213
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAssociations(homeid, nodeid, groupidx, dbuf)
 *         if count == 0:             # <<<<<<<<<<<<<<
 *             #Don't need to allocate memory.
 *             free(dbuf)
 */
  __pyx_t_5 = ((__pyx_v_count == 0) != 0);
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":3215
 *         if count == 0:
 *             #Don't need to allocate memory.
 *             free(dbuf)             # <<<<<<<<<<<<<<
 *             return data
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 */
    free(__pyx_v_dbuf);

    /* "libopenzwave.pyx":3216
 *             #Don't need to allocate memory.
 *             free(dbuf)
 *             return data             # <<<<<<<<<<<<<<
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 *         cdef uint8_t* p
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_data);
    __pyx_r = __pyx_v_data;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":3217
 *             free(dbuf)
 *             return data
 *         cdef RetAlloc retuint8 = RetAlloc(count)             # <<<<<<<<<<<<<<
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_12libopenzwave_RetAlloc)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_retuint8 = ((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":3219
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0             # <<<<<<<<<<<<<<
 *         if count:
 *             try:
 */
  __pyx_v_start = 0;

  /* "libopenzwave.pyx":3220
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
  __pyx_t_5 = (__pyx_v_count != 0);
  if (__pyx_t_5) {

    /* "libopenzwave.pyx":3221
 *         cdef uint32_t start = 0
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 */
    /*try:*/ {

      /* "libopenzwave.pyx":3222
 *         if count:
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "libopenzwave.pyx":3223
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):             # <<<<<<<<<<<<<<
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])
 */
      __pyx_t_2 = __pyx_v_count;
      for (__pyx_t_7 = __pyx_v_start; __pyx_t_7 < __pyx_t_2; __pyx_t_7+=1) {
        __pyx_v_i = __pyx_t_7;

        /* "libopenzwave.pyx":3224
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]             # <<<<<<<<<<<<<<
 *                     data.add(retuint8.data[i])
 *                     p += 1
 */
        (__pyx_v_retuint8->data[__pyx_v_i]) = (__pyx_v_p[0]);

        /* "libopenzwave.pyx":3225
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])             # <<<<<<<<<<<<<<
 *                     p += 1
 *             finally:
 */
        __pyx_t_1 = __Pyx_PyInt_From_uint8_t((__pyx_v_retuint8->data[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3225; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = PySet_Add(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3225; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "libopenzwave.pyx":3226
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])
 *                     p += 1             # <<<<<<<<<<<<<<
 *             finally:
 *                 # Free memory
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }
    }

    /* "libopenzwave.pyx":3229
 *             finally:
 *                 # Free memory
 *                 free(dbuf)             # <<<<<<<<<<<<<<
 *                 pass
 *         return data
 */
    /*finally:*/ {
      /*normal exit:*/{
        free(__pyx_v_dbuf);
        goto __pyx_L7;
      }
      /*exception exit:*/{
        __pyx_L6_error:;
        __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14) < 0)) __Pyx_ErrFetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_16);
        __Pyx_XGOTREF(__pyx_t_17);
        __pyx_t_9 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_11 = __pyx_filename;
        {
          free(__pyx_v_dbuf);
        }
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_XGIVEREF(__pyx_t_17);
          __Pyx_ExceptionReset(__pyx_t_15, __pyx_t_16, __pyx_t_17);
        }
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_ErrRestore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0;
        __pyx_lineno = __pyx_t_9; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_11;
        goto __pyx_L1_error;
      }
      __pyx_L7:;
    }
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "libopenzwave.pyx":3231
 *                 free(dbuf)
 *                 pass
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     def getMaxAssociations(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data);
  __pyx_r = __pyx_v_data;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3190
 *         return self.manager.GetNumGroups(homeid, nodeid)
 * 
 *     def getAssociations(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getAssociations:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.getAssociations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF((PyObject *)__pyx_v_retuint8);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3233
 *         return data
 * 
 *     def getMaxAssociations(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getMaxAssociations:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_229getMaxAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_228getMaxAssociations[] = "\n.. _getMaxAssociations:\n\nGets the maximum number of associations for a group.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param nodeid: The ID of the node whose associations we are interested in.\n:type nodeid: int\n:param groupidx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupidx: int\n:return: The maximum number of nodes that can be associated into the group.\n:rtype: int\n:see: getNumGroups_, addAssociation_, removeAssociation_, getAssociations_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_229getMaxAssociations(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMaxAssociations (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_groupidx,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3233; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_groupidx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3233; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getMaxAssociations") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3233; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getMaxAssociations", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3233; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getMaxAssociations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_228getMaxAssociations(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_groupidx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_228getMaxAssociations(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_groupidx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMaxAssociations", 0);

  /* "libopenzwave.pyx":3250
 * 
 *         '''
 *         return self.manager.GetMaxAssociations(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 * 
 *     def getGroupLabel(self, homeid, nodeid, groupidx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetMaxAssociations(__pyx_t_1, __pyx_t_2, __pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3233
 *         return data
 * 
 *     def getMaxAssociations(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getMaxAssociations:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getMaxAssociations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3252
 *         return self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 * 
 *     def getGroupLabel(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * Returns a label for the particular group of a node.
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_231getGroupLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_230getGroupLabel[] = "\nReturns a label for the particular group of a node.\n\n.. _getGroupLabel:\n\nThis label is populated by the device specific configuration files.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:param nodeid: The ID of the node whose associations are to be changed.\n:type nodeid: int\n:param groupidx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupidx: int\n:return: The label for the particular group of a node.\n:rtype: str\n:see: getNumGroups_, getAssociations_, getMaxAssociations_, addAssociation_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_231getGroupLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGroupLabel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_groupidx,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_groupidx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getGroupLabel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getGroupLabel", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3252; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.getGroupLabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_230getGroupLabel(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_groupidx);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_230getGroupLabel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_groupidx) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getGroupLabel", 0);

  /* "libopenzwave.pyx":3271
 * 
 *         '''
 *         cdef string c_string = self.manager.GetGroupLabel(homeid, nodeid, groupidx)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetGroupLabel(__pyx_t_1, __pyx_t_2, __pyx_t_3);

  /* "libopenzwave.pyx":3272
 *         '''
 *         cdef string c_string = self.manager.GetGroupLabel(homeid, nodeid, groupidx)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def addAssociation(self, homeid, nodeid, groupidx, targetnodeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3252
 *         return self.manager.GetMaxAssociations(homeid, nodeid, groupidx)
 * 
 *     def getGroupLabel(self, homeid, nodeid, groupidx):             # <<<<<<<<<<<<<<
 *         '''
 * Returns a label for the particular group of a node.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.getGroupLabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3274
 *         return c_string.c_str()
 * 
 *     def addAssociation(self, homeid, nodeid, groupidx, targetnodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addAssociation:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_233addAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_232addAssociation[] = "\n.. _addAssociation:\n\nAdds a node to an association group.\n\nDue to the possibility of a device being asleep, the command is assumed to\nsuceeed, and the association data held in this class is updated directly.  This\nwill be reverted by a future Association message from the device if the Z-Wave\nmessage actually failed to get through.  Notification callbacks will be sent in\nboth cases.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations are to be changed.\n:type nodeId: int\n:param groupIdx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:param targetNodeId: Identifier for the node that will be added to the association group.\n:type targetNodeId: int\n:see: getNumGroups_, getAssociations_, getMaxAssociations_, removeAssociation_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_233addAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_targetnodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addAssociation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_groupidx,&__pyx_n_s_targetnodeid,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_groupidx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_targetnodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addAssociation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
    __pyx_v_targetnodeid = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addAssociation", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3274; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addAssociation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_232addAssociation(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_groupidx, __pyx_v_targetnodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_232addAssociation(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_groupidx, PyObject *__pyx_v_targetnodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  uint8_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addAssociation", 0);

  /* "libopenzwave.pyx":3297
 * 
 *         '''
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)             # <<<<<<<<<<<<<<
 * 
 *     def removeAssociation(self, homeid, nodeid, groupidx, targetnodeid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_As_uint8_t(__pyx_v_targetnodeid); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->AddAssociation(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "libopenzwave.pyx":3274
 *         return c_string.c_str()
 * 
 *     def addAssociation(self, homeid, nodeid, groupidx, targetnodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addAssociation:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addAssociation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3299
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)
 * 
 *     def removeAssociation(self, homeid, nodeid, groupidx, targetnodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeAssociation:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_235removeAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_234removeAssociation[] = "\n.. _removeAssociation:\n\nRemoves a node from an association group.\n\nDue to the possibility of a device being asleep, the command is assumed to\nsucceed, and the association data held in this class is updated directly.  This\nwill be reverted by a future Association message from the device if the Z-Wave\nmessage actually failed to get through.   Notification callbacks will be sent\nin both cases.\n\n:param homeId: The Home ID of the Z-Wave controller that manages the node.\n:type homeId: int\n:param nodeId: The ID of the node whose associations are to be changed.\n:type nodeId: int\n:param groupIdx: One-based index of the group (because Z-Wave product manuals use one-based group numbering).\n:type groupIdx: int\n:param targetNodeId: Identifier for the node that will be removed from the association group.\n:type targetNodeId: int\n:see: getNumGroups_, getAssociations_, getMaxAssociations_, addAssociation_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_235removeAssociation(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeid = 0;
  PyObject *__pyx_v_nodeid = 0;
  PyObject *__pyx_v_groupidx = 0;
  PyObject *__pyx_v_targetnodeid = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeAssociation (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeid,&__pyx_n_s_nodeid,&__pyx_n_s_groupidx,&__pyx_n_s_targetnodeid,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_groupidx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_targetnodeid)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, 3); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "removeAssociation") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_homeid = values[0];
    __pyx_v_nodeid = values[1];
    __pyx_v_groupidx = values[2];
    __pyx_v_targetnodeid = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeAssociation", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3299; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeAssociation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_234removeAssociation(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeid, __pyx_v_nodeid, __pyx_v_groupidx, __pyx_v_targetnodeid);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_234removeAssociation(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid, PyObject *__pyx_v_nodeid, PyObject *__pyx_v_groupidx, PyObject *__pyx_v_targetnodeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  uint8_t __pyx_t_2;
  uint8_t __pyx_t_3;
  uint8_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeAssociation", 0);

  /* "libopenzwave.pyx":3322
 * 
 *         '''
 *         self.manager.RemoveAssociation(homeid, nodeid, groupidx, targetnodeid)             # <<<<<<<<<<<<<<
 * #
 * # -----------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeid); if (unlikely((__pyx_t_2 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_As_uint8_t(__pyx_v_groupidx); if (unlikely((__pyx_t_3 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_As_uint8_t(__pyx_v_targetnodeid); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->RemoveAssociation(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);

  /* "libopenzwave.pyx":3299
 *         self.manager.AddAssociation(homeid, nodeid, groupidx, targetnodeid)
 * 
 *     def removeAssociation(self, homeid, nodeid, groupidx, targetnodeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeAssociation:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeAssociation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3329
 * # For notification of changes to the Z-Wave network or device values and associations.
 * #
 *     def addWatcher(self, pythonfunc):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addWatcher:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_237addWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_236addWatcher[] = "\n.. _addWatcher:\n\nAdd a notification watcher.\n\nIn OpenZWave, all feedback from the Z-Wave network is sent to the application\nvia callbacks.  This method allows the application to add a notification\ncallback handler, known as a \"watcher\" to OpenZWave.  An application needs only\nadd a single watcher - all notifications will be reported to it.\n\n:param pythonfunc: Watcher pointer to a function that will be called by the notification system.\n:type pythonfunc: callback\n:see: removeWatcher_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_237addWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addWatcher (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_236addWatcher(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_pythonfunc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_236addWatcher(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_pythonfunc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addWatcher", 0);

  /* "libopenzwave.pyx":3345
 * 
 *         '''
 *         self._watcherCallback = pythonfunc # need to keep a reference to this             # <<<<<<<<<<<<<<
 *         if not self.manager.AddWatcher(notif_callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")
 */
  __Pyx_INCREF(__pyx_v_pythonfunc);
  __Pyx_GIVEREF(__pyx_v_pythonfunc);
  __Pyx_GOTREF(__pyx_v_self->_watcherCallback);
  __Pyx_DECREF(__pyx_v_self->_watcherCallback);
  __pyx_v_self->_watcherCallback = __pyx_v_pythonfunc;

  /* "libopenzwave.pyx":3346
 *         '''
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(notif_callback, <void*>pythonfunc):             # <<<<<<<<<<<<<<
 *             raise ValueError("call to AddWatcher failed")
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_self->manager->AddWatcher(__pyx_f_12libopenzwave_notif_callback, ((void *)__pyx_v_pythonfunc)) != 0)) != 0);
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":3347
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(notif_callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")             # <<<<<<<<<<<<<<
 * 
 *     def removeWatcher(self, pythonfunc):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "libopenzwave.pyx":3329
 * # For notification of changes to the Z-Wave network or device values and associations.
 * #
 *     def addWatcher(self, pythonfunc):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addWatcher:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.addWatcher", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3349
 *             raise ValueError("call to AddWatcher failed")
 * 
 *     def removeWatcher(self, pythonfunc):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeWatcher:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_239removeWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_238removeWatcher[] = "\n.. _removeWatcher:\n\nRemove a notification watcher.\n\n:param pythonfunc: Watcher pointer to a function\n:type pythonfunc: callback\n:see: addWatcher_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_239removeWatcher(PyObject *__pyx_v_self, PyObject *__pyx_v_pythonfunc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeWatcher (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_238removeWatcher(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_pythonfunc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_238removeWatcher(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pythonfunc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeWatcher", 0);

  /* "libopenzwave.pyx":3360
 * 
 *         '''
 *         if not self.manager.RemoveWatcher(notif_callback, <void*>self._watcherCallback):             # <<<<<<<<<<<<<<
 *             raise ValueError("call to RemoveWatcher failed")
 *         else:
 */
  __pyx_t_1 = ((!(__pyx_v_self->manager->RemoveWatcher(__pyx_f_12libopenzwave_notif_callback, ((void *)__pyx_v_self->_watcherCallback)) != 0)) != 0);
  if (__pyx_t_1) {

    /* "libopenzwave.pyx":3361
 *         '''
 *         if not self.manager.RemoveWatcher(notif_callback, <void*>self._watcherCallback):
 *             raise ValueError("call to RemoveWatcher failed")             # <<<<<<<<<<<<<<
 *         else:
 *             self._watcherCallback = None
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  /*else*/ {

    /* "libopenzwave.pyx":3363
 *             raise ValueError("call to RemoveWatcher failed")
 *         else:
 *             self._watcherCallback = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_watcherCallback);
    __Pyx_DECREF(__pyx_v_self->_watcherCallback);
    __pyx_v_self->_watcherCallback = Py_None;
  }

  /* "libopenzwave.pyx":3349
 *             raise ValueError("call to AddWatcher failed")
 * 
 *     def removeWatcher(self, pythonfunc):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeWatcher:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.removeWatcher", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3372
 * # Commands for Z-Wave network management using the PC Controller.
 * #
 *     def resetController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _resetController:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_241resetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_240resetController[] = "\n.. _resetController:\n\nHard Reset a PC Z-Wave Controller.\n\nResets a controller and erases its network configuration settings.  The\ncontroller becomes a primary controller ready to add devices to a new network.\n\n:param homeId: The Home ID of the Z-Wave controller to be reset.\n:type homeId: int\n:see: softResetController_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_241resetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetController (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_240resetController(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_240resetController(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resetController", 0);

  /* "libopenzwave.pyx":3386
 * 
 *         '''
 *         values_map.clear()             # <<<<<<<<<<<<<<
 *         self.manager.ResetController(homeid)
 * 
 */
  __pyx_v_12libopenzwave_values_map.clear();

  /* "libopenzwave.pyx":3387
 *         '''
 *         values_map.clear()
 *         self.manager.ResetController(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def softResetController(self, homeid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->ResetController(__pyx_t_1);

  /* "libopenzwave.pyx":3372
 * # Commands for Z-Wave network management using the PC Controller.
 * #
 *     def resetController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _resetController:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.resetController", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3389
 *         self.manager.ResetController(homeid)
 * 
 *     def softResetController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _softResetController:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_243softResetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_242softResetController[] = "\n.. _softResetController:\n\nSoft Reset a PC Z-Wave Controller.\n\nResets a controller without erasing its network configuration settings.\n\n:param homeId: The Home ID of the Z-Wave controller to be reset.\n:type homeId: int\n:see: resetController_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_243softResetController(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("softResetController (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_242softResetController(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_242softResetController(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("softResetController", 0);

  /* "libopenzwave.pyx":3402
 * 
 *         '''
 *         self.manager.SoftReset(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def cancelControllerCommand(self, homeid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SoftReset(__pyx_t_1);

  /* "libopenzwave.pyx":3389
 *         self.manager.ResetController(homeid)
 * 
 *     def softResetController(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _softResetController:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.softResetController", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3404
 *         self.manager.SoftReset(homeid)
 * 
 *     def cancelControllerCommand(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _cancelControllerCommand:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_245cancelControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_244cancelControllerCommand[] = "\n.. _cancelControllerCommand:\n\nCancels any in-progress command running on a controller.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:return: True if a command was running and was cancelled.\n:rtype: bool\n:see: beginControllerCommand_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_245cancelControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancelControllerCommand (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_244cancelControllerCommand(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_244cancelControllerCommand(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cancelControllerCommand", 0);

  /* "libopenzwave.pyx":3417
 * 
 *         '''
 *         return self.manager.CancelControllerCommand(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def beginControllerCommand(self, homeId, command, pythonfunc,\
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->CancelControllerCommand(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3404
 *         self.manager.SoftReset(homeid)
 * 
 *     def cancelControllerCommand(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _cancelControllerCommand:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.cancelControllerCommand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3419
 *         return self.manager.CancelControllerCommand(homeid)
 * 
 *     def beginControllerCommand(self, homeId, command, pythonfunc,\             # <<<<<<<<<<<<<<
 *             highPower=False, nodeId=0xff, arg=0):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_247beginControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_246beginControllerCommand[] = "\n\n.. _beginControllerCommand:\n\nStart a controller command process.\n\nCommands :\n\n     - Driver::ControllerCommand_AddDevice - Add a new device or controller to the Z-Wave network.\n     - Driver::ControllerCommand_CreateNewPrimary - Create a new primary controller when old primary fails. Requires SUC.\n     - Driver::ControllerCommand_ReceiveConfiguration - Receive network configuration information from primary controller. Requires secondary.\n     - Driver::ControllerCommand_RemoveDevice - Remove a device or controller from the Z-Wave network.\n     - Driver::ControllerCommand_RemoveFailedNode - Remove a node from the network. The node must not be responding\n     and be on the controller's failed node list.\n     - Driver::ControllerCommand_HasNodeFailed - Check whether a node is in the controller's failed nodes list.\n     - Driver::ControllerCommand_ReplaceFailedNode - Replace a failed device with another. If the node is not in\n     the controller's failed nodes list, or the node responds, this command will fail.\n     - Driver:: ControllerCommand_TransferPrimaryRole - Add a new controller to the network and\n     make it the primary.  The existing primary will become a secondary controller.\n     - Driver::ControllerCommand_RequestNetworkUpdate - Update the controller with network information from the SUC/SIS.\n     - Driver::ControllerCommand_RequestNodeNeighborUpdate - Get a node to rebuild its neighbour list.  This method also does RequestNodeNeighbors afterwards.\n     - Driver::ControllerCommand_AssignReturnRoute - Assign a network return route to a device.\n     - Driver::ControllerCommand_DeleteAllReturnRoutes - Delete all network return routes from a device.\n     - Driver::ControllerCommand_SendNodeInformation - Send a node information frame.\n     - Driver::ControllerCommand_ReplicationSend - Send information from primary to secondary\n     - Driver::ControllerCommand_CreateButton - Create a handheld button id.\n     - Driver::ControllerComman""d_DeleteButton - Delete a handheld button id.\n\nCallbacks :\n\n    - Driver::ControllerState_Waiting, the controller is waiting for a user action.  A notice should be displayed to the user at this point, telling them what to do next. For the add, remove, replace and transfer primary role commands, the user needs to be told to press the inclusion button on the device that  is going to be added or removed.  For ControllerCommand_ReceiveConfiguration, they must set their other controller to send its data, and for ControllerCommand_CreateNewPrimary, set the other controller to learn new data.\n    - Driver::ControllerState_InProgress - the controller is in the process of adding or removing the chosen node.  It is now too late to cancel the command.\n    - Driver::ControllerState_Complete - the controller has finished adding or removing the node, and the command is complete.\n    - Driver::ControllerState_Failed - will be sent if the command fails for any reason.\n\n:param homeId: The Home ID of the Z-Wave controller.\n:type homeId: int\n:param command: The command to be sent to the controller.\n:type command: ControllerCommand\n:param callback: Pointer to a function that will be called at various stages during the command process to notify the user of progress or to request actions on the user's part.  Defaults to NULL.\n:type callback: pfnControllerCallback_t\n:param context: Pointer to user defined data that will be passed into to the callback function.  Defaults to NULL.\n:type context:\n:param highPower: Used only with the AddDevice, AddController, RemoveDevice and RemoveController commands. Usually when adding or removing devices, the controller operates at low power so that the controller must be physically close to the device for security reasons.  If _highPower is true, the controller will operate at normal power levels instead.  Defaults to false.\n:type highPower: bool\n:param nodeId: Used only with the ReplaceFailedNode command, to specify the node that is g""oing to be replaced.\n:type nodeId: int\n:param arg:\n:type arg: int\n:return: True if the command was accepted and has started.\n:rtype: bool\n:see: cancelControllerCommand_\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_247beginControllerCommand(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_homeId = 0;
  PyObject *__pyx_v_command = 0;
  PyObject *__pyx_v_pythonfunc = 0;
  PyObject *__pyx_v_highPower = 0;
  PyObject *__pyx_v_nodeId = 0;
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("beginControllerCommand (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_homeId,&__pyx_n_s_command,&__pyx_n_s_pythonfunc,&__pyx_n_s_highPower,&__pyx_n_s_nodeId,&__pyx_n_s_arg,0};
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "libopenzwave.pyx":3420
 * 
 *     def beginControllerCommand(self, homeId, command, pythonfunc,\
 *             highPower=False, nodeId=0xff, arg=0):             # <<<<<<<<<<<<<<
 * 
 *         '''
 */
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)__pyx_int_255);
    values[5] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_homeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_command)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("beginControllerCommand", 0, 3, 6, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pythonfunc)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("beginControllerCommand", 0, 3, 6, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_highPower);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_nodeId);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "beginControllerCommand") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_homeId = values[0];
    __pyx_v_command = values[1];
    __pyx_v_pythonfunc = values[2];
    __pyx_v_highPower = values[3];
    __pyx_v_nodeId = values[4];
    __pyx_v_arg = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("beginControllerCommand", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3419; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.beginControllerCommand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_246beginControllerCommand(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_homeId, __pyx_v_command, __pyx_v_pythonfunc, __pyx_v_highPower, __pyx_v_nodeId, __pyx_v_arg);

  /* "libopenzwave.pyx":3419
 *         return self.manager.CancelControllerCommand(homeid)
 * 
 *     def beginControllerCommand(self, homeId, command, pythonfunc,\             # <<<<<<<<<<<<<<
 *             highPower=False, nodeId=0xff, arg=0):
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_246beginControllerCommand(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeId, PyObject *__pyx_v_command, PyObject *__pyx_v_pythonfunc, PyObject *__pyx_v_highPower, PyObject *__pyx_v_nodeId, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  enum OpenZWave::Driver::ControllerCommand __pyx_t_2;
  bool __pyx_t_3;
  uint8_t __pyx_t_4;
  uint8_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("beginControllerCommand", 0);

  /* "libopenzwave.pyx":3485
 *         '''
 * 
 *         self._controllerCallback = pythonfunc # need to keep a reference to this             # <<<<<<<<<<<<<<
 *         return self.manager.BeginControllerCommand(homeId, command, \
 *                  ctrl_callback, <void*>pythonfunc, highPower, nodeId, arg)
 */
  __Pyx_INCREF(__pyx_v_pythonfunc);
  __Pyx_GIVEREF(__pyx_v_pythonfunc);
  __Pyx_GOTREF(__pyx_v_self->_controllerCallback);
  __Pyx_DECREF(__pyx_v_self->_controllerCallback);
  __pyx_v_self->_controllerCallback = __pyx_v_pythonfunc;

  /* "libopenzwave.pyx":3486
 * 
 *         self._controllerCallback = pythonfunc # need to keep a reference to this
 *         return self.manager.BeginControllerCommand(homeId, command, \             # <<<<<<<<<<<<<<
 *                  ctrl_callback, <void*>pythonfunc, highPower, nodeId, arg)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeId); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((enum OpenZWave::Driver::ControllerCommand)PyInt_AsLong(__pyx_v_command)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":3487
 *         self._controllerCallback = pythonfunc # need to keep a reference to this
 *         return self.manager.BeginControllerCommand(homeId, command, \
 *                  ctrl_callback, <void*>pythonfunc, highPower, nodeId, arg)             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_highPower); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyInt_As_uint8_t(__pyx_v_nodeId); if (unlikely((__pyx_t_4 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_5 = __Pyx_PyInt_As_uint8_t(__pyx_v_arg); if (unlikely((__pyx_t_5 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":3486
 * 
 *         self._controllerCallback = pythonfunc # need to keep a reference to this
 *         return self.manager.BeginControllerCommand(homeId, command, \             # <<<<<<<<<<<<<<
 *                  ctrl_callback, <void*>pythonfunc, highPower, nodeId, arg)
 * 
 */
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->BeginControllerCommand(__pyx_t_1, __pyx_t_2, __pyx_f_12libopenzwave_ctrl_callback, ((void *)__pyx_v_pythonfunc), __pyx_t_3, __pyx_t_4, __pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3419
 *         return self.manager.CancelControllerCommand(homeid)
 * 
 *     def beginControllerCommand(self, homeId, command, pythonfunc,\             # <<<<<<<<<<<<<<
 *             highPower=False, nodeId=0xff, arg=0):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("libopenzwave.PyManager.beginControllerCommand", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3493
 * #-----------------------------------------------------------------------------
 * 
 *     def getNumScenes(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumScenes:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_249getNumScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_248getNumScenes[] = "\n.. _getNumScenes:\n\nGets the number of scenes that have been defined\n\n:return: The number of scenes.\n:rtype: int\n:see: getAllScenes_, sceneExists_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, removeAllScenes_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_249getNumScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumScenes (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_248getNumScenes(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_248getNumScenes(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNumScenes", 0);

  /* "libopenzwave.pyx":3508
 * 
 *        '''
 *         return self.manager.GetNumScenes()             # <<<<<<<<<<<<<<
 * 
 *     def getAllScenes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->GetNumScenes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3493
 * #-----------------------------------------------------------------------------
 * 
 *     def getNumScenes(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getNumScenes:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.getNumScenes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3510
 *         return self.manager.GetNumScenes()
 * 
 *     def getAllScenes(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getAllScenes:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_251getAllScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_250getAllScenes[] = "\n.. _getAllScenes:\n\nGets a set of all the SceneIds\n\n:return: A set() containing neighboring scene IDs\n:rtype: set()\n:see: getNumScenes_, sceneExists_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, removeAllScenes_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_251getAllScenes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAllScenes (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_250getAllScenes(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_250getAllScenes(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self) {
  PyObject *__pyx_v_data = NULL;
  uint32_t __pyx_v_size;
  uint8_t **__pyx_v_dbuf;
  uint32_t __pyx_v_count;
  struct __pyx_obj_12libopenzwave_RetAlloc *__pyx_v_retuint8 = 0;
  uint8_t *__pyx_v_p;
  uint32_t __pyx_v_start;
  uint32_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  uint32_t __pyx_t_4;
  uint32_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  char const *__pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getAllScenes", 0);

  /* "libopenzwave.pyx":3525
 * 
 *         '''
 *         data = set()             # <<<<<<<<<<<<<<
 *         cdef uint32_t size = self.manager.GetNumScenes()
 *         # Allocate memory
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":3526
 *         '''
 *         data = set()
 *         cdef uint32_t size = self.manager.GetNumScenes()             # <<<<<<<<<<<<<<
 *         # Allocate memory
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t)*size)
 */
  __pyx_v_size = __pyx_v_self->manager->GetNumScenes();

  /* "libopenzwave.pyx":3528
 *         cdef uint32_t size = self.manager.GetNumScenes()
 *         # Allocate memory
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t)*size)             # <<<<<<<<<<<<<<
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAllScenes(dbuf)
 */
  __pyx_v_dbuf = ((uint8_t **)malloc(((sizeof(uint8_t)) * __pyx_v_size)));

  /* "libopenzwave.pyx":3530
 *         cdef uint8_t** dbuf = <uint8_t**>malloc(sizeof(uint8_t)*size)
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAllScenes(dbuf)             # <<<<<<<<<<<<<<
 *         if count == 0:
 *             #Don't need to allocate memory.
 */
  __pyx_v_count = __pyx_v_self->manager->GetAllScenes(__pyx_v_dbuf);

  /* "libopenzwave.pyx":3531
 *         # return value is pointer to uint8_t[]
 *         cdef uint32_t count = self.manager.GetAllScenes(dbuf)
 *         if count == 0:             # <<<<<<<<<<<<<<
 *             #Don't need to allocate memory.
 *             free(dbuf)
 */
  __pyx_t_2 = ((__pyx_v_count == 0) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":3533
 *         if count == 0:
 *             #Don't need to allocate memory.
 *             free(dbuf)             # <<<<<<<<<<<<<<
 *             return data
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 */
    free(__pyx_v_dbuf);

    /* "libopenzwave.pyx":3534
 *             #Don't need to allocate memory.
 *             free(dbuf)
 *             return data             # <<<<<<<<<<<<<<
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 *         cdef uint8_t* p
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_data);
    __pyx_r = __pyx_v_data;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":3535
 *             free(dbuf)
 *             return data
 *         cdef RetAlloc retuint8 = RetAlloc(count)             # <<<<<<<<<<<<<<
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 */
  __pyx_t_1 = __Pyx_PyInt_From_uint32_t(__pyx_v_count); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_12libopenzwave_RetAlloc)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3535; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_retuint8 = ((struct __pyx_obj_12libopenzwave_RetAlloc *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":3537
 *         cdef RetAlloc retuint8 = RetAlloc(count)
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0             # <<<<<<<<<<<<<<
 *         if count:
 *             try:
 */
  __pyx_v_start = 0;

  /* "libopenzwave.pyx":3538
 *         cdef uint8_t* p
 *         cdef uint32_t start = 0
 *         if count:             # <<<<<<<<<<<<<<
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 */
  __pyx_t_2 = (__pyx_v_count != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":3539
 *         cdef uint32_t start = 0
 *         if count:
 *             try:             # <<<<<<<<<<<<<<
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 */
    /*try:*/ {

      /* "libopenzwave.pyx":3540
 *         if count:
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array             # <<<<<<<<<<<<<<
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]
 */
      __pyx_v_p = (__pyx_v_dbuf[0]);

      /* "libopenzwave.pyx":3541
 *             try:
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):             # <<<<<<<<<<<<<<
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])
 */
      __pyx_t_4 = __pyx_v_count;
      for (__pyx_t_5 = __pyx_v_start; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "libopenzwave.pyx":3542
 *                 p = dbuf[0] # p is now pointing at first element of array
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]             # <<<<<<<<<<<<<<
 *                     data.add(retuint8.data[i])
 *                     p += 1
 */
        (__pyx_v_retuint8->data[__pyx_v_i]) = (__pyx_v_p[0]);

        /* "libopenzwave.pyx":3543
 *                 for i in range(start, count):
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])             # <<<<<<<<<<<<<<
 *                     p += 1
 *             finally:
 */
        __pyx_t_1 = __Pyx_PyInt_From_uint8_t((__pyx_v_retuint8->data[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3543; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = PySet_Add(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3543; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "libopenzwave.pyx":3544
 *                     retuint8.data[i] = p[0]
 *                     data.add(retuint8.data[i])
 *                     p += 1             # <<<<<<<<<<<<<<
 *             finally:
 *                 # Free memory
 */
        __pyx_v_p = (__pyx_v_p + 1);
      }
    }

    /* "libopenzwave.pyx":3547
 *             finally:
 *                 # Free memory
 *                 free(dbuf)             # <<<<<<<<<<<<<<
 *                 pass
 *         return data
 */
    /*finally:*/ {
      /*normal exit:*/{
        free(__pyx_v_dbuf);
        goto __pyx_L7;
      }
      /*exception exit:*/{
        __pyx_L6_error:;
        __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_15);
        __pyx_t_7 = __pyx_lineno; __pyx_t_8 = __pyx_clineno; __pyx_t_9 = __pyx_filename;
        {
          free(__pyx_v_dbuf);
        }
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
        }
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ErrRestore(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0;
        __pyx_lineno = __pyx_t_7; __pyx_clineno = __pyx_t_8; __pyx_filename = __pyx_t_9;
        goto __pyx_L1_error;
      }
      __pyx_L7:;
    }
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "libopenzwave.pyx":3549
 *                 free(dbuf)
 *                 pass
 *         return data             # <<<<<<<<<<<<<<
 * 
 *     def removeAllScenes(self, homeid):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_data);
  __pyx_r = __pyx_v_data;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3510
 *         return self.manager.GetNumScenes()
 * 
 *     def getAllScenes(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getAllScenes:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.getAllScenes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF((PyObject *)__pyx_v_retuint8);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3551
 *         return data
 * 
 *     def removeAllScenes(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeAllScenes:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_253removeAllScenes(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_252removeAllScenes[] = "\n.. _removeAllScenes:\n\nDelete all scenes.\n\n:param homeid: The Home ID of the Z-Wave controller that manages the node.\n:type homeid: int\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_\n\n       ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_253removeAllScenes(PyObject *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeAllScenes (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_252removeAllScenes(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_homeid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_252removeAllScenes(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_homeid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeAllScenes", 0);

  /* "libopenzwave.pyx":3565
 * 
 *        '''
 *         self.manager.RemoveAllScenes(homeid)             # <<<<<<<<<<<<<<
 * 
 *     def removeScene(self, sceneId):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint32_t(__pyx_v_homeid); if (unlikely((__pyx_t_1 == (uint32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->RemoveAllScenes(__pyx_t_1);

  /* "libopenzwave.pyx":3551
 *         return data
 * 
 *     def removeAllScenes(self, homeid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeAllScenes:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeAllScenes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3567
 *         self.manager.RemoveAllScenes(homeid)
 * 
 *     def removeScene(self, sceneId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeScene:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_255removeScene(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneId); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_254removeScene[] = "\n.. _removeScene:\n\nRemove an existing Scene.\n\n:param sceneId: The unique Scene ID to be removed.\n:type sceneId: int\n:return: True if scene was removed.\n:rtype: bool\n:see: getNumScenes_, getAllScenes_, sceneExists_, createScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, removeAllScenes_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_255removeScene(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneId) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeScene (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_254removeScene(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_sceneId));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_254removeScene(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_sceneId) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint8_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeScene", 0);

  /* "libopenzwave.pyx":3583
 * 
 *         '''
 *         return self.manager.RemoveScene(sceneId)             # <<<<<<<<<<<<<<
 * 
 *     def createScene(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint8_t(__pyx_v_sceneId); if (unlikely((__pyx_t_1 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->RemoveScene(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3583; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3567
 *         self.manager.RemoveAllScenes(homeid)
 * 
 *     def removeScene(self, sceneId):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeScene:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.removeScene", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3585
 *         return self.manager.RemoveScene(sceneId)
 * 
 *     def createScene(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _createScene:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_257createScene(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_256createScene[] = "\n.. _createScene:\n\nCreate a Scene.\n\n:return: Scene ID used to reference the scene. 0 is failure result.\n:rtype: id\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, removeAllScenes_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_257createScene(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createScene (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_256createScene(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_256createScene(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createScene", 0);

  /* "libopenzwave.pyx":3599
 * 
 *         '''
 *         return self.manager.CreateScene()             # <<<<<<<<<<<<<<
 * 
 *     def sceneGetValues(self, uint8_t id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_uint8_t(__pyx_v_self->manager->CreateScene()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3599; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3585
 *         return self.manager.RemoveScene(sceneId)
 * 
 *     def createScene(self):             # <<<<<<<<<<<<<<
 *         '''
 * .. _createScene:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("libopenzwave.PyManager.createScene", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3601
 *         return self.manager.CreateScene()
 * 
 *     def sceneGetValues(self, uint8_t id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _sceneGetValues:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_259sceneGetValues(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_258sceneGetValues[] = "\n.. _sceneGetValues:\n\nRetrieve the list of values from a scene.\n\n:param id: The ID of a scene.\n:type id: int\n:rtype: dict()\n:return: A dict containing : {valueid : value, ...}\n:see: getNumScenes_, getAllScenes_, sceneExists_, createScene_, removeScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_, removeAllScenes_\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_259sceneGetValues(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  uint8_t __pyx_v_id;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sceneGetValues (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_uint8_t(__pyx_arg_id); if (unlikely((__pyx_v_id == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3601; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.sceneGetValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_258sceneGetValues(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((uint8_t)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_258sceneGetValues(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, uint8_t __pyx_v_id) {
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  uint8_t __pyx_v_type_byte;
  int32_t __pyx_v_type_int;
  int16_t __pyx_v_type_short;
  std::string __pyx_v_type_string;
  OpenZWave::ValueID *__pyx_v_cvalueID;
  std::vector<OpenZWave::ValueID> __pyx_v_vect;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_datatype = NULL;
  PyObject *__pyx_v_value_data = NULL;
  uint64_t __pyx_v_value_id;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sceneGetValues", 0);

  /* "libopenzwave.pyx":3625
 *         cdef ValueID* cvalueID
 *         cdef vector[ValueID] vect
 *         ret = dict()             # <<<<<<<<<<<<<<
 *         if self.manager.SceneGetValues(id, &vect):
 *             while not vect.empty() :
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3625; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "libopenzwave.pyx":3626
 *         cdef vector[ValueID] vect
 *         ret = dict()
 *         if self.manager.SceneGetValues(id, &vect):             # <<<<<<<<<<<<<<
 *             while not vect.empty() :
 *                 cvalueID = &vect.back()
 */
  __pyx_t_2 = (__pyx_v_self->manager->SceneGetValues(__pyx_v_id, (&__pyx_v_vect)) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":3627
 *         ret = dict()
 *         if self.manager.SceneGetValues(id, &vect):
 *             while not vect.empty() :             # <<<<<<<<<<<<<<
 *                 cvalueID = &vect.back()
 *                 datatype = PyValueTypes[cvalueID.GetType()]
 */
    while (1) {
      __pyx_t_2 = ((!(__pyx_v_vect.empty() != 0)) != 0);
      if (!__pyx_t_2) break;

      /* "libopenzwave.pyx":3628
 *         if self.manager.SceneGetValues(id, &vect):
 *             while not vect.empty() :
 *                 cvalueID = &vect.back()             # <<<<<<<<<<<<<<
 *                 datatype = PyValueTypes[cvalueID.GetType()]
 *                 value_data = None
 */
      __pyx_v_cvalueID = (&__pyx_v_vect.back());

      /* "libopenzwave.pyx":3629
 *             while not vect.empty() :
 *                 cvalueID = &vect.back()
 *                 datatype = PyValueTypes[cvalueID.GetType()]             # <<<<<<<<<<<<<<
 *                 value_data = None
 *                 value_id = cvalueID.GetId()
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyValueTypes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyInt_FromLong(__pyx_v_cvalueID->GetType()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3629; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3629; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_datatype, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "libopenzwave.pyx":3630
 *                 cvalueID = &vect.back()
 *                 datatype = PyValueTypes[cvalueID.GetType()]
 *                 value_data = None             # <<<<<<<<<<<<<<
 *                 value_id = cvalueID.GetId()
 *                 if datatype == "Bool":
 */
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_value_data, Py_None);

      /* "libopenzwave.pyx":3631
 *                 datatype = PyValueTypes[cvalueID.GetType()]
 *                 value_data = None
 *                 value_id = cvalueID.GetId()             # <<<<<<<<<<<<<<
 *                 if datatype == "Bool":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 */
      __pyx_v_value_id = __pyx_v_cvalueID->GetId();

      /* "libopenzwave.pyx":3632
 *                 value_data = None
 *                 value_id = cvalueID.GetId()
 *                 if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Bool, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3632; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_2) {

        /* "libopenzwave.pyx":3633
 *                 value_id = cvalueID.GetId()
 *                 if datatype == "Bool":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)             # <<<<<<<<<<<<<<
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "Byte":
 */
        __pyx_v_cret = __pyx_v_self->manager->SceneGetValueAsBool(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_bool));

        /* "libopenzwave.pyx":3634
 *                 if datatype == "Bool":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "Byte":
 *                     cret = self.manager.SceneGetValueAsByte(id, deref(cvalueID), &type_byte)
 */
        if ((__pyx_v_cret != 0)) {
          __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_type_bool); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3634; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_4 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_value_data, __pyx_t_4);
        __pyx_t_4 = 0;
        goto __pyx_L6;
      }

      /* "libopenzwave.pyx":3635
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsByte(id, deref(cvalueID), &type_byte)
 *                     value_data = type_byte if cret else None
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Byte, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3635; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_2) {

        /* "libopenzwave.pyx":3636
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "Byte":
 *                     cret = self.manager.SceneGetValueAsByte(id, deref(cvalueID), &type_byte)             # <<<<<<<<<<<<<<
 *                     value_data = type_byte if cret else None
 *                 elif datatype == "Decimal":
 */
        __pyx_v_cret = __pyx_v_self->manager->SceneGetValueAsByte(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_byte));

        /* "libopenzwave.pyx":3637
 *                 elif datatype == "Byte":
 *                     cret = self.manager.SceneGetValueAsByte(id, deref(cvalueID), &type_byte)
 *                     value_data = type_byte if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "Decimal":
 *                     cret = self.manager.SceneGetValueAsFloat(id, deref(cvalueID), &type_float)
 */
        if ((__pyx_v_cret != 0)) {
          __pyx_t_3 = __Pyx_PyInt_From_uint8_t(__pyx_v_type_byte); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3637; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_4 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_value_data, __pyx_t_4);
        __pyx_t_4 = 0;
        goto __pyx_L6;
      }

      /* "libopenzwave.pyx":3638
 *                     cret = self.manager.SceneGetValueAsByte(id, deref(cvalueID), &type_byte)
 *                     value_data = type_byte if cret else None
 *                 elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsFloat(id, deref(cvalueID), &type_float)
 *                     value_data = type_float if cret else None
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Decimal, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3638; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_2) {

        /* "libopenzwave.pyx":3639
 *                     value_data = type_byte if cret else None
 *                 elif datatype == "Decimal":
 *                     cret = self.manager.SceneGetValueAsFloat(id, deref(cvalueID), &type_float)             # <<<<<<<<<<<<<<
 *                     value_data = type_float if cret else None
 *                 elif datatype == "Int":
 */
        __pyx_v_cret = __pyx_v_self->manager->SceneGetValueAsFloat(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_float));

        /* "libopenzwave.pyx":3640
 *                 elif datatype == "Decimal":
 *                     cret = self.manager.SceneGetValueAsFloat(id, deref(cvalueID), &type_float)
 *                     value_data = type_float if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "Int":
 *                     cret = self.manager.SceneGetValueAsInt(id, deref(cvalueID), &type_int)
 */
        if ((__pyx_v_cret != 0)) {
          __pyx_t_3 = PyFloat_FromDouble(__pyx_v_type_float); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3640; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_4 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_value_data, __pyx_t_4);
        __pyx_t_4 = 0;
        goto __pyx_L6;
      }

      /* "libopenzwave.pyx":3641
 *                     cret = self.manager.SceneGetValueAsFloat(id, deref(cvalueID), &type_float)
 *                     value_data = type_float if cret else None
 *                 elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsInt(id, deref(cvalueID), &type_int)
 *                     value_data = type_int if cret else None
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Int, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3641; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_2) {

        /* "libopenzwave.pyx":3642
 *                     value_data = type_float if cret else None
 *                 elif datatype == "Int":
 *                     cret = self.manager.SceneGetValueAsInt(id, deref(cvalueID), &type_int)             # <<<<<<<<<<<<<<
 *                     value_data = type_int if cret else None
 *                 elif datatype == "Short":
 */
        __pyx_v_cret = __pyx_v_self->manager->SceneGetValueAsInt(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_int));

        /* "libopenzwave.pyx":3643
 *                 elif datatype == "Int":
 *                     cret = self.manager.SceneGetValueAsInt(id, deref(cvalueID), &type_int)
 *                     value_data = type_int if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "Short":
 *                     cret = self.manager.SceneGetValueAsShort(id, deref(cvalueID), &type_short)
 */
        if ((__pyx_v_cret != 0)) {
          __pyx_t_3 = __Pyx_PyInt_From_int32_t(__pyx_v_type_int); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3643; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_4 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_value_data, __pyx_t_4);
        __pyx_t_4 = 0;
        goto __pyx_L6;
      }

      /* "libopenzwave.pyx":3644
 *                     cret = self.manager.SceneGetValueAsInt(id, deref(cvalueID), &type_int)
 *                     value_data = type_int if cret else None
 *                 elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsShort(id, deref(cvalueID), &type_short)
 *                     value_data = type_short if cret else None
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Short, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3644; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_2) {

        /* "libopenzwave.pyx":3645
 *                     value_data = type_int if cret else None
 *                 elif datatype == "Short":
 *                     cret = self.manager.SceneGetValueAsShort(id, deref(cvalueID), &type_short)             # <<<<<<<<<<<<<<
 *                     value_data = type_short if cret else None
 *                 elif datatype == "String":
 */
        __pyx_v_cret = __pyx_v_self->manager->SceneGetValueAsShort(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_short));

        /* "libopenzwave.pyx":3646
 *                 elif datatype == "Short":
 *                     cret = self.manager.SceneGetValueAsShort(id, deref(cvalueID), &type_short)
 *                     value_data = type_short if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "String":
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 */
        if ((__pyx_v_cret != 0)) {
          __pyx_t_3 = __Pyx_PyInt_From_int16_t(__pyx_v_type_short); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3646; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_4 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_value_data, __pyx_t_4);
        __pyx_t_4 = 0;
        goto __pyx_L6;
      }

      /* "libopenzwave.pyx":3647
 *                     cret = self.manager.SceneGetValueAsShort(id, deref(cvalueID), &type_short)
 *                     value_data = type_short if cret else None
 *                 elif datatype == "String":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_String, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_2) {

        /* "libopenzwave.pyx":3648
 *                     value_data = type_short if cret else None
 *                 elif datatype == "String":
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)             # <<<<<<<<<<<<<<
 *                     value_data = type_string.c_str() if cret else None
 *                 elif datatype == "Button":
 */
        __pyx_v_cret = __pyx_v_self->manager->SceneGetValueAsString(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_string));

        /* "libopenzwave.pyx":3649
 *                 elif datatype == "String":
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "Button":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 */
        if ((__pyx_v_cret != 0)) {
          __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_4 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_value_data, __pyx_t_4);
        __pyx_t_4 = 0;
        goto __pyx_L6;
      }

      /* "libopenzwave.pyx":3650
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None
 *                 elif datatype == "Button":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Button, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_2) {

        /* "libopenzwave.pyx":3651
 *                     value_data = type_string.c_str() if cret else None
 *                 elif datatype == "Button":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)             # <<<<<<<<<<<<<<
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "List":
 */
        __pyx_v_cret = __pyx_v_self->manager->SceneGetValueAsBool(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_bool));

        /* "libopenzwave.pyx":3652
 *                 elif datatype == "Button":
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None             # <<<<<<<<<<<<<<
 *                 elif datatype == "List":
 *                     cret = self.manager.SceneGetValueListSelection(id, deref(cvalueID), &type_string)
 */
        if ((__pyx_v_cret != 0)) {
          __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_type_bool); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3652; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_4 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_value_data, __pyx_t_4);
        __pyx_t_4 = 0;
        goto __pyx_L6;
      }

      /* "libopenzwave.pyx":3653
 *                     cret = self.manager.SceneGetValueAsBool(id, deref(cvalueID), &type_bool)
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "List":             # <<<<<<<<<<<<<<
 *                     cret = self.manager.SceneGetValueListSelection(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None
 */
      __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_List, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (__pyx_t_2) {

        /* "libopenzwave.pyx":3654
 *                     value_data = type_bool if cret else None
 *                 elif datatype == "List":
 *                     cret = self.manager.SceneGetValueListSelection(id, deref(cvalueID), &type_string)             # <<<<<<<<<<<<<<
 *                     value_data = type_string.c_str() if cret else None
 *                 else :
 */
        __pyx_v_cret = __pyx_v_self->manager->SceneGetValueListSelection(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_string));

        /* "libopenzwave.pyx":3655
 *                 elif datatype == "List":
 *                     cret = self.manager.SceneGetValueListSelection(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *                 else :
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 */
        if ((__pyx_v_cret != 0)) {
          __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_4 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_value_data, __pyx_t_4);
        __pyx_t_4 = 0;
        goto __pyx_L6;
      }
      /*else*/ {

        /* "libopenzwave.pyx":3657
 *                     value_data = type_string.c_str() if cret else None
 *                 else :
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)             # <<<<<<<<<<<<<<
 *                     value_data = type_string.c_str() if cret else None
 *                 ret[value_id] = value_data
 */
        __pyx_v_cret = __pyx_v_self->manager->SceneGetValueAsString(__pyx_v_id, (*__pyx_v_cvalueID), (&__pyx_v_type_string));

        /* "libopenzwave.pyx":3658
 *                 else :
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None             # <<<<<<<<<<<<<<
 *                 ret[value_id] = value_data
 *                 vect.pop_back();
 */
        if ((__pyx_v_cret != 0)) {
          __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_type_string.c_str()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3658; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_t_3;
          __pyx_t_3 = 0;
        } else {
          __Pyx_INCREF(Py_None);
          __pyx_t_4 = Py_None;
        }
        __Pyx_DECREF_SET(__pyx_v_value_data, __pyx_t_4);
        __pyx_t_4 = 0;
      }
      __pyx_L6:;

      /* "libopenzwave.pyx":3659
 *                     cret = self.manager.SceneGetValueAsString(id, deref(cvalueID), &type_string)
 *                     value_data = type_string.c_str() if cret else None
 *                 ret[value_id] = value_data             # <<<<<<<<<<<<<<
 *                 vect.pop_back();
 *         return ret
 */
      __pyx_t_4 = __Pyx_PyInt_From_uint64_t(__pyx_v_value_id); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_t_4, __pyx_v_value_data) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3659; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "libopenzwave.pyx":3660
 *                     value_data = type_string.c_str() if cret else None
 *                 ret[value_id] = value_data
 *                 vect.pop_back();             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      __pyx_v_vect.pop_back();
    }
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":3661
 *                 ret[value_id] = value_data
 *                 vect.pop_back();
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3601
 *         return self.manager.CreateScene()
 * 
 *     def sceneGetValues(self, uint8_t id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _sceneGetValues:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("libopenzwave.PyManager.sceneGetValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_datatype);
  __Pyx_XDECREF(__pyx_v_value_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3664
 * 
 * 
 *     def addSceneValue(self, uint8_t sceneid, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addSceneValue:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_261addSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_260addSceneValue[] = "\n.. _addSceneValue:\n\nAdd a ValueID of value to an existing scene.\n\nActually I don't know how to use it :)\n\n:param sceneid: The ID of a scene.\n:type sceneid: int\n:param id: The ID of a value.\n:type id: int\n:param value: The value to set\n:type value: bool, int, float, string\n:return: An integer representing the result of the operation\n    0 : The C method fails\n    1 : The C method succeed\n    2 : Can't find id in the map\n:rtype: int\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_261addSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint8_t __pyx_v_sceneid;
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addSceneValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sceneid,&__pyx_n_s_id,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sceneid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addSceneValue", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addSceneValue", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addSceneValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_sceneid = __Pyx_PyInt_As_uint8_t(values[0]); if (unlikely((__pyx_v_sceneid == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addSceneValue", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3664; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.addSceneValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_260addSceneValue(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_sceneid, __pyx_v_id, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_260addSceneValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, uint8_t __pyx_v_sceneid, PyObject *__pyx_v_id, PyObject *__pyx_v_value) {
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  uint8_t __pyx_v_type_byte;
  int32_t __pyx_v_type_int;
  int16_t __pyx_v_type_short;
  std::string __pyx_v_type_string;
  long __pyx_v_ret;
  PyObject *__pyx_v_datatype = NULL;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  long __pyx_t_7;
  uint8_t __pyx_t_8;
  float __pyx_t_9;
  int32_t __pyx_t_10;
  int16_t __pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addSceneValue", 0);

  /* "libopenzwave.pyx":3694
 *         cdef int16_t type_short
 *         cdef string type_string
 *         ret = 2             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 */
  __pyx_v_ret = 2;

  /* "libopenzwave.pyx":3695
 *         cdef string type_string
 *         ret = 2
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3695; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":3696
 *         ret = 2
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 *             if datatype == "Bool":
 *                 type_bool = value
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3696; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3696; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":3697
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Bool, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3697; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3698
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3698; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "libopenzwave.pyx":3699
 *             if datatype == "Bool":
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3699; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "libopenzwave.pyx":3700
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 type_byte = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3701
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 type_byte = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Byte, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3701; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3702
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 *                 type_byte = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_8 = __Pyx_PyInt_As_uint8_t(__pyx_v_value); if (unlikely((__pyx_t_8 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3702; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_byte = __pyx_t_8;

      /* "libopenzwave.pyx":3703
 *             elif datatype == "Byte":
 *                 type_byte = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3703; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_byte);

      /* "libopenzwave.pyx":3704
 *                 type_byte = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 type_float = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3705
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 type_float = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Decimal, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3706
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 *                 type_float = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3706; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_float = __pyx_t_9;

      /* "libopenzwave.pyx":3707
 *             elif datatype == "Decimal":
 *                 type_float = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3707; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_float);

      /* "libopenzwave.pyx":3708
 *                 type_float = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Int":
 *                 type_int = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3709
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                 type_int = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Int, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3709; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3710
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 *                 type_int = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_10 = __Pyx_PyInt_As_int32_t(__pyx_v_value); if (unlikely((__pyx_t_10 == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3710; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_int = __pyx_t_10;

      /* "libopenzwave.pyx":3711
 *             elif datatype == "Int":
 *                 type_int = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3711; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_int);

      /* "libopenzwave.pyx":3712
 *                 type_int = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Short":
 *                 type_short = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3713
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                 type_short = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Short, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3713; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3714
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 *                 type_short = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_11 = __Pyx_PyInt_As_int16_t(__pyx_v_value); if (unlikely((__pyx_t_11 == (int16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3714; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_short = __pyx_t_11;

      /* "libopenzwave.pyx":3715
 *             elif datatype == "Short":
 *                 type_short = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3715; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_short);

      /* "libopenzwave.pyx":3716
 *                 type_short = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "String":
 *                 type_string = string(value)
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3717
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_String, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3717; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3718
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3718; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "libopenzwave.pyx":3719
 *             elif datatype == "String":
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3719; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "libopenzwave.pyx":3720
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Button":
 *                 type_bool = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3721
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Button, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3721; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3722
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3722; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "libopenzwave.pyx":3723
 *             elif datatype == "Button":
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3723; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->AddSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "libopenzwave.pyx":3724
 *                 type_bool = value
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "List":
 *                 type_string = string(value)
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3725
 *                 cret = self.manager.AddSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValueListSelection(sceneid, values_map.at(id), type_string)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_List, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3725; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3726
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.AddSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3726; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "libopenzwave.pyx":3727
 *             elif datatype == "List":
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValueListSelection(sceneid, values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *         return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3727; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->AddSceneValueListSelection(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "libopenzwave.pyx":3728
 *                 type_string = string(value)
 *                 cret = self.manager.AddSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":3729
 *                 cret = self.manager.AddSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def removeSceneValue(self, uint8_t sceneid, id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_ret); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3729; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3664
 * 
 * 
 *     def addSceneValue(self, uint8_t sceneid, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _addSceneValue:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.addSceneValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3731
 *         return ret
 * 
 *     def removeSceneValue(self, uint8_t sceneid, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeSceneValue:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_263removeSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_262removeSceneValue[] = "\n.. _removeSceneValue:\n\nRemove the Value ID from an existing scene.\n\n:param sceneid: The ID of a scene.\n:type sceneid: int\n:param id: The ID of a value.\n:type id: int\n:return: True if succee. False otherwise\n:rtype: bool\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_263removeSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint8_t __pyx_v_sceneid;
  PyObject *__pyx_v_id = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeSceneValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sceneid,&__pyx_n_s_id,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sceneid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("removeSceneValue", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "removeSceneValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sceneid = __Pyx_PyInt_As_uint8_t(values[0]); if (unlikely((__pyx_v_sceneid == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("removeSceneValue", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3731; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.removeSceneValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_262removeSceneValue(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_sceneid, __pyx_v_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_262removeSceneValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, uint8_t __pyx_v_sceneid, PyObject *__pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("removeSceneValue", 0);

  /* "libopenzwave.pyx":3749
 * 
 *         '''
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             return self.manager.RemoveSceneValue(sceneid, values_map.at(id))
 *         return False
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3749; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":3750
 *         '''
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.RemoveSceneValue(sceneid, values_map.at(id))             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->RemoveSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1))); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3750; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "libopenzwave.pyx":3751
 *         if values_map.find(id) != values_map.end():
 *             return self.manager.RemoveSceneValue(sceneid, values_map.at(id))
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def setSceneValue(self, uint8_t sceneid, id, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3731
 *         return ret
 * 
 *     def removeSceneValue(self, uint8_t sceneid, id):             # <<<<<<<<<<<<<<
 *         '''
 * .. _removeSceneValue:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("libopenzwave.PyManager.removeSceneValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3753
 *         return False
 * 
 *     def setSceneValue(self, uint8_t sceneid, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSceneValue:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_265setSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_264setSceneValue[] = "\n.. _setSceneValue:\n\nSet a value to an existing scene's ValueID.\n\n:param sceneid: The ID of a scene.\n:type sceneid: int\n:param id: The ID of a value.\n:type id: int\n:param value: The value to set\n:type value: bool, int, float, string\n:return: An integer representing the result of the operation\n    0 : The C method fails\n    1 : The C method succeed\n    2 : Can't find id in the map\n:rtype: int\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_265setSceneValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  uint8_t __pyx_v_sceneid;
  PyObject *__pyx_v_id = 0;
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSceneValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sceneid,&__pyx_n_s_id,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sceneid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setSceneValue", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3753; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setSceneValue", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3753; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setSceneValue") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3753; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_sceneid = __Pyx_PyInt_As_uint8_t(values[0]); if (unlikely((__pyx_v_sceneid == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3753; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_id = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSceneValue", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3753; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_264setSceneValue(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_sceneid, __pyx_v_id, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_264setSceneValue(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, uint8_t __pyx_v_sceneid, PyObject *__pyx_v_id, PyObject *__pyx_v_value) {
  float __pyx_v_type_float;
  bool __pyx_v_type_bool;
  uint8_t __pyx_v_type_byte;
  int32_t __pyx_v_type_int;
  int16_t __pyx_v_type_short;
  std::string __pyx_v_type_string;
  long __pyx_v_ret;
  PyObject *__pyx_v_datatype = NULL;
  bool __pyx_v_cret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint64_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  long __pyx_t_7;
  uint8_t __pyx_t_8;
  float __pyx_t_9;
  int32_t __pyx_t_10;
  int16_t __pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setSceneValue", 0);

  /* "libopenzwave.pyx":3782
 *         cdef int16_t type_short
 *         cdef string type_string
 *         ret = 2             # <<<<<<<<<<<<<<
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 */
  __pyx_v_ret = 2;

  /* "libopenzwave.pyx":3783
 *         cdef string type_string
 *         ret = 2
 *         if values_map.find(id) != values_map.end():             # <<<<<<<<<<<<<<
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3783; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_v_12libopenzwave_values_map.find(__pyx_t_1) != __pyx_v_12libopenzwave_values_map.end()) != 0);
  if (__pyx_t_2) {

    /* "libopenzwave.pyx":3784
 *         ret = 2
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]             # <<<<<<<<<<<<<<
 *             if datatype == "Bool":
 *                 type_bool = value
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PyValueTypes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyInt_FromLong(__pyx_v_12libopenzwave_values_map.at(__pyx_t_1).GetType()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3784; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_GetItem(__pyx_t_3, __pyx_t_4); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3784; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_datatype = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "libopenzwave.pyx":3785
 *         if values_map.find(id) != values_map.end():
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Bool, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3785; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3786
 *             datatype = PyValueTypes[values_map.at(id).GetType()]
 *             if datatype == "Bool":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3786; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "libopenzwave.pyx":3787
 *             if datatype == "Bool":
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3787; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "libopenzwave.pyx":3788
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Byte":
 *                 type_byte = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3789
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":             # <<<<<<<<<<<<<<
 *                 type_byte = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Byte, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3789; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3790
 *                 ret = 1 if cret else 0
 *             elif datatype == "Byte":
 *                 type_byte = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_8 = __Pyx_PyInt_As_uint8_t(__pyx_v_value); if (unlikely((__pyx_t_8 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3790; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_byte = __pyx_t_8;

      /* "libopenzwave.pyx":3791
 *             elif datatype == "Byte":
 *                 type_byte = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3791; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_byte);

      /* "libopenzwave.pyx":3792
 *                 type_byte = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Decimal":
 *                 type_float = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3793
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_byte)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":             # <<<<<<<<<<<<<<
 *                 type_float = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Decimal, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3794
 *                 ret = 1 if cret else 0
 *             elif datatype == "Decimal":
 *                 type_float = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_float = __pyx_t_9;

      /* "libopenzwave.pyx":3795
 *             elif datatype == "Decimal":
 *                 type_float = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_float);

      /* "libopenzwave.pyx":3796
 *                 type_float = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Int":
 *                 type_int = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3797
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_float)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":             # <<<<<<<<<<<<<<
 *                 type_int = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Int, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3797; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3798
 *                 ret = 1 if cret else 0
 *             elif datatype == "Int":
 *                 type_int = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_10 = __Pyx_PyInt_As_int32_t(__pyx_v_value); if (unlikely((__pyx_t_10 == (int32_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_int = __pyx_t_10;

      /* "libopenzwave.pyx":3799
 *             elif datatype == "Int":
 *                 type_int = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_int);

      /* "libopenzwave.pyx":3800
 *                 type_int = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Short":
 *                 type_short = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3801
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_int)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":             # <<<<<<<<<<<<<<
 *                 type_short = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Short, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3801; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3802
 *                 ret = 1 if cret else 0
 *             elif datatype == "Short":
 *                 type_short = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_11 = __Pyx_PyInt_As_int16_t(__pyx_v_value); if (unlikely((__pyx_t_11 == (int16_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3802; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_short = __pyx_t_11;

      /* "libopenzwave.pyx":3803
 *             elif datatype == "Short":
 *                 type_short = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_short);

      /* "libopenzwave.pyx":3804
 *                 type_short = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "String":
 *                 type_string = string(value)
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3805
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_short)
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_String, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3805; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3806
 *                 ret = 1 if cret else 0
 *             elif datatype == "String":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "libopenzwave.pyx":3807
 *             elif datatype == "String":
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3807; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "libopenzwave.pyx":3808
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "Button":
 *                 type_bool = value
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3809
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":             # <<<<<<<<<<<<<<
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_Button, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3809; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3810
 *                 ret = 1 if cret else 0
 *             elif datatype == "Button":
 *                 type_bool = value             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_6 == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3810; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_bool = __pyx_t_6;

      /* "libopenzwave.pyx":3811
 *             elif datatype == "Button":
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3811; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetSceneValue(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_bool);

      /* "libopenzwave.pyx":3812
 *                 type_bool = value
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *             elif datatype == "List":
 *                 type_string = string(value)
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }

    /* "libopenzwave.pyx":3813
 *                 cret = self.manager.SetSceneValue(sceneid, values_map.at(id), type_bool)
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":             # <<<<<<<<<<<<<<
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValueListSelection(sceneid, values_map.at(id), type_string)
 */
    __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_datatype, __pyx_n_s_List, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (__pyx_t_2) {

      /* "libopenzwave.pyx":3814
 *                 ret = 1 if cret else 0
 *             elif datatype == "List":
 *                 type_string = string(value)             # <<<<<<<<<<<<<<
 *                 cret = self.manager.SetSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 */
      __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_v_value); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3814; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_type_string = std::string(__pyx_t_12);

      /* "libopenzwave.pyx":3815
 *             elif datatype == "List":
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValueListSelection(sceneid, values_map.at(id), type_string)             # <<<<<<<<<<<<<<
 *                 ret = 1 if cret else 0
 *         return ret
 */
      __pyx_t_1 = __Pyx_PyInt_As_uint64_t(__pyx_v_id); if (unlikely((__pyx_t_1 == (uint64_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3815; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_cret = __pyx_v_self->manager->SetSceneValueListSelection(__pyx_v_sceneid, __pyx_v_12libopenzwave_values_map.at(__pyx_t_1), __pyx_v_type_string);

      /* "libopenzwave.pyx":3816
 *                 type_string = string(value)
 *                 cret = self.manager.SetSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
      if ((__pyx_v_cret != 0)) {
        __pyx_t_7 = 1;
      } else {
        __pyx_t_7 = 0;
      }
      __pyx_v_ret = __pyx_t_7;
      goto __pyx_L4;
    }
    __pyx_L4:;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "libopenzwave.pyx":3817
 *                 cret = self.manager.SetSceneValueListSelection(sceneid, values_map.at(id), type_string)
 *                 ret = 1 if cret else 0
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def getSceneLabel(self, sceneid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_ret); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3817; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3753
 *         return False
 * 
 *     def setSceneValue(self, uint8_t sceneid, id, value):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSceneValue:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_datatype);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3819
 *         return ret
 * 
 *     def getSceneLabel(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSceneLabel:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_267getSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_266getSceneLabel[] = "\n.. _getSceneLabel:\n\nReturns a label for the particular scene.\n\n:param sceneId: The ID of a scene.\n:type sceneId: int\n:param value: The value to set\n:type value: int\n:return: The label string.\n:rtype: str\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, activateScene_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_267getSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSceneLabel (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_266getSceneLabel(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_sceneid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_266getSceneLabel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  std::string __pyx_v_c_string;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint8_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSceneLabel", 0);

  /* "libopenzwave.pyx":3837
 * 
 *         '''
 *         cdef string c_string = self.manager.GetSceneLabel(sceneid)             # <<<<<<<<<<<<<<
 *         return c_string.c_str()
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint8_t(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_c_string = __pyx_v_self->manager->GetSceneLabel(__pyx_t_1);

  /* "libopenzwave.pyx":3838
 *         '''
 *         cdef string c_string = self.manager.GetSceneLabel(sceneid)
 *         return c_string.c_str()             # <<<<<<<<<<<<<<
 * 
 *     def setSceneLabel(self, sceneid, char *label):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_c_string.c_str()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3819
 *         return ret
 * 
 *     def getSceneLabel(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _getSceneLabel:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.getSceneLabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3840
 *         return c_string.c_str()
 * 
 *     def setSceneLabel(self, sceneid, char *label):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSceneLabel:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_269setSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_268setSceneLabel[] = "\n.. _setSceneLabel:\n\nSets a label for the particular scene.\n\n:param sceneId: The ID of the scene.\n:type sceneId: int\n:param value: The new value of the label.\n:type value: int\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_269setSceneLabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_sceneid = 0;
  char *__pyx_v_label;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSceneLabel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_sceneid,&__pyx_n_s_label,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sceneid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setSceneLabel", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3840; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setSceneLabel") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3840; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_sceneid = values[0];
    __pyx_v_label = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3840; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setSceneLabel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3840; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneLabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_268setSceneLabel(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), __pyx_v_sceneid, __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_268setSceneLabel(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_sceneid, char *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint8_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setSceneLabel", 0);

  /* "libopenzwave.pyx":3856
 * 
 *         '''
 *         self.manager.SetSceneLabel(sceneid, string(label))             # <<<<<<<<<<<<<<
 * 
 *     def sceneExists(self, sceneid):
 */
  __pyx_t_1 = __Pyx_PyInt_As_uint8_t(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3856; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->manager->SetSceneLabel(__pyx_t_1, std::string(__pyx_v_label));

  /* "libopenzwave.pyx":3840
 *         return c_string.c_str()
 * 
 *     def setSceneLabel(self, sceneid, char *label):             # <<<<<<<<<<<<<<
 *         '''
 * .. _setSceneLabel:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("libopenzwave.PyManager.setSceneLabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3858
 *         self.manager.SetSceneLabel(sceneid, string(label))
 * 
 *     def sceneExists(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _sceneExists:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_271sceneExists(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_270sceneExists[] = "\n.. _sceneExists:\n\nCheck if a Scene ID is defined.\n\n:param sceneId: The ID of the scene to check.\n:type sceneId: int\n:return: True if Scene ID exists.\n:rtype: bool\n:see: getNumScenes_, getAllScenes_, removeAllScenes_, createScene_, removeScene_, activateScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_271sceneExists(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sceneExists (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_270sceneExists(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_sceneid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_270sceneExists(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint8_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sceneExists", 0);

  /* "libopenzwave.pyx":3874
 * 
 *         '''
 *         return self.manager.SceneExists(sceneid)             # <<<<<<<<<<<<<<
 * 
 *     def activateScene(self, sceneid):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint8_t(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->SceneExists(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3874; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3858
 *         self.manager.SetSceneLabel(sceneid, string(label))
 * 
 *     def sceneExists(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _sceneExists:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.sceneExists", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libopenzwave.pyx":3876
 *         return self.manager.SceneExists(sceneid)
 * 
 *     def activateScene(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _activateScene:
 */

/* Python wrapper */
static PyObject *__pyx_pw_12libopenzwave_9PyManager_273activateScene(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid); /*proto*/
static char __pyx_doc_12libopenzwave_9PyManager_272activateScene[] = "\n.. _activateScene:\n\nActivate given scene to perform all its actions.\n\n:param sceneId: The ID of the scene to activate.\n:type sceneId: int\n:return: True if it is successful.\n:rtype: bool\n:see: getNumScenes_, getAllScenes_, sceneExists_, removeAllScenes_, createScene_, removeScene_, getSceneLabel_, setSceneLabel_, removeSceneValue_, addSceneValue_, setSceneValue_, sceneGetValues_\n\n        ";
static PyObject *__pyx_pw_12libopenzwave_9PyManager_273activateScene(PyObject *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("activateScene (wrapper)", 0);
  __pyx_r = __pyx_pf_12libopenzwave_9PyManager_272activateScene(((struct __pyx_obj_12libopenzwave_PyManager *)__pyx_v_self), ((PyObject *)__pyx_v_sceneid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12libopenzwave_9PyManager_272activateScene(struct __pyx_obj_12libopenzwave_PyManager *__pyx_v_self, PyObject *__pyx_v_sceneid) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  uint8_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("activateScene", 0);

  /* "libopenzwave.pyx":3892
 * 
 *         '''
 *         return self.manager.ActivateScene(sceneid)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_uint8_t(__pyx_v_sceneid); if (unlikely((__pyx_t_1 == (uint8_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->manager->ActivateScene(__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3892; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "libopenzwave.pyx":3876
 *         return self.manager.SceneExists(sceneid)
 * 
 *     def activateScene(self, sceneid):             # <<<<<<<<<<<<<<
 *         '''
 * .. _activateScene:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("libopenzwave.PyManager.activateScene", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

static PyObject *__pyx_convert_string_to_py_(const std::string &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_to_py_", 0);

  /* "string.to_py":31
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_string_to_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_12libopenzwave_PyOptions(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_12libopenzwave_PyOptions(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12libopenzwave_PyOptions[] = {
  {__Pyx_NAMESTR("create"), (PyCFunction)__pyx_pw_12libopenzwave_9PyOptions_1create, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_create)},
  {__Pyx_NAMESTR("lock"), (PyCFunction)__pyx_pw_12libopenzwave_9PyOptions_3lock, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_2lock)},
  {__Pyx_NAMESTR("addOptionBool"), (PyCFunction)__pyx_pw_12libopenzwave_9PyOptions_5addOptionBool, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_4addOptionBool)},
  {__Pyx_NAMESTR("addOptionInt"), (PyCFunction)__pyx_pw_12libopenzwave_9PyOptions_7addOptionInt, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_6addOptionInt)},
  {__Pyx_NAMESTR("addOptionString"), (PyCFunction)__pyx_pw_12libopenzwave_9PyOptions_9addOptionString, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_8addOptionString)},
  {__Pyx_NAMESTR("getConfigPath"), (PyCFunction)__pyx_pw_12libopenzwave_9PyOptions_11getConfigPath, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyOptions_10getConfigPath)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12libopenzwave_PyOptions = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("libopenzwave.PyOptions"), /*tp_name*/
  sizeof(struct __pyx_obj_12libopenzwave_PyOptions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12libopenzwave_PyOptions, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    Manage options manager\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12libopenzwave_PyOptions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12libopenzwave_PyOptions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_12libopenzwave_RetAlloc(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_12libopenzwave_8RetAlloc_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_12libopenzwave_RetAlloc(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_12libopenzwave_8RetAlloc_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_12libopenzwave_RetAlloc[] = {
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12libopenzwave_RetAlloc = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("libopenzwave.RetAlloc"), /*tp_name*/
  sizeof(struct __pyx_obj_12libopenzwave_RetAlloc), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12libopenzwave_RetAlloc, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    Map an array of uint8_t used when retrieving sets.\n    Allocate memory at init and free it when no more reference to it exist.\n    Give it to lion as Nico0084 says : http://blog.naviso.fr/wordpress/wp-sphinxdoc/uploads/2011/11/MemoryLeaks3.jpg\n\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12libopenzwave_RetAlloc, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12libopenzwave_RetAlloc, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_12libopenzwave_PyManager(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_12libopenzwave_PyManager *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_12libopenzwave_PyManager *)o);
  p->_watcherCallback = Py_None; Py_INCREF(Py_None);
  p->_controllerCallback = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_12libopenzwave_PyManager(PyObject *o) {
  struct __pyx_obj_12libopenzwave_PyManager *p = (struct __pyx_obj_12libopenzwave_PyManager *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_watcherCallback);
  Py_CLEAR(p->_controllerCallback);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_12libopenzwave_PyManager(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_12libopenzwave_PyManager *p = (struct __pyx_obj_12libopenzwave_PyManager *)o;
  if (p->_watcherCallback) {
    e = (*v)(p->_watcherCallback, a); if (e) return e;
  }
  if (p->_controllerCallback) {
    e = (*v)(p->_controllerCallback, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_12libopenzwave_PyManager(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_12libopenzwave_PyManager *p = (struct __pyx_obj_12libopenzwave_PyManager *)o;
  tmp = ((PyObject*)p->_watcherCallback);
  p->_watcherCallback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_controllerCallback);
  p->_controllerCallback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_12libopenzwave_PyManager[] = {
  {__Pyx_NAMESTR("create"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_1create, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_create)},
  {__Pyx_NAMESTR("writeConfig"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_3writeConfig, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_2writeConfig)},
  {__Pyx_NAMESTR("addDriver"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_5addDriver, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_4addDriver)},
  {__Pyx_NAMESTR("removeDriver"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_7removeDriver, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_6removeDriver)},
  {__Pyx_NAMESTR("getControllerInterfaceType"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_9getControllerInterfaceType, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_8getControllerInterfaceType)},
  {__Pyx_NAMESTR("getControllerPath"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_11getControllerPath, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_10getControllerPath)},
  {__Pyx_NAMESTR("getControllerNodeId"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_13getControllerNodeId, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_12getControllerNodeId)},
  {__Pyx_NAMESTR("getSUCNodeId"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_15getSUCNodeId, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_14getSUCNodeId)},
  {__Pyx_NAMESTR("isPrimaryController"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_17isPrimaryController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_16isPrimaryController)},
  {__Pyx_NAMESTR("isStaticUpdateController"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_19isStaticUpdateController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_18isStaticUpdateController)},
  {__Pyx_NAMESTR("isBridgeController"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_21isBridgeController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_20isBridgeController)},
  {__Pyx_NAMESTR("getLibraryVersion"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_23getLibraryVersion, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_22getLibraryVersion)},
  {__Pyx_NAMESTR("getPythonLibraryVersion"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_25getPythonLibraryVersion, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_24getPythonLibraryVersion)},
  {__Pyx_NAMESTR("getPythonLibraryVersionNumber"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_27getPythonLibraryVersionNumber, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_26getPythonLibraryVersionNumber)},
  {__Pyx_NAMESTR("getOzwLibraryVersion"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_29getOzwLibraryVersion, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_28getOzwLibraryVersion)},
  {__Pyx_NAMESTR("getOzwLibraryVersionNumber"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_31getOzwLibraryVersionNumber, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_30getOzwLibraryVersionNumber)},
  {__Pyx_NAMESTR("getLibraryTypeName"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_33getLibraryTypeName, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_32getLibraryTypeName)},
  {__Pyx_NAMESTR("getSendQueueCount"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_35getSendQueueCount, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_34getSendQueueCount)},
  {__Pyx_NAMESTR("logDriverStatistics"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_37logDriverStatistics, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_36logDriverStatistics)},
  {__Pyx_NAMESTR("getDriverStatistics"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_39getDriverStatistics, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_38getDriverStatistics)},
  {__Pyx_NAMESTR("testNetworkNode"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_41testNetworkNode, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_40testNetworkNode)},
  {__Pyx_NAMESTR("testNetwork"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_43testNetwork, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_42testNetwork)},
  {__Pyx_NAMESTR("healNetworkNode"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_45healNetworkNode, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_44healNetworkNode)},
  {__Pyx_NAMESTR("healNetwork"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_47healNetwork, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_46healNetwork)},
  {__Pyx_NAMESTR("getPollInterval"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_49getPollInterval, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_48getPollInterval)},
  {__Pyx_NAMESTR("setPollInterval"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_51setPollInterval, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_50setPollInterval)},
  {__Pyx_NAMESTR("enablePoll"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_53enablePoll, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_52enablePoll)},
  {__Pyx_NAMESTR("disablePoll"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_55disablePoll, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_54disablePoll)},
  {__Pyx_NAMESTR("isPolled"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_57isPolled, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_56isPolled)},
  {__Pyx_NAMESTR("getPollIntensity"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_59getPollIntensity, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_58getPollIntensity)},
  {__Pyx_NAMESTR("setPollIntensity"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_61setPollIntensity, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_60setPollIntensity)},
  {__Pyx_NAMESTR("getNodeStatistics"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_63getNodeStatistics, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_62getNodeStatistics)},
  {__Pyx_NAMESTR("requestNodeDynamic"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_65requestNodeDynamic, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_64requestNodeDynamic)},
  {__Pyx_NAMESTR("refreshNodeInfo"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_67refreshNodeInfo, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_66refreshNodeInfo)},
  {__Pyx_NAMESTR("requestNodeState"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_69requestNodeState, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_68requestNodeState)},
  {__Pyx_NAMESTR("isNodeBeamingDevice"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_71isNodeBeamingDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_70isNodeBeamingDevice)},
  {__Pyx_NAMESTR("isNodeListeningDevice"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_73isNodeListeningDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_72isNodeListeningDevice)},
  {__Pyx_NAMESTR("isNodeFrequentListeningDevice"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_75isNodeFrequentListeningDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_74isNodeFrequentListeningDevice)},
  {__Pyx_NAMESTR("isNodeSecurityDevice"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_77isNodeSecurityDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_76isNodeSecurityDevice)},
  {__Pyx_NAMESTR("isNodeRoutingDevice"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_79isNodeRoutingDevice, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_78isNodeRoutingDevice)},
  {__Pyx_NAMESTR("getNodeMaxBaudRate"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_81getNodeMaxBaudRate, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_80getNodeMaxBaudRate)},
  {__Pyx_NAMESTR("getNodeVersion"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_83getNodeVersion, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_82getNodeVersion)},
  {__Pyx_NAMESTR("getNodeSecurity"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_85getNodeSecurity, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_84getNodeSecurity)},
  {__Pyx_NAMESTR("getNodeBasic"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_87getNodeBasic, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_86getNodeBasic)},
  {__Pyx_NAMESTR("getNodeGeneric"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_89getNodeGeneric, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_88getNodeGeneric)},
  {__Pyx_NAMESTR("getNodeSpecific"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_91getNodeSpecific, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_90getNodeSpecific)},
  {__Pyx_NAMESTR("getNodeType"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_93getNodeType, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_92getNodeType)},
  {__Pyx_NAMESTR("getNodeNeighbors"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_95getNodeNeighbors, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_94getNodeNeighbors)},
  {__Pyx_NAMESTR("getNodeManufacturerName"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_97getNodeManufacturerName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_96getNodeManufacturerName)},
  {__Pyx_NAMESTR("getNodeProductName"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_99getNodeProductName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_98getNodeProductName)},
  {__Pyx_NAMESTR("getNodeName"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_101getNodeName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_100getNodeName)},
  {__Pyx_NAMESTR("getNodeLocation"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_103getNodeLocation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_102getNodeLocation)},
  {__Pyx_NAMESTR("getNodeManufacturerId"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_105getNodeManufacturerId, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_104getNodeManufacturerId)},
  {__Pyx_NAMESTR("getNodeProductType"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_107getNodeProductType, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_106getNodeProductType)},
  {__Pyx_NAMESTR("getNodeProductId"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_109getNodeProductId, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_108getNodeProductId)},
  {__Pyx_NAMESTR("setNodeManufacturerName"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_111setNodeManufacturerName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_110setNodeManufacturerName)},
  {__Pyx_NAMESTR("setNodeProductName"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_113setNodeProductName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_112setNodeProductName)},
  {__Pyx_NAMESTR("setNodeName"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_115setNodeName, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_114setNodeName)},
  {__Pyx_NAMESTR("setNodeLocation"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_117setNodeLocation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_116setNodeLocation)},
  {__Pyx_NAMESTR("setNodeOn"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_119setNodeOn, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_118setNodeOn)},
  {__Pyx_NAMESTR("setNodeOff"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_121setNodeOff, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_120setNodeOff)},
  {__Pyx_NAMESTR("setNodeLevel"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_123setNodeLevel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_122setNodeLevel)},
  {__Pyx_NAMESTR("isNodeInfoReceived"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_125isNodeInfoReceived, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_124isNodeInfoReceived)},
  {__Pyx_NAMESTR("getNodeClassInformation"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_127getNodeClassInformation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_126getNodeClassInformation)},
  {__Pyx_NAMESTR("isNodeAwake"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_129isNodeAwake, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_128isNodeAwake)},
  {__Pyx_NAMESTR("isNodeFailed"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_131isNodeFailed, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_130isNodeFailed)},
  {__Pyx_NAMESTR("getNodeQueryStage"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_133getNodeQueryStage, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_132getNodeQueryStage)},
  {__Pyx_NAMESTR("getNodeQueryStageCode"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_135getNodeQueryStageCode, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_134getNodeQueryStageCode)},
  {__Pyx_NAMESTR("setValue"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_137setValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_136setValue)},
  {__Pyx_NAMESTR("refreshValue"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_139refreshValue, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_138refreshValue)},
  {__Pyx_NAMESTR("getValueLabel"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_141getValueLabel, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_140getValueLabel)},
  {__Pyx_NAMESTR("setValueLabel"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_143setValueLabel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_142setValueLabel)},
  {__Pyx_NAMESTR("getValueUnits"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_145getValueUnits, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_144getValueUnits)},
  {__Pyx_NAMESTR("setValueUnits"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_147setValueUnits, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_146setValueUnits)},
  {__Pyx_NAMESTR("getValueHelp"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_149getValueHelp, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_148getValueHelp)},
  {__Pyx_NAMESTR("setValueHelp"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_151setValueHelp, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_150setValueHelp)},
  {__Pyx_NAMESTR("getValueMin"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_153getValueMin, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_152getValueMin)},
  {__Pyx_NAMESTR("getValueMax"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_155getValueMax, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_154getValueMax)},
  {__Pyx_NAMESTR("isValueReadOnly"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_157isValueReadOnly, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_156isValueReadOnly)},
  {__Pyx_NAMESTR("isValueWriteOnly"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_159isValueWriteOnly, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_158isValueWriteOnly)},
  {__Pyx_NAMESTR("isValueSet"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_161isValueSet, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_160isValueSet)},
  {__Pyx_NAMESTR("isValuePolled"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_163isValuePolled, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_162isValuePolled)},
  {__Pyx_NAMESTR("getValueGenre"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_165getValueGenre, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_164getValueGenre)},
  {__Pyx_NAMESTR("getValueCommandClass"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_167getValueCommandClass, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_166getValueCommandClass)},
  {__Pyx_NAMESTR("getValueInstance"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_169getValueInstance, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_168getValueInstance)},
  {__Pyx_NAMESTR("getValueIndex"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_171getValueIndex, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_170getValueIndex)},
  {__Pyx_NAMESTR("getValueType"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_173getValueType, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_172getValueType)},
  {__Pyx_NAMESTR("getValue"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_175getValue, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_174getValue)},
  {__Pyx_NAMESTR("getValueAsBool"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_177getValueAsBool, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_176getValueAsBool)},
  {__Pyx_NAMESTR("getValueAsByte"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_179getValueAsByte, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_178getValueAsByte)},
  {__Pyx_NAMESTR("getValueAsFloat"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_181getValueAsFloat, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_180getValueAsFloat)},
  {__Pyx_NAMESTR("getValueAsShort"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_183getValueAsShort, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_182getValueAsShort)},
  {__Pyx_NAMESTR("getValueAsInt"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_185getValueAsInt, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_184getValueAsInt)},
  {__Pyx_NAMESTR("getValueAsString"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_187getValueAsString, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_186getValueAsString)},
  {__Pyx_NAMESTR("getValueListSelectionStr"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_189getValueListSelectionStr, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_188getValueListSelectionStr)},
  {__Pyx_NAMESTR("getValueListSelectionNum"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_191getValueListSelectionNum, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_190getValueListSelectionNum)},
  {__Pyx_NAMESTR("getValueListItems"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_193getValueListItems, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_192getValueListItems)},
  {__Pyx_NAMESTR("pressButton"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_195pressButton, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_194pressButton)},
  {__Pyx_NAMESTR("releaseButton"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_197releaseButton, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_196releaseButton)},
  {__Pyx_NAMESTR("getValueFloatPrecision"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_199getValueFloatPrecision, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_198getValueFloatPrecision)},
  {__Pyx_NAMESTR("getChangeVerified"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_201getChangeVerified, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_200getChangeVerified)},
  {__Pyx_NAMESTR("setChangeVerified"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_203setChangeVerified, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_202setChangeVerified)},
  {__Pyx_NAMESTR("setSwitchPoint"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_205setSwitchPoint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_204setSwitchPoint)},
  {__Pyx_NAMESTR("removeSwitchPoint"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_207removeSwitchPoint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_206removeSwitchPoint)},
  {__Pyx_NAMESTR("clearSwitchPoints"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_209clearSwitchPoints, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_208clearSwitchPoints)},
  {__Pyx_NAMESTR("getSwitchPoint"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_211getSwitchPoint, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_210getSwitchPoint)},
  {__Pyx_NAMESTR("getNumSwitchPoints"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_213getNumSwitchPoints, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_212getNumSwitchPoints)},
  {__Pyx_NAMESTR("switchAllOn"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_215switchAllOn, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_214switchAllOn)},
  {__Pyx_NAMESTR("switchAllOff"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_217switchAllOff, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_216switchAllOff)},
  {__Pyx_NAMESTR("setConfigParam"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_219setConfigParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_218setConfigParam)},
  {__Pyx_NAMESTR("requestConfigParam"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_221requestConfigParam, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_220requestConfigParam)},
  {__Pyx_NAMESTR("requestAllConfigParams"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_223requestAllConfigParams, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_222requestAllConfigParams)},
  {__Pyx_NAMESTR("getNumGroups"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_225getNumGroups, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_224getNumGroups)},
  {__Pyx_NAMESTR("getAssociations"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_227getAssociations, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_226getAssociations)},
  {__Pyx_NAMESTR("getMaxAssociations"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_229getMaxAssociations, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_228getMaxAssociations)},
  {__Pyx_NAMESTR("getGroupLabel"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_231getGroupLabel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_230getGroupLabel)},
  {__Pyx_NAMESTR("addAssociation"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_233addAssociation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_232addAssociation)},
  {__Pyx_NAMESTR("removeAssociation"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_235removeAssociation, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_234removeAssociation)},
  {__Pyx_NAMESTR("addWatcher"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_237addWatcher, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_236addWatcher)},
  {__Pyx_NAMESTR("removeWatcher"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_239removeWatcher, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_238removeWatcher)},
  {__Pyx_NAMESTR("resetController"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_241resetController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_240resetController)},
  {__Pyx_NAMESTR("softResetController"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_243softResetController, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_242softResetController)},
  {__Pyx_NAMESTR("cancelControllerCommand"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_245cancelControllerCommand, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_244cancelControllerCommand)},
  {__Pyx_NAMESTR("beginControllerCommand"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_247beginControllerCommand, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_246beginControllerCommand)},
  {__Pyx_NAMESTR("getNumScenes"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_249getNumScenes, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_248getNumScenes)},
  {__Pyx_NAMESTR("getAllScenes"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_251getAllScenes, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_250getAllScenes)},
  {__Pyx_NAMESTR("removeAllScenes"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_253removeAllScenes, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_252removeAllScenes)},
  {__Pyx_NAMESTR("removeScene"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_255removeScene, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_254removeScene)},
  {__Pyx_NAMESTR("createScene"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_257createScene, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_256createScene)},
  {__Pyx_NAMESTR("sceneGetValues"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_259sceneGetValues, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_258sceneGetValues)},
  {__Pyx_NAMESTR("addSceneValue"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_261addSceneValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_260addSceneValue)},
  {__Pyx_NAMESTR("removeSceneValue"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_263removeSceneValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_262removeSceneValue)},
  {__Pyx_NAMESTR("setSceneValue"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_265setSceneValue, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_264setSceneValue)},
  {__Pyx_NAMESTR("getSceneLabel"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_267getSceneLabel, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_266getSceneLabel)},
  {__Pyx_NAMESTR("setSceneLabel"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_269setSceneLabel, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_268setSceneLabel)},
  {__Pyx_NAMESTR("sceneExists"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_271sceneExists, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_270sceneExists)},
  {__Pyx_NAMESTR("activateScene"), (PyCFunction)__pyx_pw_12libopenzwave_9PyManager_273activateScene, METH_O, __Pyx_DOCSTR(__pyx_doc_12libopenzwave_9PyManager_272activateScene)},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_12libopenzwave_PyManager = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("libopenzwave.PyManager"), /*tp_name*/
  sizeof(struct __pyx_obj_12libopenzwave_PyManager), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_12libopenzwave_PyManager, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\nThe main public interface to OpenZWave.\n\nA singleton class providing the main public interface to OpenZWave.  The\nManager class exposes all the functionality required to add Z-Wave support to\nan application.  It handles the sending and receiving of Z-Wave messages as\nwell as the configuration of a Z-Wave network and its devices, freeing the\nlibrary user from the burden of learning the low-level details of the Z-Wave\nprotocol.\n\nAll Z-Wave functionality is accessed via the Manager class.  While this does\nnot make for the most efficient code structure, it does enable the library to\nhandle potentially complex and hard-to-debug issues such as multi-threading and\nobject lifespans behind the scenes. Application development is therefore\nsimplified and less prone to bugs.\n\nThere can be only one instance of the Manager class, and all applications will\nstart by calling Manager::Create static method to create that instance.  From\nthen on, a call to the Manager::Get static method will return the pointer to\nthe Manager object.  On application exit, Manager::Destroy should be called to\nallow OpenZWave to clean up and delete any other objects it has created.\n\nOnce the Manager has been created, a call should be made to Manager::AddWatcher\nto install a notification callback handler.  This handler will receive\nnotifications of Z-Wave network changes and updates to device values, and is an\nessential element of OpenZWave.\n\nNext, a call should be made to Manager::AddDriver for each Z-Wave controller\nattached to the PC.  Each Driver will handle the sending and receiving of\nmessages for all the devices in its controller's Z-Wave network.  The Driver\nwill read any previously saved configuration and then query the Z-Wave\ncontroller for any missing information.  Once that process is complete, a\nDriverReady notification callback will be sent containing the Home ID of the\ncontroller, which is required by most of the other Manager class methods.\n\nAfter the DriverReady notification is sent, the Driver will poll each node on\nthe network to update information about each node.  After all \"awake\" nodes\nhave been polled, an \"AllAwakeNodesQueried\" notification is sent.  This is when\na client application can expect all of the node information (both static\ninformation, like the physical device's capabilities, session information (like\n[associations and/or names] and dynamic information (like temperature or on/off\nstate) to be available.  Finally, after all nodes (whether setening or\nsleeping) have been polled, an \"AllNodesQueried\" notification is sent.\n    "), /*tp_doc*/
  __pyx_tp_traverse_12libopenzwave_PyManager, /*tp_traverse*/
  __pyx_tp_clear_12libopenzwave_PyManager, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_12libopenzwave_PyManager, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_12libopenzwave_PyManager, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("driverData"), (PyCFunction)__pyx_pw_12libopenzwave_1driverData, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("libopenzwave"),
    __Pyx_DOCSTR(__pyx_k_module_libopenzwave_This_file_i), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_s_16_bit_signed_value, __pyx_k_16_bit_signed_value, sizeof(__pyx_k_16_bit_signed_value), 0, 0, 1, 0},
  {&__pyx_kp_s_32_bit_signed_value, __pyx_k_32_bit_signed_value, sizeof(__pyx_k_32_bit_signed_value), 0, 0, 1, 0},
  {&__pyx_kp_s_8_bit_unsigned_value, __pyx_k_8_bit_unsigned_value, sizeof(__pyx_k_8_bit_unsigned_value), 0, 0, 1, 0},
  {&__pyx_n_s_ACKCnt, __pyx_k_ACKCnt, sizeof(__pyx_k_ACKCnt), 0, 0, 1, 1},
  {&__pyx_n_s_ACKWaiting, __pyx_k_ACKWaiting, sizeof(__pyx_k_ACKWaiting), 0, 0, 1, 1},
  {&__pyx_kp_s_A_driver_for_a_PC_Z_Wave_control, __pyx_k_A_driver_for_a_PC_Z_Wave_control, sizeof(__pyx_k_A_driver_for_a_PC_Z_Wave_control), 0, 0, 1, 0},
  {&__pyx_kp_s_A_manager_notification_report, __pyx_k_A_manager_notification_report, sizeof(__pyx_k_A_manager_notification_report), 0, 0, 1, 0},
  {&__pyx_kp_s_A_new_node_has_been_added_to_Ope, __pyx_k_A_new_node_has_been_added_to_Ope, sizeof(__pyx_k_A_new_node_has_been_added_to_Ope), 0, 0, 1, 0},
  {&__pyx_kp_s_A_new_node_has_been_found_not_al, __pyx_k_A_new_node_has_been_found_not_al, sizeof(__pyx_k_A_new_node_has_been_found_not_al), 0, 0, 1, 0},
  {&__pyx_kp_s_A_new_node_value_has_been_added, __pyx_k_A_new_node_value_has_been_added, sizeof(__pyx_k_A_new_node_value_has_been_added), 0, 0, 1, 0},
  {&__pyx_kp_s_A_node_has_been_removed_from_Ope, __pyx_k_A_node_has_been_removed_from_Ope, sizeof(__pyx_k_A_node_has_been_removed_from_Ope), 0, 0, 1, 0},
  {&__pyx_kp_s_A_node_has_triggered_an_event_Th, __pyx_k_A_node_has_triggered_an_event_Th, sizeof(__pyx_k_A_node_has_triggered_an_event_Th), 0, 0, 1, 0},
  {&__pyx_kp_s_A_node_value_has_been_removed_fr, __pyx_k_A_node_value_has_been_removed_fr, sizeof(__pyx_k_A_node_value_has_been_removed_fr), 0, 0, 1, 0},
  {&__pyx_kp_s_A_node_value_has_been_updated_fr, __pyx_k_A_node_value_has_been_updated_fr, sizeof(__pyx_k_A_node_value_has_been_updated_fr), 0, 0, 1, 0},
  {&__pyx_kp_s_A_node_value_has_been_updated_fr_2, __pyx_k_A_node_value_has_been_updated_fr_2, sizeof(__pyx_k_A_node_value_has_been_updated_fr_2), 0, 0, 1, 0},
  {&__pyx_kp_s_A_write_only_value_that_is_the_e, __pyx_k_A_write_only_value_that_is_the_e, sizeof(__pyx_k_A_write_only_value_that_is_the_e), 0, 0, 1, 0},
  {&__pyx_n_s_AddDevice, __pyx_k_AddDevice, sizeof(__pyx_k_AddDevice), 0, 0, 1, 1},
  {&__pyx_kp_s_Add_a_new_controller_to_the_Z_Wa, __pyx_k_Add_a_new_controller_to_the_Z_Wa, sizeof(__pyx_k_Add_a_new_controller_to_the_Z_Wa), 0, 0, 1, 0},
  {&__pyx_kp_s_Add_a_new_device_but_not_a_contr, __pyx_k_Add_a_new_device_but_not_a_contr, sizeof(__pyx_k_Add_a_new_device_but_not_a_contr), 0, 0, 1, 0},
  {&__pyx_n_s_Alert, __pyx_k_Alert, sizeof(__pyx_k_Alert), 0, 0, 1, 1},
  {&__pyx_n_s_Alive, __pyx_k_Alive, sizeof(__pyx_k_Alive), 0, 0, 1, 1},
  {&__pyx_n_s_AllNodesQueried, __pyx_k_AllNodesQueried, sizeof(__pyx_k_AllNodesQueried), 0, 0, 1, 1},
  {&__pyx_n_s_AllNodesQueriedSomeDead, __pyx_k_AllNodesQueriedSomeDead, sizeof(__pyx_k_AllNodesQueriedSomeDead), 0, 0, 1, 1},
  {&__pyx_kp_s_All_awake_nodes_have_been_querie, __pyx_k_All_awake_nodes_have_been_querie, sizeof(__pyx_k_All_awake_nodes_have_been_querie), 0, 0, 1, 0},
  {&__pyx_kp_s_All_nodes_and_values_for_this_dr, __pyx_k_All_nodes_and_values_for_this_dr, sizeof(__pyx_k_All_nodes_and_values_for_this_dr), 0, 0, 1, 0},
  {&__pyx_kp_s_All_nodes_have_been_queried_but, __pyx_k_All_nodes_have_been_queried_but, sizeof(__pyx_k_All_nodes_have_been_queried_but), 0, 0, 1, 0},
  {&__pyx_kp_s_All_nodes_have_been_queried_so_c, __pyx_k_All_nodes_have_been_queried_so_c, sizeof(__pyx_k_All_nodes_have_been_queried_so_c), 0, 0, 1, 0},
  {&__pyx_kp_s_All_the_initialisation_queries_o, __pyx_k_All_the_initialisation_queries_o, sizeof(__pyx_k_All_the_initialisation_queries_o), 0, 0, 1, 0},
  {&__pyx_n_s_Always, __pyx_k_Always, sizeof(__pyx_k_Always), 0, 0, 1, 1},
  {&__pyx_n_s_AssignReturnRoute, __pyx_k_AssignReturnRoute, sizeof(__pyx_k_AssignReturnRoute), 0, 0, 1, 1},
  {&__pyx_kp_s_Assign_a_network_return_routes_t, __pyx_k_Assign_a_network_return_routes_t, sizeof(__pyx_k_Assign_a_network_return_routes_t), 0, 0, 1, 0},
  {&__pyx_n_s_Associations, __pyx_k_Associations, sizeof(__pyx_k_Associations), 0, 0, 1, 1},
  {&__pyx_n_s_Awake, __pyx_k_Awake, sizeof(__pyx_k_Awake), 0, 0, 1, 1},
  {&__pyx_n_s_AwakeNodesQueried, __pyx_k_AwakeNodesQueried, sizeof(__pyx_k_AwakeNodesQueried), 0, 0, 1, 1},
  {&__pyx_n_s_Basic, __pyx_k_Basic, sizeof(__pyx_k_Basic), 0, 0, 1, 1},
  {&__pyx_kp_s_Basic_node_information_has_been, __pyx_k_Basic_node_information_has_been, sizeof(__pyx_k_Basic_node_information_has_been), 0, 0, 1, 0},
  {&__pyx_kp_s_Basic_values_an_ordinary_user_wo, __pyx_k_Basic_values_an_ordinary_user_wo, sizeof(__pyx_k_Basic_values_an_ordinary_user_wo), 0, 0, 1, 0},
  {&__pyx_n_s_Bool, __pyx_k_Bool, sizeof(__pyx_k_Bool), 0, 0, 1, 1},
  {&__pyx_kp_s_Boolean_true_or_false, __pyx_k_Boolean_true_or_false, sizeof(__pyx_k_Boolean_true_or_false), 0, 0, 1, 0},
  {&__pyx_n_s_Busy, __pyx_k_Busy, sizeof(__pyx_k_Busy), 0, 0, 1, 1},
  {&__pyx_n_s_Button, __pyx_k_Button, sizeof(__pyx_k_Button), 0, 0, 1, 1},
  {&__pyx_n_s_ButtonNotFound, __pyx_k_ButtonNotFound, sizeof(__pyx_k_ButtonNotFound), 0, 0, 1, 1},
  {&__pyx_n_s_ButtonOff, __pyx_k_ButtonOff, sizeof(__pyx_k_ButtonOff), 0, 0, 1, 1},
  {&__pyx_n_s_ButtonOn, __pyx_k_ButtonOn, sizeof(__pyx_k_ButtonOn), 0, 0, 1, 1},
  {&__pyx_kp_s_Button_2, __pyx_k_Button_2, sizeof(__pyx_k_Button_2), 0, 0, 1, 0},
  {&__pyx_n_s_Byte, __pyx_k_Byte, sizeof(__pyx_k_Byte), 0, 0, 1, 1},
  {&__pyx_n_s_CALLBACK_DESC, __pyx_k_CALLBACK_DESC, sizeof(__pyx_k_CALLBACK_DESC), 0, 0, 1, 1},
  {&__pyx_n_s_CANCnt, __pyx_k_CANCnt, sizeof(__pyx_k_CANCnt), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ACTUATOR_MULTILEVE, __pyx_k_COMMAND_CLASS_ACTUATOR_MULTILEVE, sizeof(__pyx_k_COMMAND_CLASS_ACTUATOR_MULTILEVE), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ALARM, __pyx_k_COMMAND_CLASS_ALARM, sizeof(__pyx_k_COMMAND_CLASS_ALARM), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_APPLICATION_STATUS, __pyx_k_COMMAND_CLASS_APPLICATION_STATUS, sizeof(__pyx_k_COMMAND_CLASS_APPLICATION_STATUS), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ASSOCIATION, __pyx_k_COMMAND_CLASS_ASSOCIATION, sizeof(__pyx_k_COMMAND_CLASS_ASSOCIATION), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ASSOCIATION_COMMAN, __pyx_k_COMMAND_CLASS_ASSOCIATION_COMMAN, sizeof(__pyx_k_COMMAND_CLASS_ASSOCIATION_COMMAN), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_AV_CONTENT_DIRECTO, __pyx_k_COMMAND_CLASS_AV_CONTENT_DIRECTO, sizeof(__pyx_k_COMMAND_CLASS_AV_CONTENT_DIRECTO), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_AV_CONTENT_SEARCH, __pyx_k_COMMAND_CLASS_AV_CONTENT_SEARCH, sizeof(__pyx_k_COMMAND_CLASS_AV_CONTENT_SEARCH), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_AV_RENDERER_STATUS, __pyx_k_COMMAND_CLASS_AV_RENDERER_STATUS, sizeof(__pyx_k_COMMAND_CLASS_AV_RENDERER_STATUS), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_AV_TAGGING_MD, __pyx_k_COMMAND_CLASS_AV_TAGGING_MD, sizeof(__pyx_k_COMMAND_CLASS_AV_TAGGING_MD), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_BASIC, __pyx_k_COMMAND_CLASS_BASIC, sizeof(__pyx_k_COMMAND_CLASS_BASIC), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_BASIC_WINDOW_COVER, __pyx_k_COMMAND_CLASS_BASIC_WINDOW_COVER, sizeof(__pyx_k_COMMAND_CLASS_BASIC_WINDOW_COVER), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_BATTERY, __pyx_k_COMMAND_CLASS_BATTERY, sizeof(__pyx_k_COMMAND_CLASS_BATTERY), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_CHIMNEY_FAN, __pyx_k_COMMAND_CLASS_CHIMNEY_FAN, sizeof(__pyx_k_COMMAND_CLASS_CHIMNEY_FAN), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_CLIMATE_CONTROL_SC, __pyx_k_COMMAND_CLASS_CLIMATE_CONTROL_SC, sizeof(__pyx_k_COMMAND_CLASS_CLIMATE_CONTROL_SC), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_CLOCK, __pyx_k_COMMAND_CLASS_CLOCK, sizeof(__pyx_k_COMMAND_CLASS_CLOCK), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_COMPOSITE, __pyx_k_COMMAND_CLASS_COMPOSITE, sizeof(__pyx_k_COMMAND_CLASS_COMPOSITE), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_CONFIGURATION, __pyx_k_COMMAND_CLASS_CONFIGURATION, sizeof(__pyx_k_COMMAND_CLASS_CONFIGURATION), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_CONTROLLER_REPLICA, __pyx_k_COMMAND_CLASS_CONTROLLER_REPLICA, sizeof(__pyx_k_COMMAND_CLASS_CONTROLLER_REPLICA), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_DESC, __pyx_k_COMMAND_CLASS_DESC, sizeof(__pyx_k_COMMAND_CLASS_DESC), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_DISPLAY, __pyx_k_COMMAND_CLASS_DISPLAY, sizeof(__pyx_k_COMMAND_CLASS_DISPLAY), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_DOOR_LOCK, __pyx_k_COMMAND_CLASS_DOOR_LOCK, sizeof(__pyx_k_COMMAND_CLASS_DOOR_LOCK), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_DOOR_LOCK_LOGGING, __pyx_k_COMMAND_CLASS_DOOR_LOCK_LOGGING, sizeof(__pyx_k_COMMAND_CLASS_DOOR_LOCK_LOGGING), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ENERGY_PRODUCTION, __pyx_k_COMMAND_CLASS_ENERGY_PRODUCTION, sizeof(__pyx_k_COMMAND_CLASS_ENERGY_PRODUCTION), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_FIRMWARE_UPDATE_MD, __pyx_k_COMMAND_CLASS_FIRMWARE_UPDATE_MD, sizeof(__pyx_k_COMMAND_CLASS_FIRMWARE_UPDATE_MD), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_GARAGE_DOOR, __pyx_k_COMMAND_CLASS_GARAGE_DOOR, sizeof(__pyx_k_COMMAND_CLASS_GARAGE_DOOR), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_GEOGRAPHIC_LOCATIO, __pyx_k_COMMAND_CLASS_GEOGRAPHIC_LOCATIO, sizeof(__pyx_k_COMMAND_CLASS_GEOGRAPHIC_LOCATIO), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_GROUPING_NAME, __pyx_k_COMMAND_CLASS_GROUPING_NAME, sizeof(__pyx_k_COMMAND_CLASS_GROUPING_NAME), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_HAIL, __pyx_k_COMMAND_CLASS_HAIL, sizeof(__pyx_k_COMMAND_CLASS_HAIL), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_INDICATOR, __pyx_k_COMMAND_CLASS_INDICATOR, sizeof(__pyx_k_COMMAND_CLASS_INDICATOR), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_IP_CONFIGURATION, __pyx_k_COMMAND_CLASS_IP_CONFIGURATION, sizeof(__pyx_k_COMMAND_CLASS_IP_CONFIGURATION), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_KICK, __pyx_k_COMMAND_CLASS_KICK, sizeof(__pyx_k_COMMAND_CLASS_KICK), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_LANGUAGE, __pyx_k_COMMAND_CLASS_LANGUAGE, sizeof(__pyx_k_COMMAND_CLASS_LANGUAGE), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_LOCK, __pyx_k_COMMAND_CLASS_LOCK, sizeof(__pyx_k_COMMAND_CLASS_LOCK), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_MANUFACTURER_PROPR, __pyx_k_COMMAND_CLASS_MANUFACTURER_PROPR, sizeof(__pyx_k_COMMAND_CLASS_MANUFACTURER_PROPR), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_MANUFACTURER_SPECI, __pyx_k_COMMAND_CLASS_MANUFACTURER_SPECI, sizeof(__pyx_k_COMMAND_CLASS_MANUFACTURER_SPECI), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_MARK, __pyx_k_COMMAND_CLASS_MARK, sizeof(__pyx_k_COMMAND_CLASS_MARK), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_METER, __pyx_k_COMMAND_CLASS_METER, sizeof(__pyx_k_COMMAND_CLASS_METER), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_METER_PULSE, __pyx_k_COMMAND_CLASS_METER_PULSE, sizeof(__pyx_k_COMMAND_CLASS_METER_PULSE), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_METER_TBL_CONFIG, __pyx_k_COMMAND_CLASS_METER_TBL_CONFIG, sizeof(__pyx_k_COMMAND_CLASS_METER_TBL_CONFIG), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_METER_TBL_MONITOR, __pyx_k_COMMAND_CLASS_METER_TBL_MONITOR, sizeof(__pyx_k_COMMAND_CLASS_METER_TBL_MONITOR), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_METER_TBL_PUSH, __pyx_k_COMMAND_CLASS_METER_TBL_PUSH, sizeof(__pyx_k_COMMAND_CLASS_METER_TBL_PUSH), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_MTP_WINDOW_COVERIN, __pyx_k_COMMAND_CLASS_MTP_WINDOW_COVERIN, sizeof(__pyx_k_COMMAND_CLASS_MTP_WINDOW_COVERIN), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_MULTI_CHANNEL_V2, __pyx_k_COMMAND_CLASS_MULTI_CHANNEL_V2, sizeof(__pyx_k_COMMAND_CLASS_MULTI_CHANNEL_V2), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_MULTI_CMD, __pyx_k_COMMAND_CLASS_MULTI_CMD, sizeof(__pyx_k_COMMAND_CLASS_MULTI_CMD), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_MULTI_INSTANCE_ASS, __pyx_k_COMMAND_CLASS_MULTI_INSTANCE_ASS, sizeof(__pyx_k_COMMAND_CLASS_MULTI_INSTANCE_ASS), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_NETWORK_STAT, __pyx_k_COMMAND_CLASS_NETWORK_STAT, sizeof(__pyx_k_COMMAND_CLASS_NETWORK_STAT), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_NODE_NAMING, __pyx_k_COMMAND_CLASS_NODE_NAMING, sizeof(__pyx_k_COMMAND_CLASS_NODE_NAMING), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_NON_INTEROPERABLE, __pyx_k_COMMAND_CLASS_NON_INTEROPERABLE, sizeof(__pyx_k_COMMAND_CLASS_NON_INTEROPERABLE), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_NO_OPERATION, __pyx_k_COMMAND_CLASS_NO_OPERATION, sizeof(__pyx_k_COMMAND_CLASS_NO_OPERATION), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_POWERLEVEL, __pyx_k_COMMAND_CLASS_POWERLEVEL, sizeof(__pyx_k_COMMAND_CLASS_POWERLEVEL), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_PROPRIETARY, __pyx_k_COMMAND_CLASS_PROPRIETARY, sizeof(__pyx_k_COMMAND_CLASS_PROPRIETARY), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_PROTECTION, __pyx_k_COMMAND_CLASS_PROTECTION, sizeof(__pyx_k_COMMAND_CLASS_PROTECTION), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_REMOTE_ASSOCIATION, __pyx_k_COMMAND_CLASS_REMOTE_ASSOCIATION, sizeof(__pyx_k_COMMAND_CLASS_REMOTE_ASSOCIATION), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_REMOTE_ASSOCIATION_2, __pyx_k_COMMAND_CLASS_REMOTE_ASSOCIATION_2, sizeof(__pyx_k_COMMAND_CLASS_REMOTE_ASSOCIATION_2), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SCENE_ACTIVATION, __pyx_k_COMMAND_CLASS_SCENE_ACTIVATION, sizeof(__pyx_k_COMMAND_CLASS_SCENE_ACTIVATION), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SCENE_ACTUATOR_CON, __pyx_k_COMMAND_CLASS_SCENE_ACTUATOR_CON, sizeof(__pyx_k_COMMAND_CLASS_SCENE_ACTUATOR_CON), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SCENE_CONTROLLER_C, __pyx_k_COMMAND_CLASS_SCENE_CONTROLLER_C, sizeof(__pyx_k_COMMAND_CLASS_SCENE_CONTROLLER_C), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SCHEDULE_ENTRY_LOC, __pyx_k_COMMAND_CLASS_SCHEDULE_ENTRY_LOC, sizeof(__pyx_k_COMMAND_CLASS_SCHEDULE_ENTRY_LOC), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SCREEN_ATTRIBUTES, __pyx_k_COMMAND_CLASS_SCREEN_ATTRIBUTES, sizeof(__pyx_k_COMMAND_CLASS_SCREEN_ATTRIBUTES), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SCREEN_MD, __pyx_k_COMMAND_CLASS_SCREEN_MD, sizeof(__pyx_k_COMMAND_CLASS_SCREEN_MD), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SECURITY, __pyx_k_COMMAND_CLASS_SECURITY, sizeof(__pyx_k_COMMAND_CLASS_SECURITY), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SENSOR_ALARM, __pyx_k_COMMAND_CLASS_SENSOR_ALARM, sizeof(__pyx_k_COMMAND_CLASS_SENSOR_ALARM), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SENSOR_BINARY, __pyx_k_COMMAND_CLASS_SENSOR_BINARY, sizeof(__pyx_k_COMMAND_CLASS_SENSOR_BINARY), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SENSOR_CONFIGURATI, __pyx_k_COMMAND_CLASS_SENSOR_CONFIGURATI, sizeof(__pyx_k_COMMAND_CLASS_SENSOR_CONFIGURATI), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SENSOR_MULTILEVEL, __pyx_k_COMMAND_CLASS_SENSOR_MULTILEVEL, sizeof(__pyx_k_COMMAND_CLASS_SENSOR_MULTILEVEL), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SILENCE_ALARM, __pyx_k_COMMAND_CLASS_SILENCE_ALARM, sizeof(__pyx_k_COMMAND_CLASS_SILENCE_ALARM), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SIMPLE_AV_CONTROL, __pyx_k_COMMAND_CLASS_SIMPLE_AV_CONTROL, sizeof(__pyx_k_COMMAND_CLASS_SIMPLE_AV_CONTROL), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SWITCH_ALL, __pyx_k_COMMAND_CLASS_SWITCH_ALL, sizeof(__pyx_k_COMMAND_CLASS_SWITCH_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SWITCH_BINARY, __pyx_k_COMMAND_CLASS_SWITCH_BINARY, sizeof(__pyx_k_COMMAND_CLASS_SWITCH_BINARY), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SWITCH_MULTILEVEL, __pyx_k_COMMAND_CLASS_SWITCH_MULTILEVEL, sizeof(__pyx_k_COMMAND_CLASS_SWITCH_MULTILEVEL), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SWITCH_TOGGLE_BINA, __pyx_k_COMMAND_CLASS_SWITCH_TOGGLE_BINA, sizeof(__pyx_k_COMMAND_CLASS_SWITCH_TOGGLE_BINA), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_SWITCH_TOGGLE_MULT, __pyx_k_COMMAND_CLASS_SWITCH_TOGGLE_MULT, sizeof(__pyx_k_COMMAND_CLASS_SWITCH_TOGGLE_MULT), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_THERMOSTAT_FAN_MOD, __pyx_k_COMMAND_CLASS_THERMOSTAT_FAN_MOD, sizeof(__pyx_k_COMMAND_CLASS_THERMOSTAT_FAN_MOD), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_THERMOSTAT_FAN_STA, __pyx_k_COMMAND_CLASS_THERMOSTAT_FAN_STA, sizeof(__pyx_k_COMMAND_CLASS_THERMOSTAT_FAN_STA), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_THERMOSTAT_HEATING, __pyx_k_COMMAND_CLASS_THERMOSTAT_HEATING, sizeof(__pyx_k_COMMAND_CLASS_THERMOSTAT_HEATING), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_THERMOSTAT_MODE, __pyx_k_COMMAND_CLASS_THERMOSTAT_MODE, sizeof(__pyx_k_COMMAND_CLASS_THERMOSTAT_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_THERMOSTAT_OPERATI, __pyx_k_COMMAND_CLASS_THERMOSTAT_OPERATI, sizeof(__pyx_k_COMMAND_CLASS_THERMOSTAT_OPERATI), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_THERMOSTAT_SETBACK, __pyx_k_COMMAND_CLASS_THERMOSTAT_SETBACK, sizeof(__pyx_k_COMMAND_CLASS_THERMOSTAT_SETBACK), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_THERMOSTAT_SETPOIN, __pyx_k_COMMAND_CLASS_THERMOSTAT_SETPOIN, sizeof(__pyx_k_COMMAND_CLASS_THERMOSTAT_SETPOIN), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_TIME, __pyx_k_COMMAND_CLASS_TIME, sizeof(__pyx_k_COMMAND_CLASS_TIME), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_TIME_PARAMETERS, __pyx_k_COMMAND_CLASS_TIME_PARAMETERS, sizeof(__pyx_k_COMMAND_CLASS_TIME_PARAMETERS), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_USER_CODE, __pyx_k_COMMAND_CLASS_USER_CODE, sizeof(__pyx_k_COMMAND_CLASS_USER_CODE), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_VERSION, __pyx_k_COMMAND_CLASS_VERSION, sizeof(__pyx_k_COMMAND_CLASS_VERSION), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_WAKE_UP, __pyx_k_COMMAND_CLASS_WAKE_UP, sizeof(__pyx_k_COMMAND_CLASS_WAKE_UP), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ZIP_ADV_CLIENT, __pyx_k_COMMAND_CLASS_ZIP_ADV_CLIENT, sizeof(__pyx_k_COMMAND_CLASS_ZIP_ADV_CLIENT), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ZIP_ADV_SERVER, __pyx_k_COMMAND_CLASS_ZIP_ADV_SERVER, sizeof(__pyx_k_COMMAND_CLASS_ZIP_ADV_SERVER), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ZIP_ADV_SERVICES, __pyx_k_COMMAND_CLASS_ZIP_ADV_SERVICES, sizeof(__pyx_k_COMMAND_CLASS_ZIP_ADV_SERVICES), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ZIP_CLIENT, __pyx_k_COMMAND_CLASS_ZIP_CLIENT, sizeof(__pyx_k_COMMAND_CLASS_ZIP_CLIENT), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ZIP_SERVER, __pyx_k_COMMAND_CLASS_ZIP_SERVER, sizeof(__pyx_k_COMMAND_CLASS_ZIP_SERVER), 0, 0, 1, 1},
  {&__pyx_n_s_COMMAND_CLASS_ZIP_SERVICES, __pyx_k_COMMAND_CLASS_ZIP_SERVICES, sizeof(__pyx_k_COMMAND_CLASS_ZIP_SERVICES), 0, 0, 1, 1},
  {&__pyx_n_s_Cancel, __pyx_k_Cancel, sizeof(__pyx_k_Cancel), 0, 0, 1, 1},
  {&__pyx_kp_s_Check_whether_a_node_is_in_the_c, __pyx_k_Check_whether_a_node_is_in_the_c, sizeof(__pyx_k_Check_whether_a_node_is_in_the_c), 0, 0, 1, 0},
  {&__pyx_kp_s_Command_invocation_had_error_s_a, __pyx_k_Command_invocation_had_error_s_a, sizeof(__pyx_k_Command_invocation_had_error_s_a), 0, 0, 1, 0},
  {&__pyx_n_s_Complete, __pyx_k_Complete, sizeof(__pyx_k_Complete), 0, 0, 1, 1},
  {&__pyx_n_s_Completed, __pyx_k_Completed, sizeof(__pyx_k_Completed), 0, 0, 1, 1},
  {&__pyx_kp_s_Completed_messages, __pyx_k_Completed_messages, sizeof(__pyx_k_Completed_messages), 0, 0, 1, 0},
  {&__pyx_kp_s_Complex_type_used_with_the_Clima, __pyx_k_Complex_type_used_with_the_Clima, sizeof(__pyx_k_Complex_type_used_with_the_Clima), 0, 0, 1, 0},
  {&__pyx_n_s_Config, __pyx_k_Config, sizeof(__pyx_k_Config), 0, 0, 1, 1},
  {&__pyx_n_s_Configuration, __pyx_k_Configuration, sizeof(__pyx_k_Configuration), 0, 0, 1, 1},
  {&__pyx_kp_s_Controller_command_is_on_a_sleep, __pyx_k_Controller_command_is_on_a_sleep, sizeof(__pyx_k_Controller_command_is_on_a_sleep), 0, 0, 1, 0},
  {&__pyx_kp_s_Controller_interface_use_human_i, __pyx_k_Controller_interface_use_human_i, sizeof(__pyx_k_Controller_interface_use_human_i), 0, 0, 1, 0},
  {&__pyx_kp_s_Controller_interface_use_serial, __pyx_k_Controller_interface_use_serial, sizeof(__pyx_k_Controller_interface_use_serial), 0, 0, 1, 0},
  {&__pyx_kp_s_Controller_interface_use_unknown, __pyx_k_Controller_interface_use_unknown, sizeof(__pyx_k_Controller_interface_use_unknown), 0, 0, 1, 0},
  {&__pyx_kp_s_Controller_is_waiting_for_a_user, __pyx_k_Controller_is_waiting_for_a_user, sizeof(__pyx_k_Controller_is_waiting_for_a_user), 0, 0, 1, 0},
  {&__pyx_n_s_CreateButton, __pyx_k_CreateButton, sizeof(__pyx_k_CreateButton), 0, 0, 1, 1},
  {&__pyx_kp_s_CreateNewPrimary, __pyx_k_CreateNewPrimary, sizeof(__pyx_k_CreateNewPrimary), 0, 0, 1, 0},
  {&__pyx_n_s_CreateNewPrimary_2, __pyx_k_CreateNewPrimary_2, sizeof(__pyx_k_CreateNewPrimary_2), 0, 0, 1, 1},
  {&__pyx_kp_s_Create_an_id_that_tracks_handhel, __pyx_k_Create_an_id_that_tracks_handhel, sizeof(__pyx_k_Create_an_id_that_tracks_handhel), 0, 0, 1, 0},
  {&__pyx_n_s_Dead, __pyx_k_Dead, sizeof(__pyx_k_Dead), 0, 0, 1, 1},
  {&__pyx_n_s_Debug, __pyx_k_Debug, sizeof(__pyx_k_Debug), 0, 0, 1, 1},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_n_s_DeleteAllReturnRoutes, __pyx_k_DeleteAllReturnRoutes, sizeof(__pyx_k_DeleteAllReturnRoutes), 0, 0, 1, 1},
  {&__pyx_n_s_DeleteButton, __pyx_k_DeleteButton, sizeof(__pyx_k_DeleteButton), 0, 0, 1, 1},
  {&__pyx_kp_s_Delete_all_return_routes_from_a, __pyx_k_Delete_all_return_routes_from_a, sizeof(__pyx_k_Delete_all_return_routes_from_a), 0, 0, 1, 0},
  {&__pyx_kp_s_Delete_id_that_tracks_handheld_b, __pyx_k_Delete_id_that_tracks_handheld_b, sizeof(__pyx_k_Delete_id_that_tracks_handheld_b), 0, 0, 1, 0},
  {&__pyx_n_s_Detail, __pyx_k_Detail, sizeof(__pyx_k_Detail), 0, 0, 1, 1},
  {&__pyx_kp_s_Device_specific_configuration_pa, __pyx_k_Device_specific_configuration_pa, sizeof(__pyx_k_Device_specific_configuration_pa), 0, 0, 1, 0},
  {&__pyx_n_s_Disabled, __pyx_k_Disabled, sizeof(__pyx_k_Disabled), 0, 0, 1, 1},
  {&__pyx_n_s_DistributionNotFound, __pyx_k_DistributionNotFound, sizeof(__pyx_k_DistributionNotFound), 0, 0, 1, 1},
  {&__pyx_n_s_DriverFailed, __pyx_k_DriverFailed, sizeof(__pyx_k_DriverFailed), 0, 0, 1, 1},
  {&__pyx_n_s_DriverReady, __pyx_k_DriverReady, sizeof(__pyx_k_DriverReady), 0, 0, 1, 1},
  {&__pyx_n_s_DriverRemoved, __pyx_k_DriverRemoved, sizeof(__pyx_k_DriverRemoved), 0, 0, 1, 1},
  {&__pyx_n_s_DriverReset, __pyx_k_DriverReset, sizeof(__pyx_k_DriverReset), 0, 0, 1, 1},
  {&__pyx_kp_s_Driver_failed_to_load, __pyx_k_Driver_failed_to_load, sizeof(__pyx_k_Driver_failed_to_load), 0, 0, 1, 0},
  {&__pyx_n_s_Dynamic, __pyx_k_Dynamic, sizeof(__pyx_k_Dynamic), 0, 0, 1, 1},
  {&__pyx_n_s_EnumWithDoc, __pyx_k_EnumWithDoc, sizeof(__pyx_k_EnumWithDoc), 0, 0, 1, 1},
  {&__pyx_n_s_EnumWithDoc_setDoc, __pyx_k_EnumWithDoc_setDoc, sizeof(__pyx_k_EnumWithDoc_setDoc), 0, 0, 1, 1},
  {&__pyx_kp_s_Enum_helper, __pyx_k_Enum_helper, sizeof(__pyx_k_Enum_helper), 0, 0, 1, 0},
  {&__pyx_n_s_Error, __pyx_k_Error, sizeof(__pyx_k_Error), 0, 0, 1, 1},
  {&__pyx_n_s_EssentialNodeQueriesComplete, __pyx_k_EssentialNodeQueriesComplete, sizeof(__pyx_k_EssentialNodeQueriesComplete), 0, 0, 1, 1},
  {&__pyx_n_s_Failed, __pyx_k_Failed, sizeof(__pyx_k_Failed), 0, 0, 1, 1},
  {&__pyx_n_s_Fatal, __pyx_k_Fatal, sizeof(__pyx_k_Fatal), 0, 0, 1, 1},
  {&__pyx_kp_s_Get_a_node_to_rebuild_its_neighb, __pyx_k_Get_a_node_to_rebuild_its_neighb, sizeof(__pyx_k_Get_a_node_to_rebuild_its_neighb), 0, 0, 1, 0},
  {&__pyx_n_s_Group, __pyx_k_Group, sizeof(__pyx_k_Group), 0, 0, 1, 1},
  {&__pyx_kp_s_Handheld_controller_button_event, __pyx_k_Handheld_controller_button_event, sizeof(__pyx_k_Handheld_controller_button_event), 0, 0, 1, 0},
  {&__pyx_kp_s_Handheld_controller_button_event_2, __pyx_k_Handheld_controller_button_event_2, sizeof(__pyx_k_Handheld_controller_button_event_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Handheld_controller_button_off_p, __pyx_k_Handheld_controller_button_off_p, sizeof(__pyx_k_Handheld_controller_button_off_p), 0, 0, 1, 0},
  {&__pyx_kp_s_Handheld_controller_button_on_pr, __pyx_k_Handheld_controller_button_on_pr, sizeof(__pyx_k_Handheld_controller_button_on_pr), 0, 0, 1, 0},
  {&__pyx_n_s_Handler, __pyx_k_Handler, sizeof(__pyx_k_Handler), 0, 0, 1, 1},
  {&__pyx_n_s_HasNodeFailed, __pyx_k_HasNodeFailed, sizeof(__pyx_k_HasNodeFailed), 0, 0, 1, 1},
  {&__pyx_n_s_Hid, __pyx_k_Hid, sizeof(__pyx_k_Hid), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_InProgress, __pyx_k_InProgress, sizeof(__pyx_k_InProgress), 0, 0, 1, 1},
  {&__pyx_n_s_Info, __pyx_k_Info, sizeof(__pyx_k_Info), 0, 0, 1, 1},
  {&__pyx_n_s_Instances, __pyx_k_Instances, sizeof(__pyx_k_Instances), 0, 0, 1, 1},
  {&__pyx_n_s_Int, __pyx_k_Int, sizeof(__pyx_k_Int), 0, 0, 1, 1},
  {&__pyx_n_s_Internal, __pyx_k_Internal, sizeof(__pyx_k_Internal), 0, 0, 1, 1},
  {&__pyx_n_s_IsPrimary, __pyx_k_IsPrimary, sizeof(__pyx_k_IsPrimary), 0, 0, 1, 1},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_kp_s_List_from_which_one_item_can_be, __pyx_k_List_from_which_one_item_can_be, sizeof(__pyx_k_List_from_which_one_item_can_be), 0, 0, 1, 0},
  {&__pyx_kp_s_Make_a_different_controller_the, __pyx_k_Make_a_different_controller_the, sizeof(__pyx_k_Make_a_different_controller_the), 0, 0, 1, 0},
  {&__pyx_n_s_ManufacturerSpecific1, __pyx_k_ManufacturerSpecific1, sizeof(__pyx_k_ManufacturerSpecific1), 0, 0, 1, 1},
  {&__pyx_n_s_ManufacturerSpecific2, __pyx_k_ManufacturerSpecific2, sizeof(__pyx_k_ManufacturerSpecific2), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_Messages_that_timeout_will_send, __pyx_k_Messages_that_timeout_will_send, sizeof(__pyx_k_Messages_that_timeout_will_send), 0, 0, 1, 0},
  {&__pyx_kp_s_Move_a_node_to_the_controller_s, __pyx_k_Move_a_node_to_the_controller_s, sizeof(__pyx_k_Move_a_node_to_the_controller_s), 0, 0, 1, 0},
  {&__pyx_n_s_MsgComplete, __pyx_k_MsgComplete, sizeof(__pyx_k_MsgComplete), 0, 0, 1, 1},
  {&__pyx_n_s_NAKCnt, __pyx_k_NAKCnt, sizeof(__pyx_k_NAKCnt), 0, 0, 1, 1},
  {&__pyx_n_s_Neighbors, __pyx_k_Neighbors, sizeof(__pyx_k_Neighbors), 0, 0, 1, 1},
  {&__pyx_n_s_NoOperation, __pyx_k_NoOperation, sizeof(__pyx_k_NoOperation), 0, 0, 1, 1},
  {&__pyx_kp_s_No_command, __pyx_k_No_command, sizeof(__pyx_k_No_command), 0, 0, 1, 0},
  {&__pyx_kp_s_No_command_in_progress, __pyx_k_No_command_in_progress, sizeof(__pyx_k_No_command_in_progress), 0, 0, 1, 0},
  {&__pyx_n_s_NodeAdded, __pyx_k_NodeAdded, sizeof(__pyx_k_NodeAdded), 0, 0, 1, 1},
  {&__pyx_n_s_NodeEvent, __pyx_k_NodeEvent, sizeof(__pyx_k_NodeEvent), 0, 0, 1, 1},
  {&__pyx_n_s_NodeFailed, __pyx_k_NodeFailed, sizeof(__pyx_k_NodeFailed), 0, 0, 1, 1},
  {&__pyx_n_s_NodeInfo, __pyx_k_NodeInfo, sizeof(__pyx_k_NodeInfo), 0, 0, 1, 1},
  {&__pyx_n_s_NodeNaming, __pyx_k_NodeNaming, sizeof(__pyx_k_NodeNaming), 0, 0, 1, 1},
  {&__pyx_n_s_NodeNew, __pyx_k_NodeNew, sizeof(__pyx_k_NodeNew), 0, 0, 1, 1},
  {&__pyx_n_s_NodeNotFound, __pyx_k_NodeNotFound, sizeof(__pyx_k_NodeNotFound), 0, 0, 1, 1},
  {&__pyx_n_s_NodeOK, __pyx_k_NodeOK, sizeof(__pyx_k_NodeOK), 0, 0, 1, 1},
  {&__pyx_n_s_NodeProtocolInfo, __pyx_k_NodeProtocolInfo, sizeof(__pyx_k_NodeProtocolInfo), 0, 0, 1, 1},
  {&__pyx_n_s_NodeQueriesComplete, __pyx_k_NodeQueriesComplete, sizeof(__pyx_k_NodeQueriesComplete), 0, 0, 1, 1},
  {&__pyx_n_s_NodeRemoved, __pyx_k_NodeRemoved, sizeof(__pyx_k_NodeRemoved), 0, 0, 1, 1},
  {&__pyx_n_s_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 0, 1, 1},
  {&__pyx_kp_s_None_2, __pyx_k_None_2, sizeof(__pyx_k_None_2), 0, 0, 1, 0},
  {&__pyx_n_s_Normal, __pyx_k_Normal, sizeof(__pyx_k_Normal), 0, 0, 1, 1},
  {&__pyx_n_s_NotBridge, __pyx_k_NotBridge, sizeof(__pyx_k_NotBridge), 0, 0, 1, 1},
  {&__pyx_n_s_NotFound, __pyx_k_NotFound, sizeof(__pyx_k_NotFound), 0, 0, 1, 1},
  {&__pyx_n_s_NotPrimary, __pyx_k_NotPrimary, sizeof(__pyx_k_NotPrimary), 0, 0, 1, 1},
  {&__pyx_n_s_NotSUC, __pyx_k_NotSUC, sizeof(__pyx_k_NotSUC), 0, 0, 1, 1},
  {&__pyx_n_s_NotSecondary, __pyx_k_NotSecondary, sizeof(__pyx_k_NotSecondary), 0, 0, 1, 1},
  {&__pyx_kp_s_Not_installed, __pyx_k_Not_installed, sizeof(__pyx_k_Not_installed), 0, 0, 1, 0},
  {&__pyx_n_s_Notification, __pyx_k_Notification, sizeof(__pyx_k_Notification), 0, 0, 1, 1},
  {&__pyx_n_s_NullHandler, __pyx_k_NullHandler, sizeof(__pyx_k_NullHandler), 0, 0, 1, 1},
  {&__pyx_n_s_NullHandler_emit, __pyx_k_NullHandler_emit, sizeof(__pyx_k_NullHandler_emit), 0, 0, 1, 1},
  {&__pyx_kp_s_Number_of_ACK_bytes_received, __pyx_k_Number_of_ACK_bytes_received, sizeof(__pyx_k_Number_of_ACK_bytes_received), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_CAN_bytes_received, __pyx_k_Number_of_CAN_bytes_received, sizeof(__pyx_k_Number_of_CAN_bytes_received), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_NAK_bytes_received, __pyx_k_Number_of_NAK_bytes_received, sizeof(__pyx_k_Number_of_NAK_bytes_received), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_SOF_bytes_received, __pyx_k_Number_of_SOF_bytes_received, sizeof(__pyx_k_Number_of_SOF_bytes_received), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_bad_checksums, __pyx_k_Number_of_bad_checksums, sizeof(__pyx_k_Number_of_bad_checksums), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_broadcasts_read, __pyx_k_Number_of_broadcasts_read, sizeof(__pyx_k_Number_of_broadcasts_read), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_broadcasts_sent, __pyx_k_Number_of_broadcasts_sent, sizeof(__pyx_k_Number_of_broadcasts_sent), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_bytes_out_of_framing, __pyx_k_Number_of_bytes_out_of_framing, sizeof(__pyx_k_Number_of_bytes_out_of_framing), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_failed_messages_due_to, __pyx_k_Number_of_failed_messages_due_to, sizeof(__pyx_k_Number_of_failed_messages_due_to), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_messages_dropped_not_d, __pyx_k_Number_of_messages_dropped_not_d, sizeof(__pyx_k_Number_of_messages_dropped_not_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_messages_not_delivered, __pyx_k_Number_of_messages_not_delivered, sizeof(__pyx_k_Number_of_messages_not_delivered), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_messages_received_with, __pyx_k_Number_of_messages_received_with, sizeof(__pyx_k_Number_of_messages_received_with), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_messages_retransmitted, __pyx_k_Number_of_messages_retransmitted, sizeof(__pyx_k_Number_of_messages_retransmitted), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_messages_successfully, __pyx_k_Number_of_messages_successfully, sizeof(__pyx_k_Number_of_messages_successfully), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_messages_successfully_2, __pyx_k_Number_of_messages_successfully_2, sizeof(__pyx_k_Number_of_messages_successfully_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_network_busy_failure_m, __pyx_k_Number_of_network_busy_failure_m, sizeof(__pyx_k_Number_of_network_busy_failure_m), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_no_ACK_returned_errors, __pyx_k_Number_of_no_ACK_returned_errors, sizeof(__pyx_k_Number_of_no_ACK_returned_errors), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_times_read_were_aborte, __pyx_k_Number_of_times_read_were_aborte, sizeof(__pyx_k_Number_of_times_read_were_aborte), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_unexpected_callbacks, __pyx_k_Number_of_unexpected_callbacks, sizeof(__pyx_k_Number_of_unexpected_callbacks), 0, 0, 1, 0},
  {&__pyx_kp_s_Number_of_unsolicited_messages_w, __pyx_k_Number_of_unsolicited_messages_w, sizeof(__pyx_k_Number_of_unsolicited_messages_w), 0, 0, 1, 0},
  {&__pyx_n_s_OOFCnt, __pyx_k_OOFCnt, sizeof(__pyx_k_OOFCnt), 0, 0, 1, 1},
  {&__pyx_n_s_OZWAVE_CONFIG_DIRECTORY, __pyx_k_OZWAVE_CONFIG_DIRECTORY, sizeof(__pyx_k_OZWAVE_CONFIG_DIRECTORY), 0, 0, 1, 1},
  {&__pyx_kp_s_One_of_the_node_names_has_change, __pyx_k_One_of_the_node_names_has_change, sizeof(__pyx_k_One_of_the_node_names_has_change), 0, 0, 1, 0},
  {&__pyx_kp_s_OpenZWave_version_s, __pyx_k_OpenZWave_version_s, sizeof(__pyx_k_OpenZWave_version_s), 0, 0, 1, 0},
  {&__pyx_n_s_Overflow, __pyx_k_Overflow, sizeof(__pyx_k_Overflow), 0, 0, 1, 1},
  {&__pyx_n_s_PYLIBRARY, __pyx_k_PYLIBRARY, sizeof(__pyx_k_PYLIBRARY), 0, 0, 1, 1},
  {&__pyx_n_s_PY_OZWAVE_CONFIG_DIRECTORY, __pyx_k_PY_OZWAVE_CONFIG_DIRECTORY, sizeof(__pyx_k_PY_OZWAVE_CONFIG_DIRECTORY), 0, 0, 1, 1},
  {&__pyx_n_s_PollingDisabled, __pyx_k_PollingDisabled, sizeof(__pyx_k_PollingDisabled), 0, 0, 1, 1},
  {&__pyx_n_s_PollingEnabled, __pyx_k_PollingEnabled, sizeof(__pyx_k_PollingEnabled), 0, 0, 1, 1},
  {&__pyx_kp_s_Polling_of_a_node_has_been_succe, __pyx_k_Polling_of_a_node_has_been_succe, sizeof(__pyx_k_Polling_of_a_node_has_been_succe), 0, 0, 1, 0},
  {&__pyx_kp_s_Polling_of_a_node_has_been_succe_2, __pyx_k_Polling_of_a_node_has_been_succe_2, sizeof(__pyx_k_Polling_of_a_node_has_been_succe_2), 0, 0, 1, 0},
  {&__pyx_n_s_Probe, __pyx_k_Probe, sizeof(__pyx_k_Probe), 0, 0, 1, 1},
  {&__pyx_n_s_Probe1, __pyx_k_Probe1, sizeof(__pyx_k_Probe1), 0, 0, 1, 1},
  {&__pyx_n_s_ProtocolInfo, __pyx_k_ProtocolInfo, sizeof(__pyx_k_ProtocolInfo), 0, 0, 1, 1},
  {&__pyx_n_s_PyControllerCommand, __pyx_k_PyControllerCommand, sizeof(__pyx_k_PyControllerCommand), 0, 0, 1, 1},
  {&__pyx_n_s_PyControllerError, __pyx_k_PyControllerError, sizeof(__pyx_k_PyControllerError), 0, 0, 1, 1},
  {&__pyx_n_s_PyControllerInterface, __pyx_k_PyControllerInterface, sizeof(__pyx_k_PyControllerInterface), 0, 0, 1, 1},
  {&__pyx_n_s_PyControllerState, __pyx_k_PyControllerState, sizeof(__pyx_k_PyControllerState), 0, 0, 1, 1},
  {&__pyx_n_s_PyGenres, __pyx_k_PyGenres, sizeof(__pyx_k_PyGenres), 0, 0, 1, 1},
  {&__pyx_n_s_PyLogLevels, __pyx_k_PyLogLevels, sizeof(__pyx_k_PyLogLevels), 0, 0, 1, 1},
  {&__pyx_n_s_PyNotificationCodes, __pyx_k_PyNotificationCodes, sizeof(__pyx_k_PyNotificationCodes), 0, 0, 1, 1},
  {&__pyx_n_s_PyNotifications, __pyx_k_PyNotifications, sizeof(__pyx_k_PyNotifications), 0, 0, 1, 1},
  {&__pyx_n_s_PyStatDriver, __pyx_k_PyStatDriver, sizeof(__pyx_k_PyStatDriver), 0, 0, 1, 1},
  {&__pyx_n_s_PyValueTypes, __pyx_k_PyValueTypes, sizeof(__pyx_k_PyValueTypes), 0, 0, 1, 1},
  {&__pyx_n_s_Raw, __pyx_k_Raw, sizeof(__pyx_k_Raw), 0, 0, 1, 1},
  {&__pyx_kp_s_Raw_byte_values, __pyx_k_Raw_byte_values, sizeof(__pyx_k_Raw_byte_values), 0, 0, 1, 0},
  {&__pyx_kp_s_ReceiveConfiguration, __pyx_k_ReceiveConfiguration, sizeof(__pyx_k_ReceiveConfiguration), 0, 0, 1, 0},
  {&__pyx_n_s_ReceiveConfiguration_2, __pyx_k_ReceiveConfiguration_2, sizeof(__pyx_k_ReceiveConfiguration_2), 0, 0, 1, 1},
  {&__pyx_kp_s_Receive_Z_Wave_network_configura, __pyx_k_Receive_Z_Wave_network_configura, sizeof(__pyx_k_Receive_Z_Wave_network_configura), 0, 0, 1, 0},
  {&__pyx_n_s_RemoveDevice, __pyx_k_RemoveDevice, sizeof(__pyx_k_RemoveDevice), 0, 0, 1, 1},
  {&__pyx_kp_s_RemoveFailedNode, __pyx_k_RemoveFailedNode, sizeof(__pyx_k_RemoveFailedNode), 0, 0, 1, 0},
  {&__pyx_n_s_RemoveFailedNode_2, __pyx_k_RemoveFailedNode_2, sizeof(__pyx_k_RemoveFailedNode_2), 0, 0, 1, 1},
  {&__pyx_kp_s_RemoveFailedNode_AddNodeToNetwor, __pyx_k_RemoveFailedNode_AddNodeToNetwor, sizeof(__pyx_k_RemoveFailedNode_AddNodeToNetwor), 0, 0, 1, 0},
  {&__pyx_kp_s_RemoveFailedNode_RequestNetworkU, __pyx_k_RemoveFailedNode_RequestNetworkU, sizeof(__pyx_k_RemoveFailedNode_RequestNetworkU), 0, 0, 1, 0},
  {&__pyx_kp_s_Remove_a_new_device_but_not_a_co, __pyx_k_Remove_a_new_device_but_not_a_co, sizeof(__pyx_k_Remove_a_new_device_but_not_a_co), 0, 0, 1, 0},
  {&__pyx_n_s_ReplaceFailedNode, __pyx_k_ReplaceFailedNode, sizeof(__pyx_k_ReplaceFailedNode), 0, 0, 1, 1},
  {&__pyx_kp_s_Replace_a_non_responding_node_wi, __pyx_k_Replace_a_non_responding_node_wi, sizeof(__pyx_k_Replace_a_non_responding_node_wi), 0, 0, 1, 0},
  {&__pyx_n_s_ReplicationSend, __pyx_k_ReplicationSend, sizeof(__pyx_k_ReplicationSend), 0, 0, 1, 1},
  {&__pyx_kp_s_Report_on_NoOperation_message_se, __pyx_k_Report_on_NoOperation_message_se, sizeof(__pyx_k_Report_on_NoOperation_message_se), 0, 0, 1, 0},
  {&__pyx_kp_s_Report_when_a_node_goes_to_sleep, __pyx_k_Report_when_a_node_goes_to_sleep, sizeof(__pyx_k_Report_when_a_node_goes_to_sleep), 0, 0, 1, 0},
  {&__pyx_kp_s_Report_when_a_node_is_presumed_d, __pyx_k_Report_when_a_node_is_presumed_d, sizeof(__pyx_k_Report_when_a_node_is_presumed_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Report_when_a_node_is_revived, __pyx_k_Report_when_a_node_is_revived, sizeof(__pyx_k_Report_when_a_node_is_revived), 0, 0, 1, 0},
  {&__pyx_kp_s_Report_when_a_sleeping_node_wake, __pyx_k_Report_when_a_sleeping_node_wake, sizeof(__pyx_k_Report_when_a_sleeping_node_wake), 0, 0, 1, 0},
  {&__pyx_kp_s_Represents_a_non_integer_value_a, __pyx_k_Represents_a_non_integer_value_a, sizeof(__pyx_k_Represents_a_non_integer_value_a), 0, 0, 1, 0},
  {&__pyx_n_s_RequestNetworkUpdate, __pyx_k_RequestNetworkUpdate, sizeof(__pyx_k_RequestNetworkUpdate), 0, 0, 1, 1},
  {&__pyx_kp_s_RequestNetworkUpdate_error, __pyx_k_RequestNetworkUpdate_error, sizeof(__pyx_k_RequestNetworkUpdate_error), 0, 0, 1, 0},
  {&__pyx_n_s_RequestNodeNeighborUpdate, __pyx_k_RequestNodeNeighborUpdate, sizeof(__pyx_k_RequestNodeNeighborUpdate), 0, 0, 1, 1},
  {&__pyx_kp_s_Request_network_information_from, __pyx_k_Request_network_information_from, sizeof(__pyx_k_Request_network_information_from), 0, 0, 1, 0},
  {&__pyx_n_s_SOFCnt, __pyx_k_SOFCnt, sizeof(__pyx_k_SOFCnt), 0, 0, 1, 1},
  {&__pyx_n_s_SceneEvent, __pyx_k_SceneEvent, sizeof(__pyx_k_SceneEvent), 0, 0, 1, 1},
  {&__pyx_kp_s_Scene_Activation_Set_received, __pyx_k_Scene_Activation_Set_received, sizeof(__pyx_k_Scene_Activation_Set_received), 0, 0, 1, 0},
  {&__pyx_n_s_Schedule, __pyx_k_Schedule, sizeof(__pyx_k_Schedule), 0, 0, 1, 1},
  {&__pyx_n_s_SendNodeInformation, __pyx_k_SendNodeInformation, sizeof(__pyx_k_SendNodeInformation), 0, 0, 1, 1},
  {&__pyx_kp_s_Send_a_node_information_frame, __pyx_k_Send_a_node_information_frame, sizeof(__pyx_k_Send_a_node_information_frame), 0, 0, 1, 0},
  {&__pyx_kp_s_Send_information_from_primary_to, __pyx_k_Send_information_from_primary_to, sizeof(__pyx_k_Send_information_from_primary_to), 0, 0, 1, 0},
  {&__pyx_n_s_Serial, __pyx_k_Serial, sizeof(__pyx_k_Serial), 0, 0, 1, 1},
  {&__pyx_n_s_Session, __pyx_k_Session, sizeof(__pyx_k_Session), 0, 0, 1, 1},
  {&__pyx_n_s_Short, __pyx_k_Short, sizeof(__pyx_k_Short), 0, 0, 1, 1},
  {&__pyx_n_s_Sleep, __pyx_k_Sleep, sizeof(__pyx_k_Sleep), 0, 0, 1, 1},
  {&__pyx_n_s_Sleeping, __pyx_k_Sleeping, sizeof(__pyx_k_Sleeping), 0, 0, 1, 1},
  {&__pyx_n_s_Starting, __pyx_k_Starting, sizeof(__pyx_k_Starting), 0, 0, 1, 1},
  {&__pyx_n_s_Static, __pyx_k_Static, sizeof(__pyx_k_Static), 0, 0, 1, 1},
  {&__pyx_n_s_StreamDetail, __pyx_k_StreamDetail, sizeof(__pyx_k_StreamDetail), 0, 0, 1, 1},
  {&__pyx_n_s_String, __pyx_k_String, sizeof(__pyx_k_String), 0, 0, 1, 1},
  {&__pyx_n_s_System, __pyx_k_System, sizeof(__pyx_k_System), 0, 0, 1, 1},
  {&__pyx_kp_s_Text_string, __pyx_k_Text_string, sizeof(__pyx_k_Text_string), 0, 0, 1, 0},
  {&__pyx_kp_s_The_Driver_is_being_removed, __pyx_k_The_Driver_is_being_removed, sizeof(__pyx_k_The_Driver_is_being_removed), 0, 0, 1, 0},
  {&__pyx_kp_s_The_associations_for_the_node_ha, __pyx_k_The_associations_for_the_node_ha, sizeof(__pyx_k_The_associations_for_the_node_ha), 0, 0, 1, 0},
  {&__pyx_kp_s_The_command_has_completed_succes, __pyx_k_The_command_has_completed_succes, sizeof(__pyx_k_The_command_has_completed_succes), 0, 0, 1, 0},
  {&__pyx_kp_s_The_command_has_failed, __pyx_k_The_command_has_failed, sizeof(__pyx_k_The_command_has_failed), 0, 0, 1, 0},
  {&__pyx_kp_s_The_command_is_starting, __pyx_k_The_command_is_starting, sizeof(__pyx_k_The_command_is_starting), 0, 0, 1, 0},
  {&__pyx_kp_s_The_command_was_cancelled, __pyx_k_The_command_was_cancelled, sizeof(__pyx_k_The_command_was_cancelled), 0, 0, 1, 0},
  {&__pyx_kp_s_The_controller_is_communicating, __pyx_k_The_controller_is_communicating, sizeof(__pyx_k_The_controller_is_communicating), 0, 0, 1, 0},
  {&__pyx_kp_s_The_level_as_controlled_by_basic, __pyx_k_The_level_as_controlled_by_basic, sizeof(__pyx_k_The_level_as_controlled_by_basic), 0, 0, 1, 0},
  {&__pyx_kp_s_The_queries_on_a_node_that_are_e, __pyx_k_The_queries_on_a_node_that_are_e, sizeof(__pyx_k_The_queries_on_a_node_that_are_e), 0, 0, 1, 0},
  {&__pyx_n_s_Timeout, __pyx_k_Timeout, sizeof(__pyx_k_Timeout), 0, 0, 1, 1},
  {&__pyx_n_s_TransferPrimaryRole, __pyx_k_TransferPrimaryRole, sizeof(__pyx_k_TransferPrimaryRole), 0, 0, 1, 1},
  {&__pyx_n_s_Unknown, __pyx_k_Unknown, sizeof(__pyx_k_Unknown), 0, 0, 1, 1},
  {&__pyx_kp_s_Used_only_with_ControllerCommand, __pyx_k_Used_only_with_ControllerCommand, sizeof(__pyx_k_Used_only_with_ControllerCommand), 0, 0, 1, 0},
  {&__pyx_kp_s_Used_only_with_ControllerCommand_2, __pyx_k_Used_only_with_ControllerCommand_2, sizeof(__pyx_k_Used_only_with_ControllerCommand_2), 0, 0, 1, 0},
  {&__pyx_n_s_User, __pyx_k_User, sizeof(__pyx_k_User), 0, 0, 1, 1},
  {&__pyx_n_s_ValueAdded, __pyx_k_ValueAdded, sizeof(__pyx_k_ValueAdded), 0, 0, 1, 1},
  {&__pyx_n_s_ValueChanged, __pyx_k_ValueChanged, sizeof(__pyx_k_ValueChanged), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueRefreshed, __pyx_k_ValueRefreshed, sizeof(__pyx_k_ValueRefreshed), 0, 0, 1, 1},
  {&__pyx_n_s_ValueRemoved, __pyx_k_ValueRemoved, sizeof(__pyx_k_ValueRemoved), 0, 0, 1, 1},
  {&__pyx_kp_s_Values_of_significance_only_to_u, __pyx_k_Values_of_significance_only_to_u, sizeof(__pyx_k_Values_of_significance_only_to_u), 0, 0, 1, 0},
  {&__pyx_n_s_Versions, __pyx_k_Versions, sizeof(__pyx_k_Versions), 0, 0, 1, 1},
  {&__pyx_n_s_Waiting, __pyx_k_Waiting, sizeof(__pyx_k_Waiting), 0, 0, 1, 1},
  {&__pyx_n_s_WakeUp, __pyx_k_WakeUp, sizeof(__pyx_k_WakeUp), 0, 0, 1, 1},
  {&__pyx_n_s_Warning, __pyx_k_Warning, sizeof(__pyx_k_Warning), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_addHandler, __pyx_k_addHandler, sizeof(__pyx_k_addHandler), 0, 0, 1, 1},
  {&__pyx_n_s_afile, __pyx_k_afile, sizeof(__pyx_k_afile), 0, 0, 1, 1},
  {&__pyx_kp_s_all_nodes_queried, __pyx_k_all_nodes_queried, sizeof(__pyx_k_all_nodes_queried), 0, 0, 1, 0},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_averageRequestRTT, __pyx_k_averageRequestRTT, sizeof(__pyx_k_averageRequestRTT), 0, 0, 1, 1},
  {&__pyx_n_s_averageResponseRTT, __pyx_k_averageResponseRTT, sizeof(__pyx_k_averageResponseRTT), 0, 0, 1, 1},
  {&__pyx_kp_s_awake_nodes_queried, __pyx_k_awake_nodes_queried, sizeof(__pyx_k_awake_nodes_queried), 0, 0, 1, 0},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_bIntervalBetweenPolls, __pyx_k_bIntervalBetweenPolls, sizeof(__pyx_k_bIntervalBetweenPolls), 0, 0, 1, 1},
  {&__pyx_n_s_badChecksum, __pyx_k_badChecksum, sizeof(__pyx_k_badChecksum), 0, 0, 1, 1},
  {&__pyx_n_s_badroutes, __pyx_k_badroutes, sizeof(__pyx_k_badroutes), 0, 0, 1, 1},
  {&__pyx_n_s_broadcastReadCnt, __pyx_k_broadcastReadCnt, sizeof(__pyx_k_broadcastReadCnt), 0, 0, 1, 1},
  {&__pyx_n_s_broadcastWriteCnt, __pyx_k_broadcastWriteCnt, sizeof(__pyx_k_broadcastWriteCnt), 0, 0, 1, 1},
  {&__pyx_n_s_buttonId, __pyx_k_buttonId, sizeof(__pyx_k_buttonId), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_kp_s_call_to_AddWatcher_failed, __pyx_k_call_to_AddWatcher_failed, sizeof(__pyx_k_call_to_AddWatcher_failed), 0, 0, 1, 0},
  {&__pyx_kp_s_call_to_RemoveWatcher_failed, __pyx_k_call_to_RemoveWatcher_failed, sizeof(__pyx_k_call_to_RemoveWatcher_failed), 0, 0, 1, 0},
  {&__pyx_n_s_callbacks, __pyx_k_callbacks, sizeof(__pyx_k_callbacks), 0, 0, 1, 1},
  {&__pyx_n_s_ccData, __pyx_k_ccData, sizeof(__pyx_k_ccData), 0, 0, 1, 1},
  {&__pyx_n_s_chr, __pyx_k_chr, sizeof(__pyx_k_chr), 0, 0, 1, 1},
  {&__pyx_n_s_className, __pyx_k_className, sizeof(__pyx_k_className), 0, 0, 1, 1},
  {&__pyx_n_s_classVersion, __pyx_k_classVersion, sizeof(__pyx_k_classVersion), 0, 0, 1, 1},
  {&__pyx_n_s_command, __pyx_k_command, sizeof(__pyx_k_command), 0, 0, 1, 1},
  {&__pyx_n_s_commandClass, __pyx_k_commandClass, sizeof(__pyx_k_commandClass), 0, 0, 1, 1},
  {&__pyx_n_s_commandClassId, __pyx_k_commandClassId, sizeof(__pyx_k_commandClassId), 0, 0, 1, 1},
  {&__pyx_n_s_configPath, __pyx_k_configPath, sizeof(__pyx_k_configPath), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_kp_s_d_d_d, __pyx_k_d_d_d, sizeof(__pyx_k_d_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_dist, __pyx_k_dist, sizeof(__pyx_k_dist), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_doc_2, __pyx_k_doc_2, sizeof(__pyx_k_doc_2), 0, 0, 1, 1},
  {&__pyx_kp_s_driver_ready, __pyx_k_driver_ready, sizeof(__pyx_k_driver_ready), 0, 0, 1, 0},
  {&__pyx_kp_s_driver_reset, __pyx_k_driver_reset, sizeof(__pyx_k_driver_reset), 0, 0, 1, 0},
  {&__pyx_n_s_dropped, __pyx_k_dropped, sizeof(__pyx_k_dropped), 0, 0, 1, 1},
  {&__pyx_n_s_emit, __pyx_k_emit, sizeof(__pyx_k_emit), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_error_msg, __pyx_k_error_msg, sizeof(__pyx_k_error_msg), 0, 0, 1, 1},
  {&__pyx_n_s_event, __pyx_k_event, sizeof(__pyx_k_event), 0, 0, 1, 1},
  {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_fullpath, __pyx_k_fullpath, sizeof(__pyx_k_fullpath), 0, 0, 1, 1},
  {&__pyx_n_s_genre, __pyx_k_genre, sizeof(__pyx_k_genre), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_distribution, __pyx_k_get_distribution, sizeof(__pyx_k_get_distribution), 0, 0, 1, 1},
  {&__pyx_n_s_groupIdx, __pyx_k_groupIdx, sizeof(__pyx_k_groupIdx), 0, 0, 1, 1},
  {&__pyx_n_s_groupidx, __pyx_k_groupidx, sizeof(__pyx_k_groupidx), 0, 0, 1, 1},
  {&__pyx_kp_s_groups_changed, __pyx_k_groups_changed, sizeof(__pyx_k_groups_changed), 0, 0, 1, 0},
  {&__pyx_n_s_help, __pyx_k_help, sizeof(__pyx_k_help), 0, 0, 1, 1},
  {&__pyx_n_s_highPower, __pyx_k_highPower, sizeof(__pyx_k_highPower), 0, 0, 1, 1},
  {&__pyx_n_s_homeId, __pyx_k_homeId, sizeof(__pyx_k_homeId), 0, 0, 1, 1},
  {&__pyx_kp_s_home_sebastien_devel_python_ope, __pyx_k_home_sebastien_devel_python_ope, sizeof(__pyx_k_home_sebastien_devel_python_ope), 0, 0, 1, 0},
  {&__pyx_n_s_homeid, __pyx_k_homeid, sizeof(__pyx_k_homeid), 0, 0, 1, 1},
  {&__pyx_n_s_hours, __pyx_k_hours, sizeof(__pyx_k_hours), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_instance, __pyx_k_instance, sizeof(__pyx_k_instance), 0, 0, 1, 1},
  {&__pyx_n_s_intensity, __pyx_k_intensity, sizeof(__pyx_k_intensity), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_lastReceivedMessage, __pyx_k_lastReceivedMessage, sizeof(__pyx_k_lastReceivedMessage), 0, 0, 1, 1},
  {&__pyx_n_s_lastRequestRTT, __pyx_k_lastRequestRTT, sizeof(__pyx_k_lastRequestRTT), 0, 0, 1, 1},
  {&__pyx_n_s_lastResponseRTT, __pyx_k_lastResponseRTT, sizeof(__pyx_k_lastResponseRTT), 0, 0, 1, 1},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_s_libopenzwave, __pyx_k_libopenzwave, sizeof(__pyx_k_libopenzwave), 0, 0, 1, 1},
  {&__pyx_n_s_listdir, __pyx_k_listdir, sizeof(__pyx_k_listdir), 0, 0, 1, 1},
  {&__pyx_n_s_location, __pyx_k_location, sizeof(__pyx_k_location), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_manufacturerName, __pyx_k_manufacturerName, sizeof(__pyx_k_manufacturerName), 0, 0, 1, 1},
  {&__pyx_n_s_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 0, 1, 1},
  {&__pyx_kp_s_message_complete, __pyx_k_message_complete, sizeof(__pyx_k_message_complete), 0, 0, 1, 0},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_milliseconds, __pyx_k_milliseconds, sizeof(__pyx_k_milliseconds), 0, 0, 1, 1},
  {&__pyx_n_s_minutes, __pyx_k_minutes, sizeof(__pyx_k_minutes), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_netbusy, __pyx_k_netbusy, sizeof(__pyx_k_netbusy), 0, 0, 1, 1},
  {&__pyx_kp_s_new_node, __pyx_k_new_node, sizeof(__pyx_k_new_node), 0, 0, 1, 0},
  {&__pyx_n_s_noack, __pyx_k_noack, sizeof(__pyx_k_noack), 0, 0, 1, 1},
  {&__pyx_n_s_nodeId, __pyx_k_nodeId, sizeof(__pyx_k_nodeId), 0, 0, 1, 1},
  {&__pyx_kp_s_node_added, __pyx_k_node_added, sizeof(__pyx_k_node_added), 0, 0, 1, 0},
  {&__pyx_kp_s_node_event, __pyx_k_node_event, sizeof(__pyx_k_node_event), 0, 0, 1, 0},
  {&__pyx_kp_s_node_naming, __pyx_k_node_naming, sizeof(__pyx_k_node_naming), 0, 0, 1, 0},
  {&__pyx_kp_s_node_protocol_info, __pyx_k_node_protocol_info, sizeof(__pyx_k_node_protocol_info), 0, 0, 1, 0},
  {&__pyx_kp_s_node_queries_complete, __pyx_k_node_queries_complete, sizeof(__pyx_k_node_queries_complete), 0, 0, 1, 0},
  {&__pyx_kp_s_node_removed, __pyx_k_node_removed, sizeof(__pyx_k_node_removed), 0, 0, 1, 0},
  {&__pyx_n_s_nodeid, __pyx_k_nodeid, sizeof(__pyx_k_nodeid), 0, 0, 1, 1},
  {&__pyx_n_s_nondelivery, __pyx_k_nondelivery, sizeof(__pyx_k_nondelivery), 0, 0, 1, 1},
  {&__pyx_n_s_notificationCode, __pyx_k_notificationCode, sizeof(__pyx_k_notificationCode), 0, 0, 1, 1},
  {&__pyx_n_s_notificationType, __pyx_k_notificationType, sizeof(__pyx_k_notificationType), 0, 0, 1, 1},
  {&__pyx_n_s_ord, __pyx_k_ord, sizeof(__pyx_k_ord), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_param, __pyx_k_param, sizeof(__pyx_k_param), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_pkg_resources, __pyx_k_pkg_resources, sizeof(__pyx_k_pkg_resources), 0, 0, 1, 1},
  {&__pyx_kp_s_polling_disabled, __pyx_k_polling_disabled, sizeof(__pyx_k_polling_disabled), 0, 0, 1, 0},
  {&__pyx_kp_s_polling_enabled, __pyx_k_polling_enabled, sizeof(__pyx_k_polling_enabled), 0, 0, 1, 0},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_productName, __pyx_k_productName, sizeof(__pyx_k_productName), 0, 0, 1, 1},
  {&__pyx_kp_s_python_openzwave_version_s, __pyx_k_python_openzwave_version_s, sizeof(__pyx_k_python_openzwave_version_s), 0, 0, 1, 0},
  {&__pyx_n_s_pythonfunc, __pyx_k_pythonfunc, sizeof(__pyx_k_pythonfunc), 0, 0, 1, 1},
  {&__pyx_n_s_pythonpath, __pyx_k_pythonpath, sizeof(__pyx_k_pythonpath), 0, 0, 1, 1},
  {&__pyx_n_s_quality, __pyx_k_quality, sizeof(__pyx_k_quality), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_readAborts, __pyx_k_readAborts, sizeof(__pyx_k_readAborts), 0, 0, 1, 1},
  {&__pyx_n_s_readCnt, __pyx_k_readCnt, sizeof(__pyx_k_readCnt), 0, 0, 1, 1},
  {&__pyx_n_s_readOnly, __pyx_k_readOnly, sizeof(__pyx_k_readOnly), 0, 0, 1, 1},
  {&__pyx_n_s_receivedCnt, __pyx_k_receivedCnt, sizeof(__pyx_k_receivedCnt), 0, 0, 1, 1},
  {&__pyx_n_s_receivedDups, __pyx_k_receivedDups, sizeof(__pyx_k_receivedDups), 0, 0, 1, 1},
  {&__pyx_n_s_receivedTS, __pyx_k_receivedTS, sizeof(__pyx_k_receivedTS), 0, 0, 1, 1},
  {&__pyx_n_s_receivedUnsolicited, __pyx_k_receivedUnsolicited, sizeof(__pyx_k_receivedUnsolicited), 0, 0, 1, 1},
  {&__pyx_n_s_record, __pyx_k_record, sizeof(__pyx_k_record), 0, 0, 1, 1},
  {&__pyx_n_s_retries, __pyx_k_retries, sizeof(__pyx_k_retries), 0, 0, 1, 1},
  {&__pyx_n_s_routedbusy, __pyx_k_routedbusy, sizeof(__pyx_k_routedbusy), 0, 0, 1, 1},
  {&__pyx_n_s_sceneId, __pyx_k_sceneId, sizeof(__pyx_k_sceneId), 0, 0, 1, 1},
  {&__pyx_n_s_sceneid, __pyx_k_sceneid, sizeof(__pyx_k_sceneid), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_sentCnt, __pyx_k_sentCnt, sizeof(__pyx_k_sentCnt), 0, 0, 1, 1},
  {&__pyx_n_s_sentFailed, __pyx_k_sentFailed, sizeof(__pyx_k_sentFailed), 0, 0, 1, 1},
  {&__pyx_n_s_sentTS, __pyx_k_sentTS, sizeof(__pyx_k_sentTS), 0, 0, 1, 1},
  {&__pyx_n_s_setDoc, __pyx_k_setDoc, sizeof(__pyx_k_setDoc), 0, 0, 1, 1},
  {&__pyx_n_s_setback, __pyx_k_setback, sizeof(__pyx_k_setback), 0, 0, 1, 1},
  {&__pyx_kp_s_share_openzwave_config, __pyx_k_share_openzwave_config, sizeof(__pyx_k_share_openzwave_config), 0, 0, 1, 0},
  {&__pyx_kp_s_share_python_openzwave_config, __pyx_k_share_python_openzwave_config, sizeof(__pyx_k_share_python_openzwave_config), 0, 0, 1, 0},
  {&__pyx_n_s_siz, __pyx_k_siz, sizeof(__pyx_k_siz), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_targetnodeid, __pyx_k_targetnodeid, sizeof(__pyx_k_targetnodeid), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_unit, __pyx_k_unit, sizeof(__pyx_k_unit), 0, 0, 1, 1},
  {&__pyx_n_s_units, __pyx_k_units, sizeof(__pyx_k_units), 0, 0, 1, 1},
  {&__pyx_n_s_upNodeRoute, __pyx_k_upNodeRoute, sizeof(__pyx_k_upNodeRoute), 0, 0, 1, 1},
  {&__pyx_kp_s_usr, __pyx_k_usr, sizeof(__pyx_k_usr), 0, 0, 1, 0},
  {&__pyx_kp_s_usr_local, __pyx_k_usr_local, sizeof(__pyx_k_usr_local), 0, 0, 1, 0},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_valueId, __pyx_k_valueId, sizeof(__pyx_k_valueId), 0, 0, 1, 1},
  {&__pyx_kp_s_value_added, __pyx_k_value_added, sizeof(__pyx_k_value_added), 0, 0, 1, 0},
  {&__pyx_kp_s_value_changed, __pyx_k_value_changed, sizeof(__pyx_k_value_changed), 0, 0, 1, 0},
  {&__pyx_kp_s_value_removed, __pyx_k_value_removed, sizeof(__pyx_k_value_removed), 0, 0, 1, 0},
  {&__pyx_n_s_verify, __pyx_k_verify, sizeof(__pyx_k_verify), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_version_2, __pyx_k_version_2, sizeof(__pyx_k_version_2), 0, 0, 1, 1},
  {&__pyx_n_s_writeCnt, __pyx_k_writeCnt, sizeof(__pyx_k_writeCnt), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_chr = __Pyx_GetBuiltinName(__pyx_n_s_chr); if (!__pyx_builtin_chr) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ord = __Pyx_GetBuiltinName(__pyx_n_s_ord); if (!__pyx_builtin_ord) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 2241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "libopenzwave.pyx":3347
 *         self._watcherCallback = pythonfunc # need to keep a reference to this
 *         if not self.manager.AddWatcher(notif_callback, <void*>pythonfunc):
 *             raise ValueError("call to AddWatcher failed")             # <<<<<<<<<<<<<<
 * 
 *     def removeWatcher(self, pythonfunc):
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_call_to_AddWatcher_failed); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "libopenzwave.pyx":3361
 *         '''
 *         if not self.manager.RemoveWatcher(notif_callback, <void*>self._watcherCallback):
 *             raise ValueError("call to RemoveWatcher failed")             # <<<<<<<<<<<<<<
 *         else:
 *             self._watcherCallback = None
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_call_to_RemoveWatcher_failed); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 3361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "libopenzwave.pyx":64
 * except ImportError:
 *     class NullHandler(logging.Handler):
 *         def emit(self, record):             # <<<<<<<<<<<<<<
 *             pass
 * logging.getLogger('libopenzwave').addHandler(NullHandler())
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_record); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sebastien_devel_python_ope, __pyx_n_s_emit, 64, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":66
 *         def emit(self, record):
 *             pass
 * logging.getLogger('libopenzwave').addHandler(NullHandler())             # <<<<<<<<<<<<<<
 * 
 * from pkg_resources import get_distribution, DistributionNotFound
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_s_libopenzwave); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "libopenzwave.pyx":70
 * from pkg_resources import get_distribution, DistributionNotFound
 * try:
 *     _dist = get_distribution('libopenzwave')             # <<<<<<<<<<<<<<
 * except DistributionNotFound:
 *     __version__ = 'Not installed'
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_n_s_libopenzwave); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "libopenzwave.pyx":82
 * class EnumWithDoc(str):
 *     """Enum helper"""
 *     def setDoc(self, doc):             # <<<<<<<<<<<<<<
 *         self.doc = doc
 *         return self
 */
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_doc); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_codeobj__9 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__8, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sebastien_devel_python_ope, __pyx_n_s_setDoc, 82, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":87
 * 
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_n_s_ValueAdded); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_A_new_node_value_has_been_added); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "libopenzwave.pyx":88
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_s_ValueRemoved); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_A_node_value_has_been_removed_fr); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "libopenzwave.pyx":89
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_n_s_ValueChanged); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_A_node_value_has_been_updated_fr); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "libopenzwave.pyx":90
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_n_s_ValueRefreshed); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_A_node_value_has_been_updated_fr_2); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "libopenzwave.pyx":91
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_s_Group); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_The_associations_for_the_node_ha); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "libopenzwave.pyx":92
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_n_s_NodeNew); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_A_new_node_has_been_found_not_al); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "libopenzwave.pyx":93
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_n_s_NodeAdded); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_A_new_node_has_been_added_to_Ope); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "libopenzwave.pyx":94
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_n_s_NodeRemoved); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_A_node_has_been_removed_from_Ope); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "libopenzwave.pyx":95
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_n_s_NodeProtocolInfo); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_Basic_node_information_has_been); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "libopenzwave.pyx":96
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_n_s_NodeNaming); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_One_of_the_node_names_has_change); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "libopenzwave.pyx":97
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_n_s_NodeEvent); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_A_node_has_triggered_an_event_Th); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "libopenzwave.pyx":98
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_n_s_PollingDisabled); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Polling_of_a_node_has_been_succe); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "libopenzwave.pyx":99
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_n_s_PollingEnabled); if (unlikely(!__pyx_tuple__34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_Polling_of_a_node_has_been_succe_2); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "libopenzwave.pyx":100
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_n_s_SceneEvent); if (unlikely(!__pyx_tuple__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_Scene_Activation_Set_received); if (unlikely(!__pyx_tuple__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "libopenzwave.pyx":101
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_n_s_CreateButton); if (unlikely(!__pyx_tuple__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_Handheld_controller_button_event); if (unlikely(!__pyx_tuple__39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "libopenzwave.pyx":102
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_n_s_DeleteButton); if (unlikely(!__pyx_tuple__40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_Handheld_controller_button_event_2); if (unlikely(!__pyx_tuple__41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "libopenzwave.pyx":103
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_n_s_ButtonOn); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_Handheld_controller_button_on_pr); if (unlikely(!__pyx_tuple__43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "libopenzwave.pyx":104
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_n_s_ButtonOff); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_Handheld_controller_button_off_p); if (unlikely(!__pyx_tuple__45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "libopenzwave.pyx":105
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_n_s_DriverReady); if (unlikely(!__pyx_tuple__46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_A_driver_for_a_PC_Z_Wave_control); if (unlikely(!__pyx_tuple__47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "libopenzwave.pyx":106
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_n_s_DriverFailed); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_Driver_failed_to_load); if (unlikely(!__pyx_tuple__49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "libopenzwave.pyx":107
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_n_s_DriverReset); if (unlikely(!__pyx_tuple__50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_All_nodes_and_values_for_this_dr); if (unlikely(!__pyx_tuple__51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "libopenzwave.pyx":108
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_n_s_EssentialNodeQueriesComplete); if (unlikely(!__pyx_tuple__52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_The_queries_on_a_node_that_are_e); if (unlikely(!__pyx_tuple__53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "libopenzwave.pyx":109
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_n_s_NodeQueriesComplete); if (unlikely(!__pyx_tuple__54)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_All_the_initialisation_queries_o); if (unlikely(!__pyx_tuple__55)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "libopenzwave.pyx":110
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_n_s_AwakeNodesQueried); if (unlikely(!__pyx_tuple__56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_All_awake_nodes_have_been_querie); if (unlikely(!__pyx_tuple__57)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "libopenzwave.pyx":111
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 *     EnumWithDoc('Notification').setDoc("A manager notification report."),
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_n_s_AllNodesQueried); if (unlikely(!__pyx_tuple__58)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_All_nodes_have_been_queried_so_c); if (unlikely(!__pyx_tuple__59)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "libopenzwave.pyx":112
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Notification').setDoc("A manager notification report."),
 *     EnumWithDoc('DriverRemoved').setDoc("The Driver is being removed."),
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_n_s_AllNodesQueriedSomeDead); if (unlikely(!__pyx_tuple__60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_All_nodes_have_been_queried_but); if (unlikely(!__pyx_tuple__61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "libopenzwave.pyx":113
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 *     EnumWithDoc('Notification').setDoc("A manager notification report."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverRemoved').setDoc("The Driver is being removed."),
 *     ]
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_n_s_Notification); if (unlikely(!__pyx_tuple__62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_A_manager_notification_report); if (unlikely(!__pyx_tuple__63)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "libopenzwave.pyx":114
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 *     EnumWithDoc('Notification').setDoc("A manager notification report."),
 *     EnumWithDoc('DriverRemoved').setDoc("The Driver is being removed."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_n_s_DriverRemoved); if (unlikely(!__pyx_tuple__64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_The_Driver_is_being_removed); if (unlikely(!__pyx_tuple__65)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "libopenzwave.pyx":118
 * 
 * PyNotificationCodes = [
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_n_s_MsgComplete); if (unlikely(!__pyx_tuple__66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_Completed_messages); if (unlikely(!__pyx_tuple__67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "libopenzwave.pyx":119
 * PyNotificationCodes = [
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_n_s_Timeout); if (unlikely(!__pyx_tuple__68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_Messages_that_timeout_will_send); if (unlikely(!__pyx_tuple__69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "libopenzwave.pyx":120
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_n_s_NoOperation); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_Report_on_NoOperation_message_se); if (unlikely(!__pyx_tuple__71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "libopenzwave.pyx":121
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_n_s_Awake); if (unlikely(!__pyx_tuple__72)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_Report_when_a_sleeping_node_wake); if (unlikely(!__pyx_tuple__73)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "libopenzwave.pyx":122
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_n_s_Sleep); if (unlikely(!__pyx_tuple__74)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s_Report_when_a_node_goes_to_sleep); if (unlikely(!__pyx_tuple__75)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "libopenzwave.pyx":123
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),
 *     ]
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_n_s_Dead); if (unlikely(!__pyx_tuple__76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_s_Report_when_a_node_is_presumed_d); if (unlikely(!__pyx_tuple__77)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "libopenzwave.pyx":124
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_n_s_Alive); if (unlikely(!__pyx_tuple__78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_s_Report_when_a_node_is_revived); if (unlikely(!__pyx_tuple__79)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "libopenzwave.pyx":128
 * 
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_n_s_Basic); if (unlikely(!__pyx_tuple__80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_s_The_level_as_controlled_by_basic); if (unlikely(!__pyx_tuple__81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "libopenzwave.pyx":129
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_n_s_User); if (unlikely(!__pyx_tuple__82)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_kp_s_Basic_values_an_ordinary_user_wo); if (unlikely(!__pyx_tuple__83)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "libopenzwave.pyx":130
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),
 *     ]
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_n_s_Config); if (unlikely(!__pyx_tuple__84)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_kp_s_Device_specific_configuration_pa); if (unlikely(!__pyx_tuple__85)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "libopenzwave.pyx":131
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_n_s_System); if (unlikely(!__pyx_tuple__86)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_kp_s_Values_of_significance_only_to_u); if (unlikely(!__pyx_tuple__87)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "libopenzwave.pyx":135
 * 
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_n_s_Bool); if (unlikely(!__pyx_tuple__88)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_tuple__89 = PyTuple_Pack(1, __pyx_kp_s_Boolean_true_or_false); if (unlikely(!__pyx_tuple__89)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);

  /* "libopenzwave.pyx":136
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_n_s_Byte); if (unlikely(!__pyx_tuple__90)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_kp_s_8_bit_unsigned_value); if (unlikely(!__pyx_tuple__91)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "libopenzwave.pyx":137
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_n_s_Decimal); if (unlikely(!__pyx_tuple__92)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_kp_s_Represents_a_non_integer_value_a); if (unlikely(!__pyx_tuple__93)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "libopenzwave.pyx":138
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_n_s_Int); if (unlikely(!__pyx_tuple__94)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_kp_s_32_bit_signed_value); if (unlikely(!__pyx_tuple__95)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "libopenzwave.pyx":139
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_n_s_List); if (unlikely(!__pyx_tuple__96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_kp_s_List_from_which_one_item_can_be); if (unlikely(!__pyx_tuple__97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "libopenzwave.pyx":140
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_n_s_Schedule); if (unlikely(!__pyx_tuple__98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_tuple__99 = PyTuple_Pack(1, __pyx_kp_s_Complex_type_used_with_the_Clima); if (unlikely(!__pyx_tuple__99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);

  /* "libopenzwave.pyx":141
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('String').setDoc("Text string"),
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_n_s_Short); if (unlikely(!__pyx_tuple__100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_kp_s_16_bit_signed_value); if (unlikely(!__pyx_tuple__101)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "libopenzwave.pyx":142
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),
 *     EnumWithDoc('Raw').setDoc("Raw byte values"),
 */
  __pyx_tuple__102 = PyTuple_Pack(1, __pyx_n_s_String); if (unlikely(!__pyx_tuple__102)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_tuple__103 = PyTuple_Pack(1, __pyx_kp_s_Text_string); if (unlikely(!__pyx_tuple__103)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);

  /* "libopenzwave.pyx":143
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Raw').setDoc("Raw byte values"),
 *     ]
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_n_s_Button); if (unlikely(!__pyx_tuple__104)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_kp_s_A_write_only_value_that_is_the_e); if (unlikely(!__pyx_tuple__105)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "libopenzwave.pyx":144
 *     EnumWithDoc('String').setDoc("Text string"),
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),
 *     EnumWithDoc('Raw').setDoc("Raw byte values"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_n_s_Raw); if (unlikely(!__pyx_tuple__106)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_kp_s_Raw_byte_values); if (unlikely(!__pyx_tuple__107)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);

  /* "libopenzwave.pyx":148
 * 
 * PyControllerState = [
 *     EnumWithDoc('Normal').setDoc("No command in progress."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 */
  __pyx_tuple__108 = PyTuple_Pack(1, __pyx_n_s_Normal); if (unlikely(!__pyx_tuple__108)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_tuple__109 = PyTuple_Pack(1, __pyx_kp_s_No_command_in_progress); if (unlikely(!__pyx_tuple__109)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);

  /* "libopenzwave.pyx":149
 * PyControllerState = [
 *     EnumWithDoc('Normal').setDoc("No command in progress."),
 *     EnumWithDoc('Starting').setDoc("The command is starting."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 */
  __pyx_tuple__110 = PyTuple_Pack(1, __pyx_n_s_Starting); if (unlikely(!__pyx_tuple__110)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_tuple__111 = PyTuple_Pack(1, __pyx_kp_s_The_command_is_starting); if (unlikely(!__pyx_tuple__111)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);

  /* "libopenzwave.pyx":150
 *     EnumWithDoc('Normal').setDoc("No command in progress."),
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 */
  __pyx_tuple__112 = PyTuple_Pack(1, __pyx_n_s_Cancel); if (unlikely(!__pyx_tuple__112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_tuple__113 = PyTuple_Pack(1, __pyx_kp_s_The_command_was_cancelled); if (unlikely(!__pyx_tuple__113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);

  /* "libopenzwave.pyx":151
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 */
  __pyx_tuple__114 = PyTuple_Pack(1, __pyx_n_s_Error); if (unlikely(!__pyx_tuple__114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_tuple__115 = PyTuple_Pack(1, __pyx_kp_s_Command_invocation_had_error_s_a); if (unlikely(!__pyx_tuple__115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "libopenzwave.pyx":152
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 */
  __pyx_tuple__116 = PyTuple_Pack(1, __pyx_n_s_Waiting); if (unlikely(!__pyx_tuple__116)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_tuple__117 = PyTuple_Pack(1, __pyx_kp_s_Controller_is_waiting_for_a_user); if (unlikely(!__pyx_tuple__117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "libopenzwave.pyx":153
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_n_s_Sleeping); if (unlikely(!__pyx_tuple__118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_tuple__119 = PyTuple_Pack(1, __pyx_kp_s_Controller_command_is_on_a_sleep); if (unlikely(!__pyx_tuple__119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "libopenzwave.pyx":154
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_n_s_InProgress); if (unlikely(!__pyx_tuple__120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_tuple__121 = PyTuple_Pack(1, __pyx_kp_s_The_controller_is_communicating); if (unlikely(!__pyx_tuple__121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "libopenzwave.pyx":155
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 */
  __pyx_tuple__122 = PyTuple_Pack(1, __pyx_n_s_Completed); if (unlikely(!__pyx_tuple__122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_tuple__123 = PyTuple_Pack(1, __pyx_kp_s_The_command_has_completed_succes); if (unlikely(!__pyx_tuple__123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "libopenzwave.pyx":156
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),
 */
  __pyx_tuple__124 = PyTuple_Pack(1, __pyx_n_s_Failed); if (unlikely(!__pyx_tuple__124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_tuple__125 = PyTuple_Pack(1, __pyx_kp_s_The_command_has_failed); if (unlikely(!__pyx_tuple__125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);

  /* "libopenzwave.pyx":157
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),
 *     ]
 */
  __pyx_tuple__126 = PyTuple_Pack(1, __pyx_n_s_NodeOK); if (unlikely(!__pyx_tuple__126)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_tuple__127 = PyTuple_Pack(1, __pyx_kp_s_Used_only_with_ControllerCommand); if (unlikely(!__pyx_tuple__127)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);

  /* "libopenzwave.pyx":158
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_tuple__128 = PyTuple_Pack(1, __pyx_n_s_NodeFailed); if (unlikely(!__pyx_tuple__128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_kp_s_Used_only_with_ControllerCommand_2); if (unlikely(!__pyx_tuple__129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "libopenzwave.pyx":162
 * 
 * PyControllerError = [
 *     EnumWithDoc('None').setDoc("None."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_n_s_None); if (unlikely(!__pyx_tuple__130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_tuple__131 = PyTuple_Pack(1, __pyx_kp_s_None_2); if (unlikely(!__pyx_tuple__131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);

  /* "libopenzwave.pyx":163
 * PyControllerError = [
 *     EnumWithDoc('None').setDoc("None."),
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 */
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_n_s_ButtonNotFound); if (unlikely(!__pyx_tuple__132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_tuple__133 = PyTuple_Pack(1, __pyx_kp_s_Button_2); if (unlikely(!__pyx_tuple__133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "libopenzwave.pyx":164
 *     EnumWithDoc('None').setDoc("None."),
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 */
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_n_s_NodeNotFound); if (unlikely(!__pyx_tuple__134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_tuple__135 = PyTuple_Pack(1, __pyx_kp_s_Button_2); if (unlikely(!__pyx_tuple__135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "libopenzwave.pyx":165
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 */
  __pyx_tuple__136 = PyTuple_Pack(1, __pyx_n_s_NotBridge); if (unlikely(!__pyx_tuple__136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_tuple__137 = PyTuple_Pack(1, __pyx_kp_s_Button_2); if (unlikely(!__pyx_tuple__137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);

  /* "libopenzwave.pyx":166
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 */
  __pyx_tuple__138 = PyTuple_Pack(1, __pyx_n_s_NotSUC); if (unlikely(!__pyx_tuple__138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_tuple__139 = PyTuple_Pack(1, __pyx_kp_s_CreateNewPrimary); if (unlikely(!__pyx_tuple__139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);

  /* "libopenzwave.pyx":167
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 */
  __pyx_tuple__140 = PyTuple_Pack(1, __pyx_n_s_NotSecondary); if (unlikely(!__pyx_tuple__140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_tuple__141 = PyTuple_Pack(1, __pyx_kp_s_CreateNewPrimary); if (unlikely(!__pyx_tuple__141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);

  /* "libopenzwave.pyx":168
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 */
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_n_s_NotPrimary); if (unlikely(!__pyx_tuple__142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_tuple__143 = PyTuple_Pack(1, __pyx_kp_s_RemoveFailedNode_AddNodeToNetwor); if (unlikely(!__pyx_tuple__143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);

  /* "libopenzwave.pyx":169
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 */
  __pyx_tuple__144 = PyTuple_Pack(1, __pyx_n_s_IsPrimary); if (unlikely(!__pyx_tuple__144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_tuple__145 = PyTuple_Pack(1, __pyx_kp_s_ReceiveConfiguration); if (unlikely(!__pyx_tuple__145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);

  /* "libopenzwave.pyx":170
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 */
  __pyx_tuple__146 = PyTuple_Pack(1, __pyx_n_s_NotFound); if (unlikely(!__pyx_tuple__146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_tuple__147 = PyTuple_Pack(1, __pyx_kp_s_RemoveFailedNode); if (unlikely(!__pyx_tuple__147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);

  /* "libopenzwave.pyx":171
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 */
  __pyx_tuple__148 = PyTuple_Pack(1, __pyx_n_s_Busy); if (unlikely(!__pyx_tuple__148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_tuple__149 = PyTuple_Pack(1, __pyx_kp_s_RemoveFailedNode_RequestNetworkU); if (unlikely(!__pyx_tuple__149)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);

  /* "libopenzwave.pyx":172
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),
 */
  __pyx_tuple__150 = PyTuple_Pack(1, __pyx_n_s_Failed); if (unlikely(!__pyx_tuple__150)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_tuple__151 = PyTuple_Pack(1, __pyx_kp_s_RemoveFailedNode_RequestNetworkU); if (unlikely(!__pyx_tuple__151)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);

  /* "libopenzwave.pyx":173
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),
 *     ]
 */
  __pyx_tuple__152 = PyTuple_Pack(1, __pyx_n_s_Disabled); if (unlikely(!__pyx_tuple__152)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_kp_s_RequestNetworkUpdate_error); if (unlikely(!__pyx_tuple__153)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);

  /* "libopenzwave.pyx":174
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_tuple__154 = PyTuple_Pack(1, __pyx_n_s_Overflow); if (unlikely(!__pyx_tuple__154)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);
  __pyx_tuple__155 = PyTuple_Pack(1, __pyx_kp_s_RequestNetworkUpdate_error); if (unlikely(!__pyx_tuple__155)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);

  /* "libopenzwave.pyx":178
 * 
 * PyControllerCommand = [
 *     EnumWithDoc('None').setDoc("No command."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 */
  __pyx_tuple__156 = PyTuple_Pack(1, __pyx_n_s_None); if (unlikely(!__pyx_tuple__156)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);
  __pyx_tuple__157 = PyTuple_Pack(1, __pyx_kp_s_No_command); if (unlikely(!__pyx_tuple__157)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);

  /* "libopenzwave.pyx":179
 * PyControllerCommand = [
 *     EnumWithDoc('None').setDoc("No command."),
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 */
  __pyx_tuple__158 = PyTuple_Pack(1, __pyx_n_s_AddDevice); if (unlikely(!__pyx_tuple__158)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);
  __pyx_tuple__159 = PyTuple_Pack(1, __pyx_kp_s_Add_a_new_device_but_not_a_contr); if (unlikely(!__pyx_tuple__159)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);

  /* "libopenzwave.pyx":180
 *     EnumWithDoc('None').setDoc("No command."),
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 */
  __pyx_tuple__160 = PyTuple_Pack(1, __pyx_n_s_CreateNewPrimary_2); if (unlikely(!__pyx_tuple__160)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);
  __pyx_tuple__161 = PyTuple_Pack(1, __pyx_kp_s_Add_a_new_controller_to_the_Z_Wa); if (unlikely(!__pyx_tuple__161)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);

  /* "libopenzwave.pyx":181
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 */
  __pyx_tuple__162 = PyTuple_Pack(1, __pyx_n_s_ReceiveConfiguration_2); if (unlikely(!__pyx_tuple__162)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);
  __pyx_tuple__163 = PyTuple_Pack(1, __pyx_kp_s_Receive_Z_Wave_network_configura); if (unlikely(!__pyx_tuple__163)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);

  /* "libopenzwave.pyx":182
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 */
  __pyx_tuple__164 = PyTuple_Pack(1, __pyx_n_s_RemoveDevice); if (unlikely(!__pyx_tuple__164)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);
  __pyx_tuple__165 = PyTuple_Pack(1, __pyx_kp_s_Remove_a_new_device_but_not_a_co); if (unlikely(!__pyx_tuple__165)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);

  /* "libopenzwave.pyx":183
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 */
  __pyx_tuple__166 = PyTuple_Pack(1, __pyx_n_s_RemoveFailedNode_2); if (unlikely(!__pyx_tuple__166)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);
  __pyx_tuple__167 = PyTuple_Pack(1, __pyx_kp_s_Move_a_node_to_the_controller_s); if (unlikely(!__pyx_tuple__167)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);

  /* "libopenzwave.pyx":184
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 */
  __pyx_tuple__168 = PyTuple_Pack(1, __pyx_n_s_HasNodeFailed); if (unlikely(!__pyx_tuple__168)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_tuple__169 = PyTuple_Pack(1, __pyx_kp_s_Check_whether_a_node_is_in_the_c); if (unlikely(!__pyx_tuple__169)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);

  /* "libopenzwave.pyx":185
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 */
  __pyx_tuple__170 = PyTuple_Pack(1, __pyx_n_s_ReplaceFailedNode); if (unlikely(!__pyx_tuple__170)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);
  __pyx_tuple__171 = PyTuple_Pack(1, __pyx_kp_s_Replace_a_non_responding_node_wi); if (unlikely(!__pyx_tuple__171)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);

  /* "libopenzwave.pyx":186
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 */
  __pyx_tuple__172 = PyTuple_Pack(1, __pyx_n_s_TransferPrimaryRole); if (unlikely(!__pyx_tuple__172)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);
  __pyx_tuple__173 = PyTuple_Pack(1, __pyx_kp_s_Make_a_different_controller_the); if (unlikely(!__pyx_tuple__173)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);

  /* "libopenzwave.pyx":187
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 */
  __pyx_tuple__174 = PyTuple_Pack(1, __pyx_n_s_RequestNetworkUpdate); if (unlikely(!__pyx_tuple__174)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);
  __pyx_tuple__175 = PyTuple_Pack(1, __pyx_kp_s_Request_network_information_from); if (unlikely(!__pyx_tuple__175)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);

  /* "libopenzwave.pyx":188
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 */
  __pyx_tuple__176 = PyTuple_Pack(1, __pyx_n_s_RequestNodeNeighborUpdate); if (unlikely(!__pyx_tuple__176)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);
  __pyx_tuple__177 = PyTuple_Pack(1, __pyx_kp_s_Get_a_node_to_rebuild_its_neighb); if (unlikely(!__pyx_tuple__177)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);

  /* "libopenzwave.pyx":189
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 */
  __pyx_tuple__178 = PyTuple_Pack(1, __pyx_n_s_AssignReturnRoute); if (unlikely(!__pyx_tuple__178)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);
  __pyx_tuple__179 = PyTuple_Pack(1, __pyx_kp_s_Assign_a_network_return_routes_t); if (unlikely(!__pyx_tuple__179)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);

  /* "libopenzwave.pyx":190
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 */
  __pyx_tuple__180 = PyTuple_Pack(1, __pyx_n_s_DeleteAllReturnRoutes); if (unlikely(!__pyx_tuple__180)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);
  __pyx_tuple__181 = PyTuple_Pack(1, __pyx_kp_s_Delete_all_return_routes_from_a); if (unlikely(!__pyx_tuple__181)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);

  /* "libopenzwave.pyx":191
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 */
  __pyx_tuple__182 = PyTuple_Pack(1, __pyx_n_s_SendNodeInformation); if (unlikely(!__pyx_tuple__182)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  __pyx_tuple__183 = PyTuple_Pack(1, __pyx_kp_s_Send_a_node_information_frame); if (unlikely(!__pyx_tuple__183)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);

  /* "libopenzwave.pyx":192
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),
 */
  __pyx_tuple__184 = PyTuple_Pack(1, __pyx_n_s_ReplicationSend); if (unlikely(!__pyx_tuple__184)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);
  __pyx_tuple__185 = PyTuple_Pack(1, __pyx_kp_s_Send_information_from_primary_to); if (unlikely(!__pyx_tuple__185)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);

  /* "libopenzwave.pyx":193
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),
 *     ]
 */
  __pyx_tuple__186 = PyTuple_Pack(1, __pyx_n_s_CreateButton); if (unlikely(!__pyx_tuple__186)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_tuple__187 = PyTuple_Pack(1, __pyx_kp_s_Create_an_id_that_tracks_handhel); if (unlikely(!__pyx_tuple__187)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);

  /* "libopenzwave.pyx":194
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_tuple__188 = PyTuple_Pack(1, __pyx_n_s_DeleteButton); if (unlikely(!__pyx_tuple__188)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);
  __pyx_tuple__189 = PyTuple_Pack(1, __pyx_kp_s_Delete_id_that_tracks_handheld_b); if (unlikely(!__pyx_tuple__189)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);

  /* "libopenzwave.pyx":198
 * 
 * PyControllerInterface = [
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),
 */
  __pyx_tuple__190 = PyTuple_Pack(1, __pyx_n_s_Unknown); if (unlikely(!__pyx_tuple__190)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);
  __pyx_tuple__191 = PyTuple_Pack(1, __pyx_kp_s_Controller_interface_use_unknown); if (unlikely(!__pyx_tuple__191)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);

  /* "libopenzwave.pyx":199
 * PyControllerInterface = [
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),
 * ]
 */
  __pyx_tuple__192 = PyTuple_Pack(1, __pyx_n_s_Serial); if (unlikely(!__pyx_tuple__192)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);
  __pyx_tuple__193 = PyTuple_Pack(1, __pyx_kp_s_Controller_interface_use_serial); if (unlikely(!__pyx_tuple__193)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);

  /* "libopenzwave.pyx":200
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),             # <<<<<<<<<<<<<<
 * ]
 * 
 */
  __pyx_tuple__194 = PyTuple_Pack(1, __pyx_n_s_Hid); if (unlikely(!__pyx_tuple__194)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__194);
  __Pyx_GIVEREF(__pyx_tuple__194);
  __pyx_tuple__195 = PyTuple_Pack(1, __pyx_kp_s_Controller_interface_use_human_i); if (unlikely(!__pyx_tuple__195)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);

  /* "libopenzwave.pyx":392
 *     cdef DriverData data
 * 
 * def configPath():             # <<<<<<<<<<<<<<
 *     '''
 * Retrieve the config path. This directory hold the xml files.
 */
  __pyx_tuple__196 = PyTuple_Pack(3, __pyx_n_s_pythonpath, __pyx_n_s_afile, __pyx_n_s_fullpath); if (unlikely(!__pyx_tuple__196)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);
  __pyx_codeobj__197 = (PyObject*)__Pyx_PyCode_New(0, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__196, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_sebastien_devel_python_ope, __pyx_n_s_configPath, 392, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__197)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":666
 *     '''
 * 
 *     CALLBACK_DESC = ('value added','value removed','value changed','groups changed','new node','node added',             # <<<<<<<<<<<<<<
 *                      'node removed','node protocol info','node naming','node event','polling disabled',
 *                      'polling enabled','driver ready','driver reset','message complete','node queries complete',
 */
  __pyx_tuple__198 = PyTuple_Pack(18, __pyx_kp_s_value_added, __pyx_kp_s_value_removed, __pyx_kp_s_value_changed, __pyx_kp_s_groups_changed, __pyx_kp_s_new_node, __pyx_kp_s_node_added, __pyx_kp_s_node_removed, __pyx_kp_s_node_protocol_info, __pyx_kp_s_node_naming, __pyx_kp_s_node_event, __pyx_kp_s_polling_disabled, __pyx_kp_s_polling_enabled, __pyx_kp_s_driver_ready, __pyx_kp_s_driver_reset, __pyx_kp_s_message_complete, __pyx_kp_s_node_queries_complete, __pyx_kp_s_awake_nodes_queried, __pyx_kp_s_all_nodes_queried); if (unlikely(!__pyx_tuple__198)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_9 = PyInt_FromLong(9); if (unlikely(!__pyx_int_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_11 = PyInt_FromLong(11); if (unlikely(!__pyx_int_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_13 = PyInt_FromLong(13); if (unlikely(!__pyx_int_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_14 = PyInt_FromLong(14); if (unlikely(!__pyx_int_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_33 = PyInt_FromLong(33); if (unlikely(!__pyx_int_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_34 = PyInt_FromLong(34); if (unlikely(!__pyx_int_34)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_35 = PyInt_FromLong(35); if (unlikely(!__pyx_int_35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_36 = PyInt_FromLong(36); if (unlikely(!__pyx_int_36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_37 = PyInt_FromLong(37); if (unlikely(!__pyx_int_37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_38 = PyInt_FromLong(38); if (unlikely(!__pyx_int_38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_39 = PyInt_FromLong(39); if (unlikely(!__pyx_int_39)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_40 = PyInt_FromLong(40); if (unlikely(!__pyx_int_40)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_41 = PyInt_FromLong(41); if (unlikely(!__pyx_int_41)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_42 = PyInt_FromLong(42); if (unlikely(!__pyx_int_42)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_43 = PyInt_FromLong(43); if (unlikely(!__pyx_int_43)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_44 = PyInt_FromLong(44); if (unlikely(!__pyx_int_44)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_45 = PyInt_FromLong(45); if (unlikely(!__pyx_int_45)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_46 = PyInt_FromLong(46); if (unlikely(!__pyx_int_46)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_47 = PyInt_FromLong(47); if (unlikely(!__pyx_int_47)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_48 = PyInt_FromLong(48); if (unlikely(!__pyx_int_48)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_49 = PyInt_FromLong(49); if (unlikely(!__pyx_int_49)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_51 = PyInt_FromLong(51); if (unlikely(!__pyx_int_51)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_52 = PyInt_FromLong(52); if (unlikely(!__pyx_int_52)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_53 = PyInt_FromLong(53); if (unlikely(!__pyx_int_53)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_56 = PyInt_FromLong(56); if (unlikely(!__pyx_int_56)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_60 = PyInt_FromLong(60); if (unlikely(!__pyx_int_60)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_61 = PyInt_FromLong(61); if (unlikely(!__pyx_int_61)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_62 = PyInt_FromLong(62); if (unlikely(!__pyx_int_62)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_64 = PyInt_FromLong(64); if (unlikely(!__pyx_int_64)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_66 = PyInt_FromLong(66); if (unlikely(!__pyx_int_66)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_67 = PyInt_FromLong(67); if (unlikely(!__pyx_int_67)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_68 = PyInt_FromLong(68); if (unlikely(!__pyx_int_68)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_69 = PyInt_FromLong(69); if (unlikely(!__pyx_int_69)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_70 = PyInt_FromLong(70); if (unlikely(!__pyx_int_70)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_71 = PyInt_FromLong(71); if (unlikely(!__pyx_int_71)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_76 = PyInt_FromLong(76); if (unlikely(!__pyx_int_76)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_78 = PyInt_FromLong(78); if (unlikely(!__pyx_int_78)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_80 = PyInt_FromLong(80); if (unlikely(!__pyx_int_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_81 = PyInt_FromLong(81); if (unlikely(!__pyx_int_81)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_96 = PyInt_FromLong(96); if (unlikely(!__pyx_int_96)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_97 = PyInt_FromLong(97); if (unlikely(!__pyx_int_97)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_98 = PyInt_FromLong(98); if (unlikely(!__pyx_int_98)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_99 = PyInt_FromLong(99); if (unlikely(!__pyx_int_99)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_112 = PyInt_FromLong(112); if (unlikely(!__pyx_int_112)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_113 = PyInt_FromLong(113); if (unlikely(!__pyx_int_113)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_114 = PyInt_FromLong(114); if (unlikely(!__pyx_int_114)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_115 = PyInt_FromLong(115); if (unlikely(!__pyx_int_115)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_117 = PyInt_FromLong(117); if (unlikely(!__pyx_int_117)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_118 = PyInt_FromLong(118); if (unlikely(!__pyx_int_118)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_119 = PyInt_FromLong(119); if (unlikely(!__pyx_int_119)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_120 = PyInt_FromLong(120); if (unlikely(!__pyx_int_120)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_121 = PyInt_FromLong(121); if (unlikely(!__pyx_int_121)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_122 = PyInt_FromLong(122); if (unlikely(!__pyx_int_122)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_123 = PyInt_FromLong(123); if (unlikely(!__pyx_int_123)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_124 = PyInt_FromLong(124); if (unlikely(!__pyx_int_124)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_125 = PyInt_FromLong(125); if (unlikely(!__pyx_int_125)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_128 = PyInt_FromLong(128); if (unlikely(!__pyx_int_128)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_129 = PyInt_FromLong(129); if (unlikely(!__pyx_int_129)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_130 = PyInt_FromLong(130); if (unlikely(!__pyx_int_130)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_131 = PyInt_FromLong(131); if (unlikely(!__pyx_int_131)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_132 = PyInt_FromLong(132); if (unlikely(!__pyx_int_132)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_133 = PyInt_FromLong(133); if (unlikely(!__pyx_int_133)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_134 = PyInt_FromLong(134); if (unlikely(!__pyx_int_134)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_135 = PyInt_FromLong(135); if (unlikely(!__pyx_int_135)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_136 = PyInt_FromLong(136); if (unlikely(!__pyx_int_136)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_137 = PyInt_FromLong(137); if (unlikely(!__pyx_int_137)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_138 = PyInt_FromLong(138); if (unlikely(!__pyx_int_138)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_139 = PyInt_FromLong(139); if (unlikely(!__pyx_int_139)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_140 = PyInt_FromLong(140); if (unlikely(!__pyx_int_140)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_141 = PyInt_FromLong(141); if (unlikely(!__pyx_int_141)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_142 = PyInt_FromLong(142); if (unlikely(!__pyx_int_142)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_143 = PyInt_FromLong(143); if (unlikely(!__pyx_int_143)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_144 = PyInt_FromLong(144); if (unlikely(!__pyx_int_144)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_145 = PyInt_FromLong(145); if (unlikely(!__pyx_int_145)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_146 = PyInt_FromLong(146); if (unlikely(!__pyx_int_146)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_147 = PyInt_FromLong(147); if (unlikely(!__pyx_int_147)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_148 = PyInt_FromLong(148); if (unlikely(!__pyx_int_148)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_149 = PyInt_FromLong(149); if (unlikely(!__pyx_int_149)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_150 = PyInt_FromLong(150); if (unlikely(!__pyx_int_150)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_151 = PyInt_FromLong(151); if (unlikely(!__pyx_int_151)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_152 = PyInt_FromLong(152); if (unlikely(!__pyx_int_152)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_153 = PyInt_FromLong(153); if (unlikely(!__pyx_int_153)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_154 = PyInt_FromLong(154); if (unlikely(!__pyx_int_154)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_155 = PyInt_FromLong(155); if (unlikely(!__pyx_int_155)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_156 = PyInt_FromLong(156); if (unlikely(!__pyx_int_156)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_157 = PyInt_FromLong(157); if (unlikely(!__pyx_int_157)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_158 = PyInt_FromLong(158); if (unlikely(!__pyx_int_158)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_239 = PyInt_FromLong(239); if (unlikely(!__pyx_int_239)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_240 = PyInt_FromLong(240); if (unlikely(!__pyx_int_240)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_255 = PyInt_FromLong(255); if (unlikely(!__pyx_int_255)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initlibopenzwave(void); /*proto*/
PyMODINIT_FUNC initlibopenzwave(void)
#else
PyMODINIT_FUNC PyInit_libopenzwave(void); /*proto*/
PyMODINIT_FUNC PyInit_libopenzwave(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  PyObject *__pyx_t_33 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_libopenzwave(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("libopenzwave"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_module_libopenzwave_This_file_i), 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_libopenzwave) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "libopenzwave")) {
      if (unlikely(PyDict_SetItemString(modules, "libopenzwave", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_12libopenzwave_PyOptions) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_12libopenzwave_PyOptions.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyOptions", (PyObject *)&__pyx_type_12libopenzwave_PyOptions) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_12libopenzwave_PyOptions = &__pyx_type_12libopenzwave_PyOptions;
  if (PyType_Ready(&__pyx_type_12libopenzwave_RetAlloc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_12libopenzwave_RetAlloc.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "RetAlloc", (PyObject *)&__pyx_type_12libopenzwave_RetAlloc) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_12libopenzwave_RetAlloc = &__pyx_type_12libopenzwave_RetAlloc;
  if (PyType_Ready(&__pyx_type_12libopenzwave_PyManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_12libopenzwave_PyManager.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "PyManager", (PyObject *)&__pyx_type_12libopenzwave_PyManager) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_12libopenzwave_PyManager = &__pyx_type_12libopenzwave_PyManager;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "libopenzwave.pyx":50
 * from cython.operator cimport dereference
 * from log cimport LogLevel
 * import os             # <<<<<<<<<<<<<<
 * import sys
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":51
 * from log cimport LogLevel
 * import os
 * import sys             # <<<<<<<<<<<<<<
 * 
 * #import logging
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":56
 * #logging.getLogger('libopenzwave').addHandler(logging.NullHandler())
 * 
 * import logging             # <<<<<<<<<<<<<<
 * 
 * # Set default logging handler to avoid "No handler found" warnings.
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":59
 * 
 * # Set default logging handler to avoid "No handler found" warnings.
 * import logging             # <<<<<<<<<<<<<<
 * try:  # Python 2.7+
 *     from logging import NullHandler
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_logging, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":60
 * # Set default logging handler to avoid "No handler found" warnings.
 * import logging
 * try:  # Python 2.7+             # <<<<<<<<<<<<<<
 *     from logging import NullHandler
 * except ImportError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "libopenzwave.pyx":61
 * import logging
 * try:  # Python 2.7+
 *     from logging import NullHandler             # <<<<<<<<<<<<<<
 * except ImportError:
 *     class NullHandler(logging.Handler):
 */
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_NullHandler);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NullHandler);
      __Pyx_GIVEREF(__pyx_n_s_NullHandler);
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_logging, __pyx_t_1, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_NullHandler); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_NullHandler, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L9_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "libopenzwave.pyx":62
 * try:  # Python 2.7+
 *     from logging import NullHandler
 * except ImportError:             # <<<<<<<<<<<<<<
 *     class NullHandler(logging.Handler):
 *         def emit(self, record):
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("libopenzwave", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);

      /* "libopenzwave.pyx":63
 *     from logging import NullHandler
 * except ImportError:
 *     class NullHandler(logging.Handler):             # <<<<<<<<<<<<<<
 *         def emit(self, record):
 *             pass
 */
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_Handler); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_CalculateMetaclass(NULL, __pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_Py3MetaclassPrepare(__pyx_t_9, __pyx_t_8, __pyx_n_s_NullHandler, __pyx_n_s_NullHandler, (PyObject *) NULL, __pyx_n_s_libopenzwave, (PyObject *) NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_10);

      /* "libopenzwave.pyx":64
 * except ImportError:
 *     class NullHandler(logging.Handler):
 *         def emit(self, record):             # <<<<<<<<<<<<<<
 *             pass
 * logging.getLogger('libopenzwave').addHandler(NullHandler())
 */
      __pyx_t_11 = __Pyx_CyFunction_NewEx(&__pyx_mdef_12libopenzwave_11NullHandler_1emit, 0, __pyx_n_s_NullHandler_emit, NULL, __pyx_n_s_libopenzwave, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      if (PyObject_SetItem(__pyx_t_10, __pyx_n_s_emit, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "libopenzwave.pyx":63
 *     from logging import NullHandler
 * except ImportError:
 *     class NullHandler(logging.Handler):             # <<<<<<<<<<<<<<
 *         def emit(self, record):
 *             pass
 */
      __pyx_t_11 = __Pyx_Py3ClassCreate(__pyx_t_9, __pyx_n_s_NullHandler, __pyx_t_8, __pyx_t_10, NULL, 0, 1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_NullHandler, __pyx_t_11) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    __pyx_L9_try_end:;
  }

  /* "libopenzwave.pyx":66
 *         def emit(self, record):
 *             pass
 * logging.getLogger('libopenzwave').addHandler(NullHandler())             # <<<<<<<<<<<<<<
 * 
 * from pkg_resources import get_distribution, DistributionNotFound
 */
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_logging); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_addHandler); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_NullHandler); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "libopenzwave.pyx":68
 * logging.getLogger('libopenzwave').addHandler(NullHandler())
 * 
 * from pkg_resources import get_distribution, DistributionNotFound             # <<<<<<<<<<<<<<
 * try:
 *     _dist = get_distribution('libopenzwave')
 */
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_n_s_get_distribution);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_get_distribution);
  __Pyx_GIVEREF(__pyx_n_s_get_distribution);
  __Pyx_INCREF(__pyx_n_s_DistributionNotFound);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_DistributionNotFound);
  __Pyx_GIVEREF(__pyx_n_s_DistributionNotFound);
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_pkg_resources, __pyx_t_5, -1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_get_distribution); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_distribution, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_DistributionNotFound); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DistributionNotFound, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "libopenzwave.pyx":69
 * 
 * from pkg_resources import get_distribution, DistributionNotFound
 * try:             # <<<<<<<<<<<<<<
 *     _dist = get_distribution('libopenzwave')
 * except DistributionNotFound:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_3, &__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    /*try:*/ {

      /* "libopenzwave.pyx":70
 * from pkg_resources import get_distribution, DistributionNotFound
 * try:
 *     _dist = get_distribution('libopenzwave')             # <<<<<<<<<<<<<<
 * except DistributionNotFound:
 *     __version__ = 'Not installed'
 */
      __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_get_distribution); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_dist, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    /*else:*/ {

      /* "libopenzwave.pyx":74
 *     __version__ = 'Not installed'
 * else:
 *     __version__ = _dist.version             # <<<<<<<<<<<<<<
 * 
 * PYLIBRARY = __version__
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_dist); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_version); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_version_2, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L19_try_end;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "libopenzwave.pyx":71
 * try:
 *     _dist = get_distribution('libopenzwave')
 * except DistributionNotFound:             # <<<<<<<<<<<<<<
 *     __version__ = 'Not installed'
 * else:
 */
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_DistributionNotFound); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__pyx_t_6) {
      __Pyx_AddTraceback("libopenzwave", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_5, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "libopenzwave.pyx":72
 *     _dist = get_distribution('libopenzwave')
 * except DistributionNotFound:
 *     __version__ = 'Not installed'             # <<<<<<<<<<<<<<
 * else:
 *     __version__ = _dist.version
 */
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_version_2, __pyx_kp_s_Not_installed) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L14_except_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L13_exception_handled;
    }
    goto __pyx_L14_except_error;
    __pyx_L14_except_error:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_3, __pyx_t_2);
    goto __pyx_L1_error;
    __pyx_L13_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_3, __pyx_t_2);
    __pyx_L19_try_end:;
  }

  /* "libopenzwave.pyx":76
 *     __version__ = _dist.version
 * 
 * PYLIBRARY = __version__             # <<<<<<<<<<<<<<
 * PY_OZWAVE_CONFIG_DIRECTORY = "share/python-openzwave/config"
 * OZWAVE_CONFIG_DIRECTORY = "share/openzwave/config"
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_version_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PYLIBRARY, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":77
 * 
 * PYLIBRARY = __version__
 * PY_OZWAVE_CONFIG_DIRECTORY = "share/python-openzwave/config"             # <<<<<<<<<<<<<<
 * OZWAVE_CONFIG_DIRECTORY = "share/openzwave/config"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PY_OZWAVE_CONFIG_DIRECTORY, __pyx_kp_s_share_python_openzwave_config) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":78
 * PYLIBRARY = __version__
 * PY_OZWAVE_CONFIG_DIRECTORY = "share/python-openzwave/config"
 * OZWAVE_CONFIG_DIRECTORY = "share/openzwave/config"             # <<<<<<<<<<<<<<
 * 
 * class EnumWithDoc(str):
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OZWAVE_CONFIG_DIRECTORY, __pyx_kp_s_share_openzwave_config) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "libopenzwave.pyx":80
 * OZWAVE_CONFIG_DIRECTORY = "share/openzwave/config"
 * 
 * class EnumWithDoc(str):             # <<<<<<<<<<<<<<
 *     """Enum helper"""
 *     def setDoc(self, doc):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((PyObject*)(&PyString_Type))));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)(&PyString_Type))));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)(&PyString_Type))));
  __pyx_t_5 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_Py3MetaclassPrepare(__pyx_t_5, __pyx_t_1, __pyx_n_s_EnumWithDoc, __pyx_n_s_EnumWithDoc, (PyObject *) NULL, __pyx_n_s_libopenzwave, __pyx_kp_s_Enum_helper); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);

  /* "libopenzwave.pyx":82
 * class EnumWithDoc(str):
 *     """Enum helper"""
 *     def setDoc(self, doc):             # <<<<<<<<<<<<<<
 *         self.doc = doc
 *         return self
 */
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_12libopenzwave_11EnumWithDoc_1setDoc, 0, __pyx_n_s_EnumWithDoc_setDoc, NULL, __pyx_n_s_libopenzwave, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__9)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyObject_SetItem(__pyx_t_7, __pyx_n_s_setDoc, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "libopenzwave.pyx":80
 * OZWAVE_CONFIG_DIRECTORY = "share/openzwave/config"
 * 
 * class EnumWithDoc(str):             # <<<<<<<<<<<<<<
 *     """Enum helper"""
 *     def setDoc(self, doc):
 */
  __pyx_t_8 = __Pyx_Py3ClassCreate(__pyx_t_5, __pyx_n_s_EnumWithDoc, __pyx_t_1, __pyx_t_7, NULL, 0, 1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_EnumWithDoc, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":87
 * 
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":88
 * PyNotifications = [
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":89
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":90
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":91
 *     EnumWithDoc('ValueChanged').setDoc("A node value has been updated from the Z-Wave network and it is different from the previous value."),
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":92
 *     EnumWithDoc('ValueRefreshed').setDoc("A node value has been updated from the Z-Wave network."),
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":93
 *     EnumWithDoc('Group').setDoc("The associations for the node have changed. The application should rebuild any group information it holds about the node."),
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":94
 *     EnumWithDoc('NodeNew').setDoc("A new node has been found (not already stored in zwcfg*.xml file)."),
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":95
 *     EnumWithDoc('NodeAdded').setDoc("A new node has been added to OpenZWave's set.  This may be due to a device being added to the Z-Wave network, or because the application is initializing itself."),
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":96
 *     EnumWithDoc('NodeRemoved').setDoc("A node has been removed from OpenZWave's set.  This may be due to a device being removed from the Z-Wave network, or because the application is closing."),
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":97
 *     EnumWithDoc('NodeProtocolInfo').setDoc("Basic node information has been receievd, such as whether the node is a setening device, a routing device and its baud rate and basic, generic and specific types. It is after this notification that you can call Manager::GetNodeType to obtain a label containing the device description."),
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":98
 *     EnumWithDoc('NodeNaming').setDoc("One of the node names has changed (name, manufacturer, product)."),
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":99
 *     EnumWithDoc('NodeEvent').setDoc("A node has triggered an event.  This is commonly caused when a node sends a Basic_Set command to the controller.  The event value is stored in the notification."),
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":100
 *     EnumWithDoc('PollingDisabled').setDoc("Polling of a node has been successfully turned off by a call to Manager::DisablePoll."),
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":101
 *     EnumWithDoc('PollingEnabled').setDoc("Polling of a node has been successfully turned on by a call to Manager::EnablePoll."),
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":102
 *     EnumWithDoc('SceneEvent').setDoc("Scene Activation Set received."),
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":103
 *     EnumWithDoc('CreateButton').setDoc("Handheld controller button event created."),
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":104
 *     EnumWithDoc('DeleteButton').setDoc("Handheld controller button event deleted."),
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":105
 *     EnumWithDoc('ButtonOn').setDoc("Handheld controller button on pressed event."),
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":106
 *     EnumWithDoc('ButtonOff').setDoc("Handheld controller button off pressed event."),
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_25, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":107
 *     EnumWithDoc('DriverReady').setDoc("A driver for a PC Z-Wave controller has been added and is ready to use.  The notification will contain the controller's Home ID, which is needed to call most of the Manager methods."),
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_26, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":108
 *     EnumWithDoc('DriverFailed').setDoc("Driver failed to load."),
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_27, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":109
 *     EnumWithDoc('DriverReset').setDoc("All nodes and values for this driver have been removed.  This is sent instead of potentially hundreds of individual node and value notifications."),
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":110
 *     EnumWithDoc('EssentialNodeQueriesComplete').setDoc("The queries on a node that are essential to its operation have been completed. The node can now handle incoming messages."),
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":111
 *     EnumWithDoc('NodeQueriesComplete').setDoc("All the initialisation queries on a node have been completed."),
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 *     EnumWithDoc('Notification').setDoc("A manager notification report."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_30, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":112
 *     EnumWithDoc('AwakeNodesQueried').setDoc("All awake nodes have been queried, so client application can expected complete data for these nodes."),
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Notification').setDoc("A manager notification report."),
 *     EnumWithDoc('DriverRemoved').setDoc("The Driver is being removed."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_31, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":113
 *     EnumWithDoc('AllNodesQueried').setDoc("All nodes have been queried, so client application can expected complete data."),
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 *     EnumWithDoc('Notification').setDoc("A manager notification report."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DriverRemoved').setDoc("The Driver is being removed."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":114
 *     EnumWithDoc('AllNodesQueriedSomeDead').setDoc("All nodes have been queried but some dead nodes found."),
 *     EnumWithDoc('Notification').setDoc("A manager notification report."),
 *     EnumWithDoc('DriverRemoved').setDoc("The Driver is being removed."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_33, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":86
 *         return self
 * 
 * PyNotifications = [             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ValueAdded').setDoc("A new node value has been added to OpenZWave's set. These notifications occur after a node has been discovered, and details of its command classes have been received.  Each command class may generate one or more values depending on the complexity of the item being represented."),
 *     EnumWithDoc('ValueRemoved').setDoc("A node value has been removed from OpenZWave's set.  This only occurs when a node is removed."),
 */
  __pyx_t_1 = PyList_New(28); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_15);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_16);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_20);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_29);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_30);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_31);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_32);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_33);
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_31 = 0;
  __pyx_t_32 = 0;
  __pyx_t_33 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyNotifications, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":118
 * 
 * PyNotificationCodes = [
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_33, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":119
 * PyNotificationCodes = [
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":120
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_31, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":121
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_30, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":122
 *     EnumWithDoc('NoOperation').setDoc("Report on NoOperation message sent completion."),
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":123
 *     EnumWithDoc('Awake').setDoc("Report when a sleeping node wakes."),
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":124
 *     EnumWithDoc('Sleep').setDoc("Report when a node goes to sleep."),
 *     EnumWithDoc('Dead').setDoc("Report when a node is presumed dead."),
 *     EnumWithDoc('Alive').setDoc("Report when a node is revived."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_27, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":117
 *     ]
 * 
 * PyNotificationCodes = [             # <<<<<<<<<<<<<<
 *     EnumWithDoc('MsgComplete').setDoc("Completed messages."),
 *     EnumWithDoc('Timeout').setDoc("Messages that timeout will send a Notification with this code."),
 */
  __pyx_t_1 = PyList_New(7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_33);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_32);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_31);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_30);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_29);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  __pyx_t_33 = 0;
  __pyx_t_32 = 0;
  __pyx_t_31 = 0;
  __pyx_t_30 = 0;
  __pyx_t_29 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyNotificationCodes, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":128
 * 
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_27, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":129
 * PyGenres = [
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":130
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":131
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 *     EnumWithDoc('Config').setDoc("Device-specific configuration parameters.  These cannot be automatically discovered via Z-Wave, and are usually described in the user manual instead."),
 *     EnumWithDoc('System').setDoc("Values of significance only to users who understand the Z-Wave protocol"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_30, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":127
 *     ]
 * 
 * PyGenres = [             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Basic').setDoc("The 'level' as controlled by basic commands.  Usually duplicated by another command class."),
 *     EnumWithDoc('User').setDoc("Basic values an ordinary user would be interested in."),
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_29);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_30);
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyGenres, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":135
 * 
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__88, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_30, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__89, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":136
 * PyValueTypes = [
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__90, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":137
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__92, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__93, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":138
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__94, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_27, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":139
 *     EnumWithDoc('Decimal').setDoc("Represents a non-integer value as a string, to avoid floating point accuracy issues."),
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_31, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__97, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":140
 *     EnumWithDoc('Int').setDoc("32-bit signed value"),
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__98, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__99, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":141
 *     EnumWithDoc('List').setDoc("List from which one item can be selected"),
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('String').setDoc("Text string"),
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__100, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_33, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__101, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":142
 *     EnumWithDoc('Schedule').setDoc("Complex type used with the Climate Control Schedule command class"),
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),
 *     EnumWithDoc('Raw').setDoc("Raw byte values"),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__102, NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_26, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__103, NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":143
 *     EnumWithDoc('Short').setDoc("16-bit signed value"),
 *     EnumWithDoc('String').setDoc("Text string"),
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Raw').setDoc("Raw byte values"),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__104, NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_25, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__105, NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":144
 *     EnumWithDoc('String').setDoc("Text string"),
 *     EnumWithDoc('Button').setDoc("A write-only value that is the equivalent of pressing a button to send a command to a device"),
 *     EnumWithDoc('Raw').setDoc("Raw byte values"),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__106, NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__107, NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":134
 *     ]
 * 
 * PyValueTypes = [             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Bool').setDoc("Boolean, true or false"),
 *     EnumWithDoc('Byte').setDoc("8-bit unsigned value"),
 */
  __pyx_t_1 = PyList_New(10); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_30);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_29);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_31);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_32);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_33);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  __pyx_t_30 = 0;
  __pyx_t_29 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_31 = 0;
  __pyx_t_32 = 0;
  __pyx_t_33 = 0;
  __pyx_t_26 = 0;
  __pyx_t_25 = 0;
  __pyx_t_24 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyValueTypes, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":148
 * 
 * PyControllerState = [
 *     EnumWithDoc('Normal').setDoc("No command in progress."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__108, NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__109, NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":149
 * PyControllerState = [
 *     EnumWithDoc('Normal').setDoc("No command in progress."),
 *     EnumWithDoc('Starting').setDoc("The command is starting."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__110, NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_25, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__111, NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":150
 *     EnumWithDoc('Normal').setDoc("No command in progress."),
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__112, NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_26, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__113, NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":151
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__114, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_33, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__115, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":152
 *     EnumWithDoc('Cancel').setDoc("The command was cancelled."),
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__116, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__117, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":153
 *     EnumWithDoc('Error').setDoc("Command invocation had error(s) and was aborted."),
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__118, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_31, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__119, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":154
 *     EnumWithDoc('Waiting').setDoc("Controller is waiting for a user action."),
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__120, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_27, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__121, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":155
 *     EnumWithDoc('Sleeping').setDoc("Controller command is on a sleep queue wait for device."),
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__122, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__123, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":156
 *     EnumWithDoc('InProgress').setDoc("The controller is communicating with the other device to carry out the command."),
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__124, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__125, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":157
 *     EnumWithDoc('Completed').setDoc("The command has completed successfully."),
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__126, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_30, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__127, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":158
 *     EnumWithDoc('Failed').setDoc("The command has failed."),
 *     EnumWithDoc('NodeOK').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node is OK."),
 *     EnumWithDoc('NodeFailed').setDoc("Used only with ControllerCommand_HasNodeFailed to indicate that the controller thinks the node has failed."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__128, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__129, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":147
 *     ]
 * 
 * PyControllerState = [             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Normal').setDoc("No command in progress."),
 *     EnumWithDoc('Starting').setDoc("The command is starting."),
 */
  __pyx_t_1 = PyList_New(11); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_33);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_32);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_31);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_29);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_30);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_33 = 0;
  __pyx_t_32 = 0;
  __pyx_t_31 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_23 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyControllerState, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":162
 * 
 * PyControllerError = [
 *     EnumWithDoc('None').setDoc("None."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__130, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__131, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":163
 * PyControllerError = [
 *     EnumWithDoc('None').setDoc("None."),
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__132, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_30, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__133, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":164
 *     EnumWithDoc('None').setDoc("None."),
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__134, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__135, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":165
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__136, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__137, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":166
 *     EnumWithDoc('NodeNotFound').setDoc("Button."),
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__138, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_27, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__139, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":167
 *     EnumWithDoc('NotBridge').setDoc("Button."),
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__140, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_31, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__141, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":168
 *     EnumWithDoc('NotSUC').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__142, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__143, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":169
 *     EnumWithDoc('NotSecondary').setDoc("CreateNewPrimary."),
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__144, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_33, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__145, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":170
 *     EnumWithDoc('NotPrimary').setDoc("RemoveFailedNode, AddNodeToNetwork."),
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__146, NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_26, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__147, NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":171
 *     EnumWithDoc('IsPrimary').setDoc("ReceiveConfiguration."),
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__148, NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_25, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__149, NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":172
 *     EnumWithDoc('NotFound').setDoc("RemoveFailedNode."),
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__150, NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__151, NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":173
 *     EnumWithDoc('Busy').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__152, NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__153, NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":174
 *     EnumWithDoc('Failed').setDoc("RemoveFailedNode, RequestNetworkUpdate."),
 *     EnumWithDoc('Disabled').setDoc("RequestNetworkUpdate error."),
 *     EnumWithDoc('Overflow').setDoc("RequestNetworkUpdate error."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__154, NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__155, NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":161
 *     ]
 * 
 * PyControllerError = [             # <<<<<<<<<<<<<<
 *     EnumWithDoc('None').setDoc("None."),
 *     EnumWithDoc('ButtonNotFound').setDoc("Button."),
 */
  __pyx_t_1 = PyList_New(13); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_30);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_29);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_31);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_32);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_33);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  __pyx_t_23 = 0;
  __pyx_t_30 = 0;
  __pyx_t_29 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_31 = 0;
  __pyx_t_32 = 0;
  __pyx_t_33 = 0;
  __pyx_t_26 = 0;
  __pyx_t_25 = 0;
  __pyx_t_24 = 0;
  __pyx_t_22 = 0;
  __pyx_t_21 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyControllerError, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":178
 * 
 * PyControllerCommand = [
 *     EnumWithDoc('None').setDoc("No command."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__156, NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
  __pyx_t_21 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__157, NULL); if (unlikely(!__pyx_t_21)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":179
 * PyControllerCommand = [
 *     EnumWithDoc('None').setDoc("No command."),
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__158, NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_22, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
  __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__159, NULL); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":180
 *     EnumWithDoc('None').setDoc("No command."),
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__160, NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__161, NULL); if (unlikely(!__pyx_t_24)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":181
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__162, NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_25, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __pyx_t_25 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__163, NULL); if (unlikely(!__pyx_t_25)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":182
 *     EnumWithDoc('CreateNewPrimary').setDoc("Add a new controller to the Z-Wave network.  The new controller will be the primary, and the current primary will become a secondary controller."),
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__164, NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_26, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__165, NULL); if (unlikely(!__pyx_t_26)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":183
 *     EnumWithDoc('ReceiveConfiguration').setDoc("Receive Z-Wave network configuration information from another controller."),
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__166, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_33, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__167, NULL); if (unlikely(!__pyx_t_33)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":184
 *     EnumWithDoc('RemoveDevice').setDoc("Remove a new device (but not a controller) from the Z-Wave network."),
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__168, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__169, NULL); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":185
 *     EnumWithDoc('RemoveFailedNode').setDoc("Move a node to the controller's failed nodes list. This command will only work if the node cannot respond."),
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__170, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_31, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__171, NULL); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":186
 *     EnumWithDoc('HasNodeFailed').setDoc("Check whether a node is in the controller's failed nodes list."),
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__172, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_27, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
  __pyx_t_27 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__173, NULL); if (unlikely(!__pyx_t_27)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":187
 *     EnumWithDoc('ReplaceFailedNode').setDoc("Replace a non-responding node with another. The node must be in the controller's list of failed nodes for this command to succeed."),
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__174, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_28, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
  __pyx_t_28 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__175, NULL); if (unlikely(!__pyx_t_28)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":188
 *     EnumWithDoc('TransferPrimaryRole').setDoc("Make a different controller the primary."),
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__176, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_29, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__177, NULL); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":189
 *     EnumWithDoc('RequestNetworkUpdate').setDoc("Request network information from the SUC/SIS."),
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__178, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_30, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_30); __pyx_t_30 = 0;
  __pyx_t_30 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__179, NULL); if (unlikely(!__pyx_t_30)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":190
 *     EnumWithDoc('RequestNodeNeighborUpdate').setDoc("Get a node to rebuild its neighbour list.  This method also does ControllerCommand_RequestNodeNeighbors."),
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__180, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__181, NULL); if (unlikely(!__pyx_t_23)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":191
 *     EnumWithDoc('AssignReturnRoute').setDoc("Assign a network return routes to a device."),
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__182, NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__183, NULL); if (unlikely(!__pyx_t_20)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":192
 *     EnumWithDoc('DeleteAllReturnRoutes').setDoc("Delete all return routes from a device."),
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__184, NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__185, NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":193
 *     EnumWithDoc('SendNodeInformation').setDoc("Send a node information frame."),
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),
 *     ]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__186, NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__187, NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":194
 *     EnumWithDoc('ReplicationSend').setDoc("Send information from primary to secondary."),
 *     EnumWithDoc('CreateButton').setDoc("Create an id that tracks handheld button presses."),
 *     EnumWithDoc('DeleteButton').setDoc("Delete id that tracks handheld button presses."),             # <<<<<<<<<<<<<<
 *     ]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__188, NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__189, NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":177
 *     ]
 * 
 * PyControllerCommand = [             # <<<<<<<<<<<<<<
 *     EnumWithDoc('None').setDoc("No command."),
 *     EnumWithDoc('AddDevice').setDoc("Add a new device (but not a controller) to the Z-Wave network."),
 */
  __pyx_t_1 = PyList_New(17); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_21);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_22);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_24);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_25);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_26);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_33);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_32);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_31);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_27);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_28);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_29);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_30);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_23);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_20);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_33 = 0;
  __pyx_t_32 = 0;
  __pyx_t_31 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_23 = 0;
  __pyx_t_20 = 0;
  __pyx_t_19 = 0;
  __pyx_t_18 = 0;
  __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyControllerCommand, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":198
 * 
 * PyControllerInterface = [
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__190, NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__191, NULL); if (unlikely(!__pyx_t_17)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":199
 * PyControllerInterface = [
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),
 * ]
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__192, NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__193, NULL); if (unlikely(!__pyx_t_18)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":200
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),
 *     EnumWithDoc('Hid').setDoc("Controller interface use human interface device protocol."),             # <<<<<<<<<<<<<<
 * ]
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_EnumWithDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__194, NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_setDoc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__195, NULL); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":197
 *     ]
 * 
 * PyControllerInterface = [             # <<<<<<<<<<<<<<
 *     EnumWithDoc('Unknown').setDoc("Controller interface use unknown protocol ."),
 *     EnumWithDoc('Serial').setDoc("Controller interface use serial protocol."),
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_17);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_18);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_19);
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyControllerInterface, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":203
 * ]
 * 
 * PyStatDriver = {             # <<<<<<<<<<<<<<
 *     'SOFCnt' : "Number of SOF bytes received",
 *     'ACKWaiting' : "Number of unsolicited messages while waiting for an ACK",
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SOFCnt, __pyx_kp_s_Number_of_SOF_bytes_received) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ACKWaiting, __pyx_kp_s_Number_of_unsolicited_messages_w) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_readAborts, __pyx_kp_s_Number_of_times_read_were_aborte) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_badChecksum, __pyx_kp_s_Number_of_bad_checksums) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_readCnt, __pyx_kp_s_Number_of_messages_successfully) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_writeCnt, __pyx_kp_s_Number_of_messages_successfully_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CANCnt, __pyx_kp_s_Number_of_CAN_bytes_received) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NAKCnt, __pyx_kp_s_Number_of_NAK_bytes_received) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ACKCnt, __pyx_kp_s_Number_of_ACK_bytes_received) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OOFCnt, __pyx_kp_s_Number_of_bytes_out_of_framing) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dropped, __pyx_kp_s_Number_of_messages_dropped_not_d) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_retries, __pyx_kp_s_Number_of_messages_retransmitted) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_callbacks, __pyx_kp_s_Number_of_unexpected_callbacks) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_badroutes, __pyx_kp_s_Number_of_failed_messages_due_to) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_noack, __pyx_kp_s_Number_of_no_ACK_returned_errors) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_netbusy, __pyx_kp_s_Number_of_network_busy_failure_m) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_nondelivery, __pyx_kp_s_Number_of_messages_not_delivered) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_routedbusy, __pyx_kp_s_Number_of_messages_received_with) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_broadcastReadCnt, __pyx_kp_s_Number_of_broadcasts_read) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_broadcastWriteCnt, __pyx_kp_s_Number_of_broadcasts_sent) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyStatDriver, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":226
 *     }
 * 
 * PyLogLevels = {             # <<<<<<<<<<<<<<
 *     'None' : 0,
 *     'Always' : 1,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_None, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Always, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Fatal, __pyx_int_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Error, __pyx_int_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Warning, __pyx_int_4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Alert, __pyx_int_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Info, __pyx_int_6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Detail, __pyx_int_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Debug, __pyx_int_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_StreamDetail, __pyx_int_9) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Internal, __pyx_int_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PyLogLevels, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":392
 *     cdef DriverData data
 * 
 * def configPath():             # <<<<<<<<<<<<<<
 *     '''
 * Retrieve the config path. This directory hold the xml files.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_12libopenzwave_3configPath, NULL, __pyx_n_s_libopenzwave); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_configPath, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "libopenzwave.pyx":570
 * sleeping) have been polled, an "AllNodesQueried" notification is sent.
 *     '''
 *     COMMAND_CLASS_DESC = {             # <<<<<<<<<<<<<<
 *         0x00: 'COMMAND_CLASS_NO_OPERATION',
 *         0x20: 'COMMAND_CLASS_BASIC',
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_0, __pyx_n_s_COMMAND_CLASS_NO_OPERATION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_32, __pyx_n_s_COMMAND_CLASS_BASIC) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_33, __pyx_n_s_COMMAND_CLASS_CONTROLLER_REPLICA) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_34, __pyx_n_s_COMMAND_CLASS_APPLICATION_STATUS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_35, __pyx_n_s_COMMAND_CLASS_ZIP_SERVICES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_36, __pyx_n_s_COMMAND_CLASS_ZIP_SERVER) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_37, __pyx_n_s_COMMAND_CLASS_SWITCH_BINARY) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_38, __pyx_n_s_COMMAND_CLASS_SWITCH_MULTILEVEL) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_39, __pyx_n_s_COMMAND_CLASS_SWITCH_ALL) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_40, __pyx_n_s_COMMAND_CLASS_SWITCH_TOGGLE_BINA) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_41, __pyx_n_s_COMMAND_CLASS_SWITCH_TOGGLE_MULT) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_42, __pyx_n_s_COMMAND_CLASS_CHIMNEY_FAN) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_43, __pyx_n_s_COMMAND_CLASS_SCENE_ACTIVATION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_44, __pyx_n_s_COMMAND_CLASS_SCENE_ACTUATOR_CON) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_45, __pyx_n_s_COMMAND_CLASS_SCENE_CONTROLLER_C) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_46, __pyx_n_s_COMMAND_CLASS_ZIP_CLIENT) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_47, __pyx_n_s_COMMAND_CLASS_ZIP_ADV_SERVICES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_48, __pyx_n_s_COMMAND_CLASS_SENSOR_BINARY) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_49, __pyx_n_s_COMMAND_CLASS_SENSOR_MULTILEVEL) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_50, __pyx_n_s_COMMAND_CLASS_METER) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_51, __pyx_n_s_COMMAND_CLASS_ZIP_ADV_SERVER) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_52, __pyx_n_s_COMMAND_CLASS_ZIP_ADV_CLIENT) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_53, __pyx_n_s_COMMAND_CLASS_METER_PULSE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_60, __pyx_n_s_COMMAND_CLASS_METER_TBL_CONFIG) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_61, __pyx_n_s_COMMAND_CLASS_METER_TBL_MONITOR) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_62, __pyx_n_s_COMMAND_CLASS_METER_TBL_PUSH) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_56, __pyx_n_s_COMMAND_CLASS_THERMOSTAT_HEATING) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_64, __pyx_n_s_COMMAND_CLASS_THERMOSTAT_MODE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_66, __pyx_n_s_COMMAND_CLASS_THERMOSTAT_OPERATI) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_67, __pyx_n_s_COMMAND_CLASS_THERMOSTAT_SETPOIN) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_68, __pyx_n_s_COMMAND_CLASS_THERMOSTAT_FAN_MOD) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_69, __pyx_n_s_COMMAND_CLASS_THERMOSTAT_FAN_STA) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_70, __pyx_n_s_COMMAND_CLASS_CLIMATE_CONTROL_SC) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_71, __pyx_n_s_COMMAND_CLASS_THERMOSTAT_SETBACK) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_76, __pyx_n_s_COMMAND_CLASS_DOOR_LOCK_LOGGING) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_78, __pyx_n_s_COMMAND_CLASS_SCHEDULE_ENTRY_LOC) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_80, __pyx_n_s_COMMAND_CLASS_BASIC_WINDOW_COVER) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_81, __pyx_n_s_COMMAND_CLASS_MTP_WINDOW_COVERIN) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_96, __pyx_n_s_COMMAND_CLASS_MULTI_CHANNEL_V2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_97, __pyx_n_s_COMMAND_CLASS_DISPLAY) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_98, __pyx_n_s_COMMAND_CLASS_DOOR_LOCK) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_99, __pyx_n_s_COMMAND_CLASS_USER_CODE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_100, __pyx_n_s_COMMAND_CLASS_GARAGE_DOOR) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_112, __pyx_n_s_COMMAND_CLASS_CONFIGURATION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_113, __pyx_n_s_COMMAND_CLASS_ALARM) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_114, __pyx_n_s_COMMAND_CLASS_MANUFACTURER_SPECI) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_115, __pyx_n_s_COMMAND_CLASS_POWERLEVEL) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_117, __pyx_n_s_COMMAND_CLASS_PROTECTION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_118, __pyx_n_s_COMMAND_CLASS_LOCK) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_119, __pyx_n_s_COMMAND_CLASS_NODE_NAMING) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_120, __pyx_n_s_COMMAND_CLASS_ACTUATOR_MULTILEVE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_121, __pyx_n_s_COMMAND_CLASS_KICK) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_122, __pyx_n_s_COMMAND_CLASS_FIRMWARE_UPDATE_MD) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_123, __pyx_n_s_COMMAND_CLASS_GROUPING_NAME) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_124, __pyx_n_s_COMMAND_CLASS_REMOTE_ASSOCIATION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_125, __pyx_n_s_COMMAND_CLASS_REMOTE_ASSOCIATION_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_128, __pyx_n_s_COMMAND_CLASS_BATTERY) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_129, __pyx_n_s_COMMAND_CLASS_CLOCK) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_130, __pyx_n_s_COMMAND_CLASS_HAIL) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_131, __pyx_n_s_COMMAND_CLASS_NETWORK_STAT) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_132, __pyx_n_s_COMMAND_CLASS_WAKE_UP) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_133, __pyx_n_s_COMMAND_CLASS_ASSOCIATION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_134, __pyx_n_s_COMMAND_CLASS_VERSION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_135, __pyx_n_s_COMMAND_CLASS_INDICATOR) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_136, __pyx_n_s_COMMAND_CLASS_PROPRIETARY) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_137, __pyx_n_s_COMMAND_CLASS_LANGUAGE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_138, __pyx_n_s_COMMAND_CLASS_TIME) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_139, __pyx_n_s_COMMAND_CLASS_TIME_PARAMETERS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_140, __pyx_n_s_COMMAND_CLASS_GEOGRAPHIC_LOCATIO) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_141, __pyx_n_s_COMMAND_CLASS_COMPOSITE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_142, __pyx_n_s_COMMAND_CLASS_MULTI_INSTANCE_ASS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_143, __pyx_n_s_COMMAND_CLASS_MULTI_CMD) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_144, __pyx_n_s_COMMAND_CLASS_ENERGY_PRODUCTION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_145, __pyx_n_s_COMMAND_CLASS_MANUFACTURER_PROPR) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_146, __pyx_n_s_COMMAND_CLASS_SCREEN_MD) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_147, __pyx_n_s_COMMAND_CLASS_SCREEN_ATTRIBUTES) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_148, __pyx_n_s_COMMAND_CLASS_SIMPLE_AV_CONTROL) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_149, __pyx_n_s_COMMAND_CLASS_AV_CONTENT_DIRECTO) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_150, __pyx_n_s_COMMAND_CLASS_AV_RENDERER_STATUS) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_151, __pyx_n_s_COMMAND_CLASS_AV_CONTENT_SEARCH) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_152, __pyx_n_s_COMMAND_CLASS_SECURITY) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_153, __pyx_n_s_COMMAND_CLASS_AV_TAGGING_MD) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_154, __pyx_n_s_COMMAND_CLASS_IP_CONFIGURATION) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_155, __pyx_n_s_COMMAND_CLASS_ASSOCIATION_COMMAN) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_156, __pyx_n_s_COMMAND_CLASS_SENSOR_ALARM) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_157, __pyx_n_s_COMMAND_CLASS_SILENCE_ALARM) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_158, __pyx_n_s_COMMAND_CLASS_SENSOR_CONFIGURATI) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_239, __pyx_n_s_COMMAND_CLASS_MARK) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem(__pyx_t_1, __pyx_int_240, __pyx_n_s_COMMAND_CLASS_NON_INTEROPERABLE) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyDict_SetItem((PyObject *)__pyx_ptype_12libopenzwave_PyManager->tp_dict, __pyx_n_s_COMMAND_CLASS_DESC, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 570; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_12libopenzwave_PyManager);

  /* "libopenzwave.pyx":666
 *     '''
 * 
 *     CALLBACK_DESC = ('value added','value removed','value changed','groups changed','new node','node added',             # <<<<<<<<<<<<<<
 *                      'node removed','node protocol info','node naming','node event','polling disabled',
 *                      'polling enabled','driver ready','driver reset','message complete','node queries complete',
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_12libopenzwave_PyManager->tp_dict, __pyx_n_s_CALLBACK_DESC, __pyx_tuple__198) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 666; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_12libopenzwave_PyManager);

  /* "libopenzwave.pyx":1
 * """             # <<<<<<<<<<<<<<
 * .. module:: libopenzwave
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_XDECREF(__pyx_t_30);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_XDECREF(__pyx_t_33);
  if (__pyx_m) {
    __Pyx_AddTraceback("init libopenzwave", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init libopenzwave");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (result) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        #if CYTHON_PEP393_ENABLED
        if (unlikely(PyUnicode_READY(s1) < 0) || unlikely(PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, length * kind);
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
#endif
    result = (*call)(func, arg, kw);
#if PY_VERSION_HEX >= 0x02060000
    Py_LeaveRecursiveCall();
#endif
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    #if PY_VERSION_HEX < 0x02050000
    if (PyClass_Check(type)) {
    #else
    if (PyType_Check(type)) {
    #endif
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        #if PY_VERSION_HEX < 0x02050000
        if (PyInstance_Check(type)) {
            type = (PyObject*) ((PyInstanceObject*)type)->in_class;
            Py_INCREF(type);
        } else {
            type = 0;
            PyErr_SetString(PyExc_TypeError,
                "raise: exception must be an old-style class or instance");
            goto raise_error;
        }
        #else
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
        #endif
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL)
        value = Py_None; /* Mark as deleted */
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED /* < Py2.5 */
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    op->func_weakreflist = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (m->func_weakreflist != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return PyMethod_New(func,
                            type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("cython_function_or_method"), /*tp_name*/
    sizeof(__pyx_CyFunctionObject),   /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_CyFunction_dealloc, /*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    (reprfunc) __Pyx_CyFunction_repr,   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    __Pyx_CyFunction_Call,              /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_CyFunction_traverse,   /*tp_traverse*/
    (inquiry) __Pyx_CyFunction_clear,   /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_CyFunctionObject, func_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    0,                                  /*tp_iternext*/
    __pyx_CyFunction_methods,           /*tp_methods*/
    __pyx_CyFunction_members,           /*tp_members*/
    __pyx_CyFunction_getsets,           /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    __Pyx_CyFunction_descr_get,         /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    offsetof(__pyx_CyFunctionObject, func_dict),/*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    0,                                  /*tp_del*/
#if PY_VERSION_HEX >= 0x02060000
    0,                                  /*tp_version_tag*/
#endif
#if PY_VERSION_HEX >= 0x030400a1
    0,                                  /*tp_finalize*/
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc_2, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    #if PY_VERSION_HEX >= 0x02050000
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
    #else
    if (level>0) {
        PyErr_SetString(PyExc_RuntimeError, "Relative import is not supported for Python <=2.4.");
        goto bad;
    }
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
    #endif
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE uint32_t __Pyx_PyInt_As_uint32_t(PyObject *x) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint32_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint32_t");
                return (uint32_t) -1;
            }
            return (uint32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint32_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (uint32_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint32_t");
                return (uint32_t) -1;
            }
            if (sizeof(uint32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(uint32_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(uint32_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint32_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(uint32_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(uint32_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(uint32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(uint32_t, long, PyLong_AsLong)
            } else if (sizeof(uint32_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(uint32_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint32_t) -1;
        }
    } else {
        uint32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint32_t) -1;
        val = __Pyx_PyInt_As_uint32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE uint8_t __Pyx_PyInt_As_uint8_t(PyObject *x) {
    const uint8_t neg_one = (uint8_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint8_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint8_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint8_t");
                return (uint8_t) -1;
            }
            return (uint8_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint8_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (uint8_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint8_t");
                return (uint8_t) -1;
            }
            if (sizeof(uint8_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(uint8_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(uint8_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint8_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(uint8_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(uint8_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(uint8_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(uint8_t, long, PyLong_AsLong)
            } else if (sizeof(uint8_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(uint8_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint8_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint8_t) -1;
        }
    } else {
        uint8_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint8_t) -1;
        val = __Pyx_PyInt_As_uint8_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE uint64_t __Pyx_PyInt_As_uint64_t(PyObject *x) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(uint64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(uint64_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint64_t");
                return (uint64_t) -1;
            }
            return (uint64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint64_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (uint64_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to uint64_t");
                return (uint64_t) -1;
            }
            if (sizeof(uint64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(uint64_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(uint64_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(uint64_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(uint64_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(uint64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, long, PyLong_AsLong)
            } else if (sizeof(uint64_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(uint64_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            uint64_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (uint64_t) -1;
        }
    } else {
        uint64_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (uint64_t) -1;
        val = __Pyx_PyInt_As_uint64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint8_t(uint8_t value) {
    const uint8_t neg_one = (uint8_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint8_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint8_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint8_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(uint8_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint8_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint8_t),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value) {
    const int32_t neg_one = (int32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int32_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int16_t(int16_t value) {
    const int16_t neg_one = (int16_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int16_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int16_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int16_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int16_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int16_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int16_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint32_t(uint32_t value) {
    const uint32_t neg_one = (uint32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint32_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(uint32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint32_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint32_t),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint64_t(uint64_t value) {
    const uint64_t neg_one = (uint64_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint64_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(uint64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint64_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint64_t),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
    const int32_t neg_one = (int32_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int32_t");
                return (int32_t) -1;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int32_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int32_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int32_t");
                return (int32_t) -1;
            }
            if (sizeof(int32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int32_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int32_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int32_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int32_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, long, PyLong_AsLong)
            } else if (sizeof(int32_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int32_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int32_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_uint16_t(uint16_t value) {
    const uint16_t neg_one = (uint16_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(uint16_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint16_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(uint16_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(uint16_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(uint16_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(uint16_t),
                                     little, !is_unsigned);
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int16_t __Pyx_PyInt_As_int16_t(PyObject *x) {
    const int16_t neg_one = (int16_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int16_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int16_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int16_t");
                return (int16_t) -1;
            }
            return (int16_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int16_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int16_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int16_t");
                return (int16_t) -1;
            }
            if (sizeof(int16_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int16_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int16_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int16_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int16_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int16_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int16_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int16_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int16_t, long, PyLong_AsLong)
            } else if (sizeof(int16_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int16_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int16_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int16_t) -1;
        }
    } else {
        int16_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int16_t) -1;
        val = __Pyx_PyInt_As_int16_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int8_t(int8_t value) {
    const int8_t neg_one = (int8_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int8_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int8_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int8_t) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int8_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int8_t) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int8_t),
                                     little, !is_unsigned);
    }
}

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        #if PY_VERSION_HEX < 0x02050000
        return PyErr_Warn(NULL, message);
        #else
        return PyErr_WarnEx(NULL, message, 1);
        #endif
    }
    return 0;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
#if PY_VERSION_HEX >= 0x02060000
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
  #if PY_VERSION_HEX < 0x02060000
    return PyInt_AsSsize_t(b);
  #else
    return PyLong_AsSsize_t(b);
  #endif
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}


#endif /* Py_PYTHON_H */
